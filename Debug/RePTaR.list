
RePTaR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006250  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006520  08006520  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006528  08006528  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f0  20000088  080065b8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a78  080065b8  00020a78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e296  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000391f  00000000  00000000  0003e34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00041c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  000430b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a38e  00000000  00000000  00044378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e92  00000000  00000000  0006e706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f52bd  00000000  00000000  00088598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017d855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005754  00000000  00000000  0017d8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063c8 	.word	0x080063c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080063c8 	.word	0x080063c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  error_code_t retval = E_OK;
 800057e:	2300      	movs	r3, #0
 8000580:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fca8 	bl	8000ed6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f817 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f9f1 	bl	8000970 <MX_GPIO_Init>
  MX_I2C1_Init();
 800058e:	f000 f8a1 	bl	80006d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000592:	f000 f94f 	bl	8000834 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f9bb 	bl	8000910 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f989 	bl	80008b0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800059e:	f000 f8d9 	bl	8000754 <MX_RTC_Init>
  MX_FATFS_Init();
 80005a2:	f004 f877 	bl	8004694 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  retval = reptar_init();
 80005a6:	f000 fa65 	bl	8000a74 <reptar_init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]

  if (retval != E_OK)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d000      	beq.n	80005b6 <main+0x3e>
  {
	  while(1);
 80005b4:	e7fe      	b.n	80005b4 <main+0x3c>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <main+0x3e>

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b0b8      	sub	sp, #224	; 0xe0
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005c2:	2244      	movs	r2, #68	; 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 faae 	bl	8005b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005dc:	463b      	mov	r3, r7
 80005de:	2288      	movs	r2, #136	; 0x88
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 faa0 	bl	8005b28 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e8:	f001 f8dc 	bl	80017a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005ec:	4b37      	ldr	r3, [pc, #220]	; (80006cc <SystemClock_Config+0x114>)
 80005ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005f2:	4a36      	ldr	r2, [pc, #216]	; (80006cc <SystemClock_Config+0x114>)
 80005f4:	f023 0318 	bic.w	r3, r3, #24
 80005f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80005fc:	2306      	movs	r3, #6
 80005fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000602:	2301      	movs	r3, #1
 8000604:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000628:	2308      	movs	r3, #8
 800062a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062e:	2307      	movs	r3, #7
 8000630:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f921 	bl	800188c <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000650:	f000 f9e4 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2303      	movs	r3, #3
 800065c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000672:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000676:	2101      	movs	r1, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fced 	bl	8002058 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000684:	f000 f9ca 	bl	8000a1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <SystemClock_Config+0x118>)
 800068a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000690:	2300      	movs	r3, #0
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000694:	2300      	movs	r3, #0
 8000696:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fede 	bl	8002464 <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80006ae:	f000 f9b5 	bl	8000a1c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b6:	f001 f893 	bl	80017e0 <HAL_PWREx_ControlVoltageScaling>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80006c0:	f000 f9ac 	bl	8000a1c <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	37e0      	adds	r7, #224	; 0xe0
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	00020043 	.word	0x00020043

080006d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C1_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C1_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <MX_I2C1_Init+0x7c>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_I2C1_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_I2C1_Init+0x74>)
 8000710:	f000 ff22 	bl	8001558 <HAL_I2C_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 f97f 	bl	8000a1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071e:	2100      	movs	r1, #0
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_I2C1_Init+0x74>)
 8000722:	f000 ffa8 	bl	8001676 <HAL_I2CEx_ConfigAnalogFilter>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 f976 	bl	8000a1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_I2C1_Init+0x74>)
 8000734:	f000 ffea 	bl	800170c <HAL_I2CEx_ConfigDigitalFilter>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f96d 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000418 	.word	0x20000418
 800074c:	40005400 	.word	0x40005400
 8000750:	00707cbb 	.word	0x00707cbb

08000754 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800076c:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <MX_RTC_Init+0xd4>)
 800076e:	4a2f      	ldr	r2, [pc, #188]	; (800082c <MX_RTC_Init+0xd8>)
 8000770:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <MX_RTC_Init+0xd4>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000778:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <MX_RTC_Init+0xd4>)
 800077a:	227f      	movs	r2, #127	; 0x7f
 800077c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800077e:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <MX_RTC_Init+0xd4>)
 8000780:	22ff      	movs	r2, #255	; 0xff
 8000782:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000784:	4b28      	ldr	r3, [pc, #160]	; (8000828 <MX_RTC_Init+0xd4>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800078a:	4b27      	ldr	r3, [pc, #156]	; (8000828 <MX_RTC_Init+0xd4>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <MX_RTC_Init+0xd4>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000796:	4b24      	ldr	r3, [pc, #144]	; (8000828 <MX_RTC_Init+0xd4>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800079c:	4822      	ldr	r0, [pc, #136]	; (8000828 <MX_RTC_Init+0xd4>)
 800079e:	f002 fb1d 	bl	8002ddc <HAL_RTC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80007a8:	f000 f938 	bl	8000a1c <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != RTC_BACKUP_MAGIC_NUM)
 80007ac:	2100      	movs	r1, #0
 80007ae:	481e      	ldr	r0, [pc, #120]	; (8000828 <MX_RTC_Init+0xd4>)
 80007b0:	f002 fe47 	bl	8003442 <HAL_RTCEx_BKUPRead>
 80007b4:	4603      	mov	r3, r0
 80007b6:	f243 22f3 	movw	r2, #13043	; 0x32f3
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d030      	beq.n	8000820 <MX_RTC_Init+0xcc>
  {
	  reptar_printf("Setting up RTC!\r\n");
 80007be:	481c      	ldr	r0, [pc, #112]	; (8000830 <MX_RTC_Init+0xdc>)
 80007c0:	f000 f932 	bl	8000a28 <reptar_printf>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x14;
 80007c4:	2314      	movs	r3, #20
 80007c6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x27;
 80007c8:	2327      	movs	r3, #39	; 0x27
 80007ca:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2201      	movs	r2, #1
 80007dc:	4619      	mov	r1, r3
 80007de:	4812      	ldr	r0, [pc, #72]	; (8000828 <MX_RTC_Init+0xd4>)
 80007e0:	f002 fb77 	bl	8002ed2 <HAL_RTC_SetTime>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80007ea:	f000 f917 	bl	8000a1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80007ee:	2305      	movs	r3, #5
 80007f0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x26;
 80007f6:	2326      	movs	r3, #38	; 0x26
 80007f8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 80007fa:	2321      	movs	r3, #33	; 0x21
 80007fc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	2201      	movs	r2, #1
 8000802:	4619      	mov	r1, r3
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <MX_RTC_Init+0xd4>)
 8000806:	f002 fc5d 	bl	80030c4 <HAL_RTC_SetDate>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 8000810:	f000 f904 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, RTC_BACKUP_MAGIC_NUM);
 8000814:	f243 22f3 	movw	r2, #13043	; 0x32f3
 8000818:	2100      	movs	r1, #0
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <MX_RTC_Init+0xd4>)
 800081c:	f002 fdf8 	bl	8003410 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200004e8 	.word	0x200004e8
 800082c:	40002800 	.word	0x40002800
 8000830:	080063e0 	.word	0x080063e0

08000834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_SPI1_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <MX_SPI1_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_SPI1_Init+0x74>)
 800084e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000852:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000866:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_SPI1_Init+0x74>)
 800086a:	2218      	movs	r2, #24
 800086c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_SPI1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000882:	2207      	movs	r2, #7
 8000884:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_SPI1_Init+0x74>)
 800088e:	2208      	movs	r2, #8
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000894:	f002 fdeb 	bl	800346e <HAL_SPI_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 f8bd 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000050c 	.word	0x2000050c
 80008ac:	40013000 	.word	0x40013000

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008b6:	4a15      	ldr	r2, [pc, #84]	; (800090c <MX_USART1_UART_Init+0x5c>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008f4:	f003 f9d2 	bl	8003c9c <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 f88d 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000464 	.word	0x20000464
 800090c:	40013800 	.word	0x40013800

08000910 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <MX_USART2_UART_Init+0x5c>)
 8000918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000954:	f003 f9a2 	bl	8003c9c <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800095e:	f000 f85d 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000570 	.word	0x20000570
 800096c:	40004400 	.word	0x40004400

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <MX_GPIO_Init+0xa4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <MX_GPIO_Init+0xa4>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_GPIO_Init+0xa4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_GPIO_Init+0xa4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <MX_GPIO_Init+0xa4>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_GPIO_Init+0xa4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_GPIO_Init+0xa4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <MX_GPIO_Init+0xa4>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_GPIO_Init+0xa4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_GPIO_Init+0xa4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <MX_GPIO_Init+0xa4>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_GPIO_Init+0xa4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2140      	movs	r1, #64	; 0x40
 80009ea:	480b      	ldr	r0, [pc, #44]	; (8000a18 <MX_GPIO_Init+0xa8>)
 80009ec:	f000 fd9c 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_GPIO_Init+0xa8>)
 8000a08:	f000 fbe4 	bl	80011d4 <HAL_GPIO_Init>

}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000
 8000a18:	48000400 	.word	0x48000400

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <reptar_printf>:
extern UART_HandleTypeDef 	DEBUG_UART_HANDLE;
extern RTC_HandleTypeDef  	RTC_HANDLE;
extern SPI_HandleTypeDef	SD_SPI_HANDLE;

void reptar_printf(const char *fmt, ...)
{
 8000a28:	b40f      	push	{r0, r1, r2, r3}
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <reptar_printf+0x44>)
 8000a40:	f005 f8a6 	bl	8005b90 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <reptar_printf+0x44>)
 8000a46:	f7ff fbc3 	bl	80001d0 <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t*) buffer, len, -1);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a56:	4905      	ldr	r1, [pc, #20]	; (8000a6c <reptar_printf+0x44>)
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <reptar_printf+0x48>)
 8000a5a:	f003 f96d 	bl	8003d38 <HAL_UART_Transmit>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr
 8000a6c:	200000a4 	.word	0x200000a4
 8000a70:	20000570 	.word	0x20000570

08000a74 <reptar_init>:


error_code_t reptar_init (void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
	uint8_t retval = E_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	77fb      	strb	r3, [r7, #31]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	HAL_RTC_GetTime(&RTC_HANDLE, &gTime, RTC_FORMAT_BIN);
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	4815      	ldr	r0, [pc, #84]	; (8000adc <reptar_init+0x68>)
 8000a86:	f002 fac1 	bl	800300c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&RTC_HANDLE, &gDate, RTC_FORMAT_BIN);
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <reptar_init+0x68>)
 8000a94:	f002 fb9d 	bl	80031d2 <HAL_RTC_GetDate>

	reptar_printf("%02d:%02d:%02d\r\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000a98:	793b      	ldrb	r3, [r7, #4]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	797b      	ldrb	r3, [r7, #5]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <reptar_init+0x6c>)
 8000aa4:	f7ff ffc0 	bl	8000a28 <reptar_printf>
	reptar_printf("%02d-%02d-%2d\r\n", gDate.Date, gDate.Month, 2000 + gDate.Year);
 8000aa8:	7ebb      	ldrb	r3, [r7, #26]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	7e7b      	ldrb	r3, [r7, #25]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	7efb      	ldrb	r3, [r7, #27]
 8000ab2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <reptar_init+0x70>)
 8000ab8:	f7ff ffb6 	bl	8000a28 <reptar_printf>
	reptar_printf("Welcome to the Reptar Project!\r\n");
 8000abc:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <reptar_init+0x74>)
 8000abe:	f7ff ffb3 	bl	8000a28 <reptar_printf>

	HAL_Delay(1000);
 8000ac2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac6:	f000 fa7b 	bl	8000fc0 <HAL_Delay>
	//retval = sd_unmount();
	retval = sd_mount();
 8000aca:	f003 fdbb 	bl	8004644 <sd_mount>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	77fb      	strb	r3, [r7, #31]

	return retval;
 8000ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200004e8 	.word	0x200004e8
 8000ae0:	080063f4 	.word	0x080063f4
 8000ae4:	08006408 	.word	0x08006408
 8000ae8:	08006418 	.word	0x08006418

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_MspInit+0x44>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6613      	str	r3, [r2, #96]	; 0x60
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x44>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_I2C_MspInit+0x7c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d128      	bne.n	8000ba8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <HAL_I2C_MspInit+0x80>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a16      	ldr	r2, [pc, #88]	; (8000bb4 <HAL_I2C_MspInit+0x80>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_I2C_MspInit+0x80>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b74:	2312      	movs	r3, #18
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b80:	2304      	movs	r3, #4
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <HAL_I2C_MspInit+0x84>)
 8000b8c:	f000 fb22 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_I2C_MspInit+0x80>)
 8000b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_I2C_MspInit+0x80>)
 8000b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_I2C_MspInit+0x80>)
 8000b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48000400 	.word	0x48000400

08000bbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_RTC_MspInit+0x30>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d107      	bne.n	8000bde <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_RTC_MspInit+0x34>)
 8000bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_RTC_MspInit+0x34>)
 8000bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40002800 	.word	0x40002800
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_SPI_MspInit+0x7c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d128      	bne.n	8000c68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c20:	6613      	str	r3, [r2, #96]	; 0x60
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23e0      	movs	r3, #224	; 0xe0
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c56:	2305      	movs	r3, #5
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f000 fab6 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a2f      	ldr	r2, [pc, #188]	; (8000d54 <HAL_UART_MspInit+0xdc>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12a      	bne.n	8000cf0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <HAL_UART_MspInit+0xe0>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9e:	4a2e      	ldr	r2, [pc, #184]	; (8000d58 <HAL_UART_MspInit+0xe0>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	; (8000d58 <HAL_UART_MspInit+0xe0>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <HAL_UART_MspInit+0xe0>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a28      	ldr	r2, [pc, #160]	; (8000d58 <HAL_UART_MspInit+0xe0>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <HAL_UART_MspInit+0xe0>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f000 fa73 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cee:	e02d      	b.n	8000d4c <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <HAL_UART_MspInit+0xe4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d128      	bne.n	8000d4c <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_UART_MspInit+0xe0>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <HAL_UART_MspInit+0xe0>)
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0xe0>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_UART_MspInit+0xe0>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_UART_MspInit+0xe0>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_UART_MspInit+0xe0>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f000 fa44 	bl	80011d4 <HAL_GPIO_Init>
}
 8000d4c:	bf00      	nop
 8000d4e:	3730      	adds	r7, #48	; 0x30
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40013800 	.word	0x40013800
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40004400 	.word	0x40004400

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f8e8 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f004 fe76 	bl	8005ad4 <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20018000 	.word	0x20018000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	200001a4 	.word	0x200001a4
 8000e1c:	20000a78 	.word	0x20000a78

08000e20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <SystemInit+0x5c>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <SystemInit+0x5c>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <SystemInit+0x60>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <SystemInit+0x60>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <SystemInit+0x60>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <SystemInit+0x60>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <SystemInit+0x60>)
 8000e4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <SystemInit+0x60>)
 8000e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <SystemInit+0x60>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <SystemInit+0x60>)
 8000e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <SystemInit+0x60>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00
 8000e80:	40021000 	.word	0x40021000

08000e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e88:	f7ff ffca 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e8e:	e003      	b.n	8000e98 <LoopCopyDataInit>

08000e90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e96:	3104      	adds	r1, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e98:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ea0:	d3f6      	bcc.n	8000e90 <CopyDataInit>
	ldr	r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ea4:	e002      	b.n	8000eac <LoopFillZerobss>

08000ea6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ea6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ea8:	f842 3b04 	str.w	r3, [r2], #4

08000eac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <LoopForever+0x16>)
	cmp	r2, r3
 8000eae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000eb0:	d3f9      	bcc.n	8000ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f004 fe15 	bl	8005ae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb6:	f7ff fb5f 	bl	8000578 <main>

08000eba <LoopForever>:

LoopForever:
    b LoopForever
 8000eba:	e7fe      	b.n	8000eba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ebc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ec0:	08006530 	.word	0x08006530
	ldr	r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ec8:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8000ecc:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8000ed0:	20000a78 	.word	0x20000a78

08000ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>

08000ed6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f943 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f80e 	bl	8000f08 <HAL_InitTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	e001      	b.n	8000efc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef8:	f7ff fdf8 	bl	8000aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_InitTick+0x6c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d023      	beq.n	8000f64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_InitTick+0x70>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_InitTick+0x6c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f941 	bl	80011ba <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10f      	bne.n	8000f5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d809      	bhi.n	8000f58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f4c:	f000 f919 	bl	8001182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_InitTick+0x74>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e007      	b.n	8000f68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e004      	b.n	8000f68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e001      	b.n	8000f68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000004 	.word	0x20000004

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	200005f4 	.word	0x200005f4

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	200005f4 	.word	0x200005f4

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff ffee 	bl	8000fa8 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fd8:	d005      	beq.n	8000fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_Delay+0x44>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe6:	bf00      	nop
 8000fe8:	f7ff ffde 	bl	8000fa8 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8f7      	bhi.n	8000fe8 <HAL_Delay+0x28>
  {
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	60d3      	str	r3, [r2, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff47 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff5c 	bl	8001050 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffb0 	bl	8001128 <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e2:	e17f      	b.n	80014e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	4013      	ands	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8171 	beq.w	80014de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d00b      	beq.n	800121c <HAL_GPIO_Init+0x48>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d007      	beq.n	800121c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001210:	2b11      	cmp	r3, #17
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b12      	cmp	r3, #18
 800121a:	d130      	bne.n	800127e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001252:	2201      	movs	r2, #1
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f003 0201 	and.w	r2, r3, #1
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b03      	cmp	r3, #3
 8001288:	d118      	bne.n	80012bc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001290:	2201      	movs	r2, #1
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	f003 0201 	and.w	r2, r3, #1
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x128>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b12      	cmp	r3, #18
 80012fa:	d123      	bne.n	8001344 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	6939      	ldr	r1, [r7, #16]
 8001340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80ac 	beq.w	80014de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <HAL_GPIO_Init+0x330>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138a:	4a5e      	ldr	r2, [pc, #376]	; (8001504 <HAL_GPIO_Init+0x330>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6613      	str	r3, [r2, #96]	; 0x60
 8001392:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <HAL_GPIO_Init+0x330>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800139e:	4a5a      	ldr	r2, [pc, #360]	; (8001508 <HAL_GPIO_Init+0x334>)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3302      	adds	r3, #2
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013c8:	d025      	beq.n	8001416 <HAL_GPIO_Init+0x242>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4f      	ldr	r2, [pc, #316]	; (800150c <HAL_GPIO_Init+0x338>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d01f      	beq.n	8001412 <HAL_GPIO_Init+0x23e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4e      	ldr	r2, [pc, #312]	; (8001510 <HAL_GPIO_Init+0x33c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d019      	beq.n	800140e <HAL_GPIO_Init+0x23a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <HAL_GPIO_Init+0x340>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0x236>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <HAL_GPIO_Init+0x344>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <HAL_GPIO_Init+0x232>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4b      	ldr	r2, [pc, #300]	; (800151c <HAL_GPIO_Init+0x348>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x22e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <HAL_GPIO_Init+0x34c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_GPIO_Init+0x22a>
 80013fa:	2306      	movs	r3, #6
 80013fc:	e00c      	b.n	8001418 <HAL_GPIO_Init+0x244>
 80013fe:	2307      	movs	r3, #7
 8001400:	e00a      	b.n	8001418 <HAL_GPIO_Init+0x244>
 8001402:	2305      	movs	r3, #5
 8001404:	e008      	b.n	8001418 <HAL_GPIO_Init+0x244>
 8001406:	2304      	movs	r3, #4
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x244>
 800140a:	2303      	movs	r3, #3
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x244>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x244>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x244>
 8001416:	2300      	movs	r3, #0
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	f002 0203 	and.w	r2, r2, #3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4093      	lsls	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001428:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_GPIO_Init+0x334>)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001436:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <HAL_GPIO_Init+0x350>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800145a:	4a32      	ldr	r2, [pc, #200]	; (8001524 <HAL_GPIO_Init+0x350>)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001460:	4b30      	ldr	r3, [pc, #192]	; (8001524 <HAL_GPIO_Init+0x350>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001484:	4a27      	ldr	r2, [pc, #156]	; (8001524 <HAL_GPIO_Init+0x350>)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <HAL_GPIO_Init+0x350>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ae:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_GPIO_Init+0x350>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_GPIO_Init+0x350>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <HAL_GPIO_Init+0x350>)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa22 f303 	lsr.w	r3, r2, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f47f ae78 	bne.w	80011e4 <HAL_GPIO_Init+0x10>
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	371c      	adds	r7, #28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000
 800150c:	48000400 	.word	0x48000400
 8001510:	48000800 	.word	0x48000800
 8001514:	48000c00 	.word	0x48000c00
 8001518:	48001000 	.word	0x48001000
 800151c:	48001400 	.word	0x48001400
 8001520:	48001800 	.word	0x48001800
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001544:	e002      	b.n	800154c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e081      	b.n	800166e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fad8 	bl	8000b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2224      	movs	r2, #36	; 0x24
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d107      	bne.n	80015d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	e006      	b.n	80015e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d104      	bne.n	80015f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001604:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001614:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691a      	ldr	r2, [r3, #16]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	ea42 0103 	orr.w	r1, r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	021a      	lsls	r2, r3, #8
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69d9      	ldr	r1, [r3, #28]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1a      	ldr	r2, [r3, #32]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2220      	movs	r2, #32
 800165a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b20      	cmp	r3, #32
 800168a:	d138      	bne.n	80016fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001696:	2302      	movs	r3, #2
 8001698:	e032      	b.n	8001700 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2224      	movs	r2, #36	; 0x24
 80016a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6819      	ldr	r1, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0201 	orr.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2220      	movs	r2, #32
 80016ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016fe:	2302      	movs	r3, #2
  }
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b20      	cmp	r3, #32
 8001720:	d139      	bne.n	8001796 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800172c:	2302      	movs	r3, #2
 800172e:	e033      	b.n	8001798 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2224      	movs	r2, #36	; 0x24
 800173c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800175e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0201 	orr.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001796:	2302      	movs	r3, #2
  }
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40007000 	.word	0x40007000

080017c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_PWREx_GetVoltageRange+0x18>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40007000 	.word	0x40007000

080017e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ee:	d130      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017fc:	d038      	beq.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001806:	4a1e      	ldr	r2, [pc, #120]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2232      	movs	r2, #50	; 0x32
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0c9b      	lsrs	r3, r3, #18
 8001820:	3301      	adds	r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001824:	e002      	b.n	800182c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3b01      	subs	r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001838:	d102      	bne.n	8001840 <HAL_PWREx_ControlVoltageScaling+0x60>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f2      	bne.n	8001826 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184c:	d110      	bne.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e00f      	b.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d007      	beq.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001868:	4a05      	ldr	r2, [pc, #20]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40007000 	.word	0x40007000
 8001884:	20000000 	.word	0x20000000
 8001888:	431bde83 	.word	0x431bde83

0800188c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e3d4      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800189e:	4ba1      	ldr	r3, [pc, #644]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018a8:	4b9e      	ldr	r3, [pc, #632]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80e4 	beq.w	8001a88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <HAL_RCC_OscConfig+0x4a>
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	f040 808b 	bne.w	80019e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	f040 8087 	bne.w	80019e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018d6:	4b93      	ldr	r3, [pc, #588]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_RCC_OscConfig+0x62>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e3ac      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1a      	ldr	r2, [r3, #32]
 80018f2:	4b8c      	ldr	r3, [pc, #560]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <HAL_RCC_OscConfig+0x7c>
 80018fe:	4b89      	ldr	r3, [pc, #548]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001906:	e005      	b.n	8001914 <HAL_RCC_OscConfig+0x88>
 8001908:	4b86      	ldr	r3, [pc, #536]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 800190a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001914:	4293      	cmp	r3, r2
 8001916:	d223      	bcs.n	8001960 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4618      	mov	r0, r3
 800191e:	f000 fd41 	bl	80023a4 <RCC_SetFlashLatencyFromMSIRange>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e38d      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192c:	4b7d      	ldr	r3, [pc, #500]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a7c      	ldr	r2, [pc, #496]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b7a      	ldr	r3, [pc, #488]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4977      	ldr	r1, [pc, #476]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194a:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	4972      	ldr	r1, [pc, #456]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
 800195e:	e025      	b.n	80019ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001960:	4b70      	ldr	r3, [pc, #448]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a6f      	ldr	r2, [pc, #444]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b6d      	ldr	r3, [pc, #436]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	496a      	ldr	r1, [pc, #424]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800197e:	4b69      	ldr	r3, [pc, #420]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	4965      	ldr	r1, [pc, #404]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d109      	bne.n	80019ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fd01 	bl	80023a4 <RCC_SetFlashLatencyFromMSIRange>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e34d      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ac:	f000 fc36 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	495a      	ldr	r1, [pc, #360]	; (8001b28 <HAL_RCC_OscConfig+0x29c>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_RCC_OscConfig+0x2a0>)
 80019ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019cc:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <HAL_RCC_OscConfig+0x2a4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fa99 	bl	8000f08 <HAL_InitTick>
 80019d6:	4603      	mov	r3, r0
 80019d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d052      	beq.n	8001a86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	e331      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d032      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019ec:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a4c      	ldr	r2, [pc, #304]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019f8:	f7ff fad6 	bl	8000fa8 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a00:	f7ff fad2 	bl	8000fa8 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e31a      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a12:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a40      	ldr	r2, [pc, #256]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	493b      	ldr	r1, [pc, #236]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a3c:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	4936      	ldr	r1, [pc, #216]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
 8001a50:	e01a      	b.n	8001a88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a33      	ldr	r2, [pc, #204]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff faa3 	bl	8000fa8 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a66:	f7ff fa9f 	bl	8000fa8 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e2e7      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a78:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x1da>
 8001a84:	e000      	b.n	8001a88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d074      	beq.n	8001b7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d005      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x21a>
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	d10e      	bne.n	8001abe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d10b      	bne.n	8001abe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d064      	beq.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d160      	bne.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e2c4      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x24a>
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	e01d      	b.n	8001b12 <HAL_RCC_OscConfig+0x286>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ade:	d10c      	bne.n	8001afa <HAL_RCC_OscConfig+0x26e>
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001ae6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	e00b      	b.n	8001b12 <HAL_RCC_OscConfig+0x286>
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <HAL_RCC_OscConfig+0x298>)
 8001b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fa45 	bl	8000fa8 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b20:	e011      	b.n	8001b46 <HAL_RCC_OscConfig+0x2ba>
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	080064a4 	.word	0x080064a4
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fa38 	bl	8000fa8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e280      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b46:	4baf      	ldr	r3, [pc, #700]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x2a8>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff fa28 	bl	8000fa8 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fa24 	bl	8000fa8 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e26c      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6e:	4ba5      	ldr	r3, [pc, #660]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2d0>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d060      	beq.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_OscConfig+0x310>
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d119      	bne.n	8001bca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d116      	bne.n	8001bca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9c:	4b99      	ldr	r3, [pc, #612]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x328>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e249      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb4:	4b93      	ldr	r3, [pc, #588]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	061b      	lsls	r3, r3, #24
 8001bc2:	4990      	ldr	r1, [pc, #576]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc8:	e040      	b.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d023      	beq.n	8001c1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd2:	4b8c      	ldr	r3, [pc, #560]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a8b      	ldr	r2, [pc, #556]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff f9e3 	bl	8000fa8 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff f9df 	bl	8000fa8 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e227      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf8:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b7f      	ldr	r3, [pc, #508]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	497c      	ldr	r1, [pc, #496]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
 8001c18:	e018      	b.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b7a      	ldr	r3, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a79      	ldr	r2, [pc, #484]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff f9bf 	bl	8000fa8 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f9bb 	bl	8000fa8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e203      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c40:	4b70      	ldr	r3, [pc, #448]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d03c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01c      	beq.n	8001c9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c60:	4b68      	ldr	r3, [pc, #416]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	4a67      	ldr	r2, [pc, #412]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff f99a 	bl	8000fa8 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff f996 	bl	8000fa8 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1de      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c8a:	4b5e      	ldr	r3, [pc, #376]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ef      	beq.n	8001c78 <HAL_RCC_OscConfig+0x3ec>
 8001c98:	e01b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9a:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca0:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff f97d 	bl	8000fa8 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb2:	f7ff f979 	bl	8000fa8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e1c1      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc4:	4b4f      	ldr	r3, [pc, #316]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ef      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 80a6 	beq.w	8001e2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ce4:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	4b44      	ldr	r3, [pc, #272]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	4a43      	ldr	r2, [pc, #268]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfc:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0c:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <HAL_RCC_OscConfig+0x57c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d118      	bne.n	8001d4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d18:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <HAL_RCC_OscConfig+0x57c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a3a      	ldr	r2, [pc, #232]	; (8001e08 <HAL_RCC_OscConfig+0x57c>)
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d24:	f7ff f940 	bl	8000fa8 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2c:	f7ff f93c 	bl	8000fa8 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e184      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3e:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <HAL_RCC_OscConfig+0x57c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d108      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4d8>
 8001d52:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d58:	4a2a      	ldr	r2, [pc, #168]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d62:	e024      	b.n	8001dae <HAL_RCC_OscConfig+0x522>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d110      	bne.n	8001d8e <HAL_RCC_OscConfig+0x502>
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	4a20      	ldr	r2, [pc, #128]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d8c:	e00f      	b.n	8001dae <HAL_RCC_OscConfig+0x522>
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d94:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da4:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d016      	beq.n	8001de4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db6:	f7ff f8f7 	bl	8000fa8 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7ff f8f3 	bl	8000fa8 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e139      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x578>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0ed      	beq.n	8001dbe <HAL_RCC_OscConfig+0x532>
 8001de2:	e01a      	b.n	8001e1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de4:	f7ff f8e0 	bl	8000fa8 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dea:	e00f      	b.n	8001e0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dec:	f7ff f8dc 	bl	8000fa8 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d906      	bls.n	8001e0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e122      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e0c:	4b90      	ldr	r3, [pc, #576]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1e8      	bne.n	8001dec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e1a:	7ffb      	ldrb	r3, [r7, #31]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e20:	4b8b      	ldr	r3, [pc, #556]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	4a8a      	ldr	r2, [pc, #552]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8108 	beq.w	8002046 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	f040 80d0 	bne.w	8001fe0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e40:	4b83      	ldr	r3, [pc, #524]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0203 	and.w	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d130      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d127      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d11f      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e80:	2a07      	cmp	r2, #7
 8001e82:	bf14      	ite	ne
 8001e84:	2201      	movne	r2, #1
 8001e86:	2200      	moveq	r2, #0
 8001e88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d113      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e98:	085b      	lsrs	r3, r3, #1
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d109      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	085b      	lsrs	r3, r3, #1
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d06e      	beq.n	8001f94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	2b0c      	cmp	r3, #12
 8001eba:	d069      	beq.n	8001f90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ebc:	4b64      	ldr	r3, [pc, #400]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ec8:	4b61      	ldr	r3, [pc, #388]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0b7      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ed8:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a5c      	ldr	r2, [pc, #368]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ee4:	f7ff f860 	bl	8000fa8 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff f85c 	bl	8000fa8 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e0a4      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efe:	4b54      	ldr	r3, [pc, #336]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0a:	4b51      	ldr	r3, [pc, #324]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	4b51      	ldr	r3, [pc, #324]	; (8002054 <HAL_RCC_OscConfig+0x7c8>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f1a:	3a01      	subs	r2, #1
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f24:	0212      	lsls	r2, r2, #8
 8001f26:	4311      	orrs	r1, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f2c:	0852      	lsrs	r2, r2, #1
 8001f2e:	3a01      	subs	r2, #1
 8001f30:	0552      	lsls	r2, r2, #21
 8001f32:	4311      	orrs	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f38:	0852      	lsrs	r2, r2, #1
 8001f3a:	3a01      	subs	r2, #1
 8001f3c:	0652      	lsls	r2, r2, #25
 8001f3e:	4311      	orrs	r1, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f44:	0912      	lsrs	r2, r2, #4
 8001f46:	0452      	lsls	r2, r2, #17
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	4941      	ldr	r1, [pc, #260]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f50:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a3e      	ldr	r2, [pc, #248]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f5c:	4b3c      	ldr	r3, [pc, #240]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4a3b      	ldr	r2, [pc, #236]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f68:	f7ff f81e 	bl	8000fa8 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff f81a 	bl	8000fa8 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e062      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f82:	4b33      	ldr	r3, [pc, #204]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f8e:	e05a      	b.n	8002046 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e059      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d152      	bne.n	8002046 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fac:	4b28      	ldr	r3, [pc, #160]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a27      	ldr	r2, [pc, #156]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fb8:	f7fe fff6 	bl	8000fa8 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7fe fff2 	bl	8000fa8 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e03a      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x734>
 8001fde:	e032      	b.n	8002046 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d02d      	beq.n	8002042 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d105      	bne.n	800200a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	4a13      	ldr	r2, [pc, #76]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8002004:	f023 0303 	bic.w	r3, r3, #3
 8002008:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	4a10      	ldr	r2, [pc, #64]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8002010:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002018:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7fe ffc5 	bl	8000fa8 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002022:	f7fe ffc1 	bl	8000fa8 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e009      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_OscConfig+0x7c4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f0      	bne.n	8002022 <HAL_RCC_OscConfig+0x796>
 8002040:	e001      	b.n	8002046 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	f99d808c 	.word	0xf99d808c

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0c8      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d910      	bls.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b63      	ldr	r3, [pc, #396]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4961      	ldr	r1, [pc, #388]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b0      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d04c      	beq.n	8002142 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b0:	4b56      	ldr	r3, [pc, #344]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d121      	bne.n	8002100 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e09e      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c8:	4b50      	ldr	r3, [pc, #320]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d115      	bne.n	8002100 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e092      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020e0:	4b4a      	ldr	r3, [pc, #296]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e086      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f0:	4b46      	ldr	r3, [pc, #280]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e07e      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002100:	4b42      	ldr	r3, [pc, #264]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 0203 	bic.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	493f      	ldr	r1, [pc, #252]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002112:	f7fe ff49 	bl	8000fa8 <HAL_GetTick>
 8002116:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002118:	e00a      	b.n	8002130 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211a:	f7fe ff45 	bl	8000fa8 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	; 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e066      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002130:	4b36      	ldr	r3, [pc, #216]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 020c 	and.w	r2, r3, #12
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	429a      	cmp	r2, r3
 8002140:	d1eb      	bne.n	800211a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214e:	4b2f      	ldr	r3, [pc, #188]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	492c      	ldr	r1, [pc, #176]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d210      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4924      	ldr	r1, [pc, #144]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e036      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4918      	ldr	r1, [pc, #96]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4910      	ldr	r1, [pc, #64]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ce:	f000 f825 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490c      	ldr	r1, [pc, #48]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fe88 	bl	8000f08 <HAL_InitTick>
 80021f8:	4603      	mov	r3, r0
 80021fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80021fc:	7afb      	ldrb	r3, [r7, #11]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40022000 	.word	0x40022000
 800220c:	40021000 	.word	0x40021000
 8002210:	080064a4 	.word	0x080064a4
 8002214:	20000000 	.word	0x20000000
 8002218:	20000004 	.word	0x20000004

0800221c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222a:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <HAL_RCC_GetSysClockFreq+0x108>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002234:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <HAL_RCC_GetSysClockFreq+0x108>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x34>
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	2b0c      	cmp	r3, #12
 8002248:	d121      	bne.n	800228e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d11e      	bne.n	800228e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002250:	4b34      	ldr	r3, [pc, #208]	; (8002324 <HAL_RCC_GetSysClockFreq+0x108>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_RCC_GetSysClockFreq+0x108>)
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	e005      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_RCC_GetSysClockFreq+0x108>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002278:	4a2b      	ldr	r2, [pc, #172]	; (8002328 <HAL_RCC_GetSysClockFreq+0x10c>)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002280:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10d      	bne.n	80022a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b04      	cmp	r3, #4
 8002292:	d102      	bne.n	800229a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_RCC_GetSysClockFreq+0x110>)
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	e004      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <HAL_RCC_GetSysClockFreq+0x114>)
 80022a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d134      	bne.n	8002314 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022aa:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d003      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0xac>
 80022c0:	e005      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_RCC_GetSysClockFreq+0x110>)
 80022c4:	617b      	str	r3, [r7, #20]
      break;
 80022c6:	e005      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_GetSysClockFreq+0x114>)
 80022ca:	617b      	str	r3, [r7, #20]
      break;
 80022cc:	e002      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	617b      	str	r3, [r7, #20]
      break;
 80022d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	3301      	adds	r3, #1
 80022e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	fb02 f203 	mul.w	r2, r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_RCC_GetSysClockFreq+0x108>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	0e5b      	lsrs	r3, r3, #25
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	3301      	adds	r3, #1
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002314:	69bb      	ldr	r3, [r7, #24]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	080064bc 	.word	0x080064bc
 800232c:	00f42400 	.word	0x00f42400
 8002330:	007a1200 	.word	0x007a1200

08002334 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_RCC_GetHCLKFreq+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000000 	.word	0x20000000

0800234c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002350:	f7ff fff0 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4904      	ldr	r1, [pc, #16]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	080064b4 	.word	0x080064b4

08002378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800237c:	f7ff ffda 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	0adb      	lsrs	r3, r3, #11
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4904      	ldr	r1, [pc, #16]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	080064b4 	.word	0x080064b4

080023a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023b0:	4b2a      	ldr	r3, [pc, #168]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023bc:	f7ff fa02 	bl	80017c4 <HAL_PWREx_GetVoltageRange>
 80023c0:	6178      	str	r0, [r7, #20]
 80023c2:	e014      	b.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023c4:	4b25      	ldr	r3, [pc, #148]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	4a24      	ldr	r2, [pc, #144]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ce:	6593      	str	r3, [r2, #88]	; 0x58
 80023d0:	4b22      	ldr	r3, [pc, #136]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023dc:	f7ff f9f2 	bl	80017c4 <HAL_PWREx_GetVoltageRange>
 80023e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a1d      	ldr	r2, [pc, #116]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f4:	d10b      	bne.n	800240e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b80      	cmp	r3, #128	; 0x80
 80023fa:	d919      	bls.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002400:	d902      	bls.n	8002408 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002402:	2302      	movs	r3, #2
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	e013      	b.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002408:	2301      	movs	r3, #1
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	e010      	b.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d902      	bls.n	800241a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002414:	2303      	movs	r3, #3
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	e00a      	b.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b80      	cmp	r3, #128	; 0x80
 800241e:	d102      	bne.n	8002426 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002420:	2302      	movs	r3, #2
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	e004      	b.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b70      	cmp	r3, #112	; 0x70
 800242a:	d101      	bne.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800242c:	2301      	movs	r3, #1
 800242e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 0207 	bic.w	r2, r3, #7
 8002438:	4909      	ldr	r1, [pc, #36]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	40022000 	.word	0x40022000

08002464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800246c:	2300      	movs	r3, #0
 800246e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002470:	2300      	movs	r3, #0
 8002472:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800247c:	2b00      	cmp	r3, #0
 800247e:	d041      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002484:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002488:	d02a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800248a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800248e:	d824      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002490:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002494:	d008      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002496:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800249a:	d81e      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a4:	d010      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024a6:	e018      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024a8:	4b86      	ldr	r3, [pc, #536]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4a85      	ldr	r2, [pc, #532]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b4:	e015      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fabb 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 80024c2:	4603      	mov	r3, r0
 80024c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024c6:	e00c      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3320      	adds	r3, #32
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fba6 	bl	8002c20 <RCCEx_PLLSAI2_Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024d8:	e003      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	74fb      	strb	r3, [r7, #19]
      break;
 80024de:	e000      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024e2:	7cfb      	ldrb	r3, [r7, #19]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024e8:	4b76      	ldr	r3, [pc, #472]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f6:	4973      	ldr	r1, [pc, #460]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024fe:	e001      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d041      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002514:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002518:	d02a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800251a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800251e:	d824      	bhi.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002524:	d008      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002526:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800252a:	d81e      	bhi.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002534:	d010      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002536:	e018      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002538:	4b62      	ldr	r3, [pc, #392]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a61      	ldr	r2, [pc, #388]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002542:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002544:	e015      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3304      	adds	r3, #4
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fa73 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 8002552:	4603      	mov	r3, r0
 8002554:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002556:	e00c      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3320      	adds	r3, #32
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fb5e 	bl	8002c20 <RCCEx_PLLSAI2_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002568:	e003      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	74fb      	strb	r3, [r7, #19]
      break;
 800256e:	e000      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002578:	4b52      	ldr	r3, [pc, #328]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002586:	494f      	ldr	r1, [pc, #316]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800258e:	e001      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a0 	beq.w	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025bc:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	4a40      	ldr	r2, [pc, #256]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c6:	6593      	str	r3, [r2, #88]	; 0x58
 80025c8:	4b3e      	ldr	r3, [pc, #248]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d4:	2301      	movs	r3, #1
 80025d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d8:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fce0 	bl	8000fa8 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025ea:	e009      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ec:	f7fe fcdc 	bl	8000fa8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d902      	bls.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	74fb      	strb	r3, [r7, #19]
        break;
 80025fe:	e005      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002600:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ef      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d15c      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002612:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01f      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	429a      	cmp	r2, r3
 800262e:	d019      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002630:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800263c:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002642:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800264c:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800265c:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d016      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fc9b 	bl	8000fa8 <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002674:	e00b      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fe fc97 	bl	8000fa8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	; 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d902      	bls.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	74fb      	strb	r3, [r7, #19]
            break;
 800268c:	e006      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ec      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10c      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b2:	4904      	ldr	r1, [pc, #16]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026ba:	e009      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	74bb      	strb	r3, [r7, #18]
 80026c0:	e006      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d0:	7c7b      	ldrb	r3, [r7, #17]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d6:	4b9e      	ldr	r3, [pc, #632]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	4a9d      	ldr	r2, [pc, #628]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ee:	4b98      	ldr	r3, [pc, #608]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f4:	f023 0203 	bic.w	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	4994      	ldr	r1, [pc, #592]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002710:	4b8f      	ldr	r3, [pc, #572]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f023 020c 	bic.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271e:	498c      	ldr	r1, [pc, #560]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002732:	4b87      	ldr	r3, [pc, #540]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002738:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	4983      	ldr	r1, [pc, #524]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002754:	4b7e      	ldr	r3, [pc, #504]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	497b      	ldr	r1, [pc, #492]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002776:	4b76      	ldr	r3, [pc, #472]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002784:	4972      	ldr	r1, [pc, #456]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002798:	4b6d      	ldr	r3, [pc, #436]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	496a      	ldr	r1, [pc, #424]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ba:	4b65      	ldr	r3, [pc, #404]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	4961      	ldr	r1, [pc, #388]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027dc:	4b5c      	ldr	r3, [pc, #368]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ea:	4959      	ldr	r1, [pc, #356]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027fe:	4b54      	ldr	r3, [pc, #336]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280c:	4950      	ldr	r1, [pc, #320]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002820:	4b4b      	ldr	r3, [pc, #300]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	4948      	ldr	r1, [pc, #288]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002842:	4b43      	ldr	r3, [pc, #268]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	493f      	ldr	r1, [pc, #252]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d028      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002864:	4b3a      	ldr	r3, [pc, #232]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002872:	4937      	ldr	r1, [pc, #220]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800287e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002882:	d106      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002884:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a31      	ldr	r2, [pc, #196]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800288e:	60d3      	str	r3, [r2, #12]
 8002890:	e011      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002896:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800289a:	d10c      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	2101      	movs	r1, #1
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f8c8 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d028      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	491f      	ldr	r1, [pc, #124]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e0:	d106      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ec:	60d3      	str	r3, [r2, #12]
 80028ee:	e011      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2101      	movs	r1, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f000 f899 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d02b      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292e:	4908      	ldr	r1, [pc, #32]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800293e:	d109      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a02      	ldr	r2, [pc, #8]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294a:	60d3      	str	r3, [r2, #12]
 800294c:	e014      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800295c:	d10c      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3304      	adds	r3, #4
 8002962:	2101      	movs	r1, #1
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f867 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d02f      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002984:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002992:	4928      	ldr	r1, [pc, #160]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800299e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029a2:	d10d      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	2102      	movs	r1, #2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f844 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d014      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	74bb      	strb	r3, [r7, #18]
 80029be:	e011      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3320      	adds	r3, #32
 80029ce:	2102      	movs	r1, #2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 f925 	bl	8002c20 <RCCEx_PLLSAI2_Config>
 80029d6:	4603      	mov	r3, r0
 80029d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029da:	7cfb      	ldrb	r3, [r7, #19]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029e0:	7cfb      	ldrb	r3, [r7, #19]
 80029e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029fe:	490d      	ldr	r1, [pc, #52]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a22:	4904      	ldr	r1, [pc, #16]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000

08002a38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a46:	4b75      	ldr	r3, [pc, #468]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d018      	beq.n	8002a84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a52:	4b72      	ldr	r3, [pc, #456]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0203 	and.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d10d      	bne.n	8002a7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
       ||
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a6a:	4b6c      	ldr	r3, [pc, #432]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
       ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d047      	beq.n	8002b0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	e044      	b.n	8002b0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d018      	beq.n	8002abe <RCCEx_PLLSAI1_Config+0x86>
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d825      	bhi.n	8002adc <RCCEx_PLLSAI1_Config+0xa4>
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d002      	beq.n	8002a9a <RCCEx_PLLSAI1_Config+0x62>
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d009      	beq.n	8002aac <RCCEx_PLLSAI1_Config+0x74>
 8002a98:	e020      	b.n	8002adc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a9a:	4b60      	ldr	r3, [pc, #384]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d11d      	bne.n	8002ae2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aaa:	e01a      	b.n	8002ae2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aac:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d116      	bne.n	8002ae6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002abc:	e013      	b.n	8002ae6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002abe:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aca:	4b54      	ldr	r3, [pc, #336]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ada:	e006      	b.n	8002aea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae0:	e004      	b.n	8002aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e002      	b.n	8002aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e000      	b.n	8002aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10d      	bne.n	8002b0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002af2:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	430b      	orrs	r3, r1
 8002b08:	4944      	ldr	r1, [pc, #272]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d17d      	bne.n	8002c10 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b14:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a40      	ldr	r2, [pc, #256]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b20:	f7fe fa42 	bl	8000fa8 <HAL_GetTick>
 8002b24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b26:	e009      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b28:	f7fe fa3e 	bl	8000fa8 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d902      	bls.n	8002b3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	73fb      	strb	r3, [r7, #15]
        break;
 8002b3a:	e005      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b3c:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1ef      	bne.n	8002b28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d160      	bne.n	8002c10 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d111      	bne.n	8002b78 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b54:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6892      	ldr	r2, [r2, #8]
 8002b64:	0211      	lsls	r1, r2, #8
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68d2      	ldr	r2, [r2, #12]
 8002b6a:	0912      	lsrs	r2, r2, #4
 8002b6c:	0452      	lsls	r2, r2, #17
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	492a      	ldr	r1, [pc, #168]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	610b      	str	r3, [r1, #16]
 8002b76:	e027      	b.n	8002bc8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d112      	bne.n	8002ba4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b7e:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6892      	ldr	r2, [r2, #8]
 8002b8e:	0211      	lsls	r1, r2, #8
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6912      	ldr	r2, [r2, #16]
 8002b94:	0852      	lsrs	r2, r2, #1
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0552      	lsls	r2, r2, #21
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	491f      	ldr	r1, [pc, #124]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	610b      	str	r3, [r1, #16]
 8002ba2:	e011      	b.n	8002bc8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	0211      	lsls	r1, r2, #8
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6952      	ldr	r2, [r2, #20]
 8002bba:	0852      	lsrs	r2, r2, #1
 8002bbc:	3a01      	subs	r2, #1
 8002bbe:	0652      	lsls	r2, r2, #25
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	4916      	ldr	r1, [pc, #88]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe f9e8 	bl	8000fa8 <HAL_GetTick>
 8002bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bda:	e009      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bdc:	f7fe f9e4 	bl	8000fa8 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d902      	bls.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	73fb      	strb	r3, [r7, #15]
          break;
 8002bee:	e005      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ef      	beq.n	8002bdc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	4904      	ldr	r1, [pc, #16]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000

08002c20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c2e:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d018      	beq.n	8002c6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c3a:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0203 	and.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d10d      	bne.n	8002c66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c52:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
       ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d047      	beq.n	8002cf6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
 8002c6a:	e044      	b.n	8002cf6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d018      	beq.n	8002ca6 <RCCEx_PLLSAI2_Config+0x86>
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d825      	bhi.n	8002cc4 <RCCEx_PLLSAI2_Config+0xa4>
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d002      	beq.n	8002c82 <RCCEx_PLLSAI2_Config+0x62>
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d009      	beq.n	8002c94 <RCCEx_PLLSAI2_Config+0x74>
 8002c80:	e020      	b.n	8002cc4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c82:	4b55      	ldr	r3, [pc, #340]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d11d      	bne.n	8002cca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c92:	e01a      	b.n	8002cca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c94:	4b50      	ldr	r3, [pc, #320]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d116      	bne.n	8002cce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca4:	e013      	b.n	8002cce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ca6:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10f      	bne.n	8002cd2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cb2:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cc2:	e006      	b.n	8002cd2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc8:	e004      	b.n	8002cd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10d      	bne.n	8002cf6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cda:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	4939      	ldr	r1, [pc, #228]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d167      	bne.n	8002dcc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cfc:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a35      	ldr	r2, [pc, #212]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d08:	f7fe f94e 	bl	8000fa8 <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d0e:	e009      	b.n	8002d24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d10:	f7fe f94a 	bl	8000fa8 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d902      	bls.n	8002d24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	73fb      	strb	r3, [r7, #15]
        break;
 8002d22:	e005      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d24:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ef      	bne.n	8002d10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d14a      	bne.n	8002dcc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d111      	bne.n	8002d60 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d3c:	4b26      	ldr	r3, [pc, #152]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6892      	ldr	r2, [r2, #8]
 8002d4c:	0211      	lsls	r1, r2, #8
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68d2      	ldr	r2, [r2, #12]
 8002d52:	0912      	lsrs	r2, r2, #4
 8002d54:	0452      	lsls	r2, r2, #17
 8002d56:	430a      	orrs	r2, r1
 8002d58:	491f      	ldr	r1, [pc, #124]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	614b      	str	r3, [r1, #20]
 8002d5e:	e011      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6892      	ldr	r2, [r2, #8]
 8002d70:	0211      	lsls	r1, r2, #8
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6912      	ldr	r2, [r2, #16]
 8002d76:	0852      	lsrs	r2, r2, #1
 8002d78:	3a01      	subs	r2, #1
 8002d7a:	0652      	lsls	r2, r2, #25
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	4916      	ldr	r1, [pc, #88]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d84:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fe f90a 	bl	8000fa8 <HAL_GetTick>
 8002d94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d96:	e009      	b.n	8002dac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d98:	f7fe f906 	bl	8000fa8 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d902      	bls.n	8002dac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	73fb      	strb	r3, [r7, #15]
          break;
 8002daa:	e005      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ef      	beq.n	8002d98 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	4904      	ldr	r1, [pc, #16]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d06c      	beq.n	8002ec8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd feda 	bl	8000bbc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	22ca      	movs	r2, #202	; 0xca
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2253      	movs	r2, #83	; 0x53
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fa49 	bl	80032b8 <RTC_EnterInitMode>
 8002e26:	4603      	mov	r3, r0
 8002e28:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d14b      	bne.n	8002ec8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e42:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68d2      	ldr	r2, [r2, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6919      	ldr	r1, [r3, #16]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	041a      	lsls	r2, r3, #16
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fa4d 	bl	8003320 <RTC_ExitInitMode>
 8002e86:	4603      	mov	r3, r0
 8002e88:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0203 	bic.w	r2, r2, #3
 8002e9e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	22ff      	movs	r2, #255	; 0xff
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ed2:	b590      	push	{r4, r7, lr}
 8002ed4:	b087      	sub	sp, #28
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_RTC_SetTime+0x1a>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e08b      	b.n	8003004 <HAL_RTC_SetTime+0x132>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	22ca      	movs	r2, #202	; 0xca
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2253      	movs	r2, #83	; 0x53
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f9d3 	bl	80032b8 <RTC_EnterInitMode>
 8002f12:	4603      	mov	r3, r0
 8002f14:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d163      	bne.n	8002fe4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d126      	bne.n	8002f70 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2200      	movs	r2, #0
 8002f34:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fa2e 	bl	800339c <RTC_ByteToBcd2>
 8002f40:	4603      	mov	r3, r0
 8002f42:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	785b      	ldrb	r3, [r3, #1]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fa27 	bl	800339c <RTC_ByteToBcd2>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f52:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	789b      	ldrb	r3, [r3, #2]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fa1f 	bl	800339c <RTC_ByteToBcd2>
 8002f5e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f60:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	78db      	ldrb	r3, [r3, #3]
 8002f68:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	e018      	b.n	8002fa2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2200      	movs	r2, #0
 8002f82:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f90:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f96:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	78db      	ldrb	r3, [r3, #3]
 8002f9c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002fac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002fb0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fc0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6899      	ldr	r1, [r3, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f9a0 	bl	8003320 <RTC_ExitInitMode>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	22ff      	movs	r2, #255	; 0xff
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002fec:	7cfb      	ldrb	r3, [r7, #19]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003002:	7cfb      	ldrb	r3, [r7, #19]
}
 8003004:	4618      	mov	r0, r3
 8003006:	371c      	adds	r7, #28
 8003008:	46bd      	mov	sp, r7
 800300a:	bd90      	pop	{r4, r7, pc}

0800300c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800303a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800303e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	0c1b      	lsrs	r3, r3, #16
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800304a:	b2da      	uxtb	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800305a:	b2da      	uxtb	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	0d9b      	lsrs	r3, r3, #22
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11a      	bne.n	80030ba <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f9a7 	bl	80033dc <RTC_Bcd2ToByte>
 800308e:	4603      	mov	r3, r0
 8003090:	461a      	mov	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	785b      	ldrb	r3, [r3, #1]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f99e 	bl	80033dc <RTC_Bcd2ToByte>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	789b      	ldrb	r3, [r3, #2]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 f995 	bl	80033dc <RTC_Bcd2ToByte>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_RTC_SetDate+0x1a>
 80030da:	2302      	movs	r3, #2
 80030dc:	e075      	b.n	80031ca <HAL_RTC_SetDate+0x106>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10e      	bne.n	8003112 <HAL_RTC_SetDate+0x4e>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	785b      	ldrb	r3, [r3, #1]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	f023 0310 	bic.w	r3, r3, #16
 8003108:	b2db      	uxtb	r3, r3
 800310a:	330a      	adds	r3, #10
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11c      	bne.n	8003152 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	78db      	ldrb	r3, [r3, #3]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 f93d 	bl	800339c <RTC_ByteToBcd2>
 8003122:	4603      	mov	r3, r0
 8003124:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	785b      	ldrb	r3, [r3, #1]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f936 	bl	800339c <RTC_ByteToBcd2>
 8003130:	4603      	mov	r3, r0
 8003132:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003134:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	789b      	ldrb	r3, [r3, #2]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f92e 	bl	800339c <RTC_ByteToBcd2>
 8003140:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003142:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	e00e      	b.n	8003170 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	78db      	ldrb	r3, [r3, #3]
 8003156:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	785b      	ldrb	r3, [r3, #1]
 800315c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800315e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003164:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	22ca      	movs	r2, #202	; 0xca
 8003176:	625a      	str	r2, [r3, #36]	; 0x24
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2253      	movs	r2, #83	; 0x53
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f899 	bl	80032b8 <RTC_EnterInitMode>
 8003186:	4603      	mov	r3, r0
 8003188:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10c      	bne.n	80031aa <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800319a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800319e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f8bd 	bl	8003320 <RTC_ExitInitMode>
 80031a6:	4603      	mov	r3, r0
 80031a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	22ff      	movs	r2, #255	; 0xff
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80031b2:	7cfb      	ldrb	r3, [r7, #19]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d103      	bne.n	80031c0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd90      	pop	{r4, r7, pc}

080031d2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80031ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	b2da      	uxtb	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	0b5b      	lsrs	r3, r3, #13
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	b2da      	uxtb	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d11a      	bne.n	8003262 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	78db      	ldrb	r3, [r3, #3]
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f8d3 	bl	80033dc <RTC_Bcd2ToByte>
 8003236:	4603      	mov	r3, r0
 8003238:	461a      	mov	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f8ca 	bl	80033dc <RTC_Bcd2ToByte>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	789b      	ldrb	r3, [r3, #2]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 f8c1 	bl	80033dc <RTC_Bcd2ToByte>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003282:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003284:	f7fd fe90 	bl	8000fa8 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800328a:	e009      	b.n	80032a0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800328c:	f7fd fe8c 	bl	8000fa8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800329a:	d901      	bls.n	80032a0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e007      	b.n	80032b0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ee      	beq.n	800328c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d120      	bne.n	8003314 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032da:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80032dc:	f7fd fe64 	bl	8000fa8 <HAL_GetTick>
 80032e0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032e2:	e00d      	b.n	8003300 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80032e4:	f7fd fe60 	bl	8000fa8 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032f2:	d905      	bls.n	8003300 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2203      	movs	r2, #3
 80032fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <RTC_EnterInitMode+0x5c>
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d1e7      	bne.n	80032e4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003314:	7bfb      	ldrb	r3, [r7, #15]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800332c:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <RTC_ExitInitMode+0x78>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a19      	ldr	r2, [pc, #100]	; (8003398 <RTC_ExitInitMode+0x78>)
 8003332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003336:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003338:	4b17      	ldr	r3, [pc, #92]	; (8003398 <RTC_ExitInitMode+0x78>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10c      	bne.n	800335e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff ff91 	bl	800326c <HAL_RTC_WaitForSynchro>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01e      	beq.n	800338e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2203      	movs	r2, #3
 8003354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	e017      	b.n	800338e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800335e:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <RTC_ExitInitMode+0x78>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	4a0d      	ldr	r2, [pc, #52]	; (8003398 <RTC_ExitInitMode+0x78>)
 8003364:	f023 0320 	bic.w	r3, r3, #32
 8003368:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ff7e 	bl	800326c <HAL_RTC_WaitForSynchro>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2203      	movs	r2, #3
 800337a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <RTC_ExitInitMode+0x78>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4a04      	ldr	r2, [pc, #16]	; (8003398 <RTC_ExitInitMode+0x78>)
 8003388:	f043 0320 	orr.w	r3, r3, #32
 800338c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800338e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40002800 	.word	0x40002800

0800339c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80033ae:	e005      	b.n	80033bc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3301      	adds	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80033b6:	7afb      	ldrb	r3, [r7, #11]
 80033b8:	3b0a      	subs	r3, #10
 80033ba:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80033bc:	7afb      	ldrb	r3, [r7, #11]
 80033be:	2b09      	cmp	r3, #9
 80033c0:	d8f6      	bhi.n	80033b0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	7afb      	ldrb	r3, [r7, #11]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b2db      	uxtb	r3, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	4413      	add	r3, r2
 8003402:	b2db      	uxtb	r3, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3350      	adds	r3, #80	; 0x50
 8003422:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	009a      	lsls	r2, r3, #2
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4413      	add	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	461a      	mov	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6013      	str	r3, [r2, #0]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3350      	adds	r3, #80	; 0x50
 8003452:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e095      	b.n	80035ac <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	2b00      	cmp	r3, #0
 8003486:	d108      	bne.n	800349a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003490:	d009      	beq.n	80034a6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	61da      	str	r2, [r3, #28]
 8003498:	e005      	b.n	80034a6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fd fb97 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034dc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034e6:	d902      	bls.n	80034ee <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e002      	b.n	80034f4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034fc:	d007      	beq.n	800350e <HAL_SPI_Init+0xa0>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003506:	d002      	beq.n	800350e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003550:	ea42 0103 	orr.w	r1, r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	f003 0204 	and.w	r2, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800358a:	ea42 0103 	orr.w	r1, r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	; 0x28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035c2:	2301      	movs	r3, #1
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_SPI_TransmitReceive+0x26>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e1fb      	b.n	80039d2 <HAL_SPI_TransmitReceive+0x41e>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035e2:	f7fd fce1 	bl	8000fa8 <HAL_GetTick>
 80035e6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035ee:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80035f6:	887b      	ldrh	r3, [r7, #2]
 80035f8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035fe:	7efb      	ldrb	r3, [r7, #27]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d00e      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x6e>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800360a:	d106      	bne.n	800361a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <HAL_SPI_TransmitReceive+0x66>
 8003614:	7efb      	ldrb	r3, [r7, #27]
 8003616:	2b04      	cmp	r3, #4
 8003618:	d003      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800361a:	2302      	movs	r3, #2
 800361c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003620:	e1cd      	b.n	80039be <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_SPI_TransmitReceive+0x80>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SPI_TransmitReceive+0x80>
 800362e:	887b      	ldrh	r3, [r7, #2]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800363a:	e1c0      	b.n	80039be <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b04      	cmp	r3, #4
 8003646:	d003      	beq.n	8003650 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2205      	movs	r2, #5
 800364c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	887a      	ldrh	r2, [r7, #2]
 8003660:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	887a      	ldrh	r2, [r7, #2]
 8003668:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	887a      	ldrh	r2, [r7, #2]
 8003676:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	887a      	ldrh	r2, [r7, #2]
 800367c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003692:	d802      	bhi.n	800369a <HAL_SPI_TransmitReceive+0xe6>
 8003694:	8a3b      	ldrh	r3, [r7, #16]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d908      	bls.n	80036ac <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	e007      	b.n	80036bc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d007      	beq.n	80036da <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036e2:	d97c      	bls.n	80037de <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_SPI_TransmitReceive+0x13e>
 80036ec:	8a7b      	ldrh	r3, [r7, #18]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d169      	bne.n	80037c6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	1c9a      	adds	r2, r3, #2
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003716:	e056      	b.n	80037c6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d11b      	bne.n	800375e <HAL_SPI_TransmitReceive+0x1aa>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d016      	beq.n	800375e <HAL_SPI_TransmitReceive+0x1aa>
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	2b01      	cmp	r3, #1
 8003734:	d113      	bne.n	800375e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	881a      	ldrh	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	1c9a      	adds	r2, r3, #2
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d11c      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x1f2>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d016      	beq.n	80037a6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	b292      	uxth	r2, r2
 8003784:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	1c9a      	adds	r2, r3, #2
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037a2:	2301      	movs	r3, #1
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037a6:	f7fd fbff 	bl	8000fa8 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d807      	bhi.n	80037c6 <HAL_SPI_TransmitReceive+0x212>
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037bc:	d003      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80037c4:	e0fb      	b.n	80039be <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1a3      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x164>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d19d      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x164>
 80037dc:	e0df      	b.n	800399e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_SPI_TransmitReceive+0x23a>
 80037e6:	8a7b      	ldrh	r3, [r7, #18]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	f040 80cb 	bne.w	8003984 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d912      	bls.n	800381e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	881a      	ldrh	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	1c9a      	adds	r2, r3, #2
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b02      	subs	r3, #2
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800381c:	e0b2      	b.n	8003984 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	330c      	adds	r3, #12
 8003828:	7812      	ldrb	r2, [r2, #0]
 800382a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003844:	e09e      	b.n	8003984 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b02      	cmp	r3, #2
 8003852:	d134      	bne.n	80038be <HAL_SPI_TransmitReceive+0x30a>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d02f      	beq.n	80038be <HAL_SPI_TransmitReceive+0x30a>
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	2b01      	cmp	r3, #1
 8003862:	d12c      	bne.n	80038be <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b01      	cmp	r3, #1
 800386c:	d912      	bls.n	8003894 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	881a      	ldrh	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	1c9a      	adds	r2, r3, #2
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b02      	subs	r3, #2
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003892:	e012      	b.n	80038ba <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	7812      	ldrb	r2, [r2, #0]
 80038a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d148      	bne.n	800395e <HAL_SPI_TransmitReceive+0x3aa>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d042      	beq.n	800395e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d923      	bls.n	800392c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	b292      	uxth	r2, r2
 80038f0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	1c9a      	adds	r2, r3, #2
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b02      	subs	r3, #2
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d81f      	bhi.n	800395a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	e016      	b.n	800395a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f103 020c 	add.w	r2, r3, #12
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	7812      	ldrb	r2, [r2, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800395a:	2301      	movs	r3, #1
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800395e:	f7fd fb23 	bl	8000fa8 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800396a:	429a      	cmp	r2, r3
 800396c:	d803      	bhi.n	8003976 <HAL_SPI_TransmitReceive+0x3c2>
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003974:	d102      	bne.n	800397c <HAL_SPI_TransmitReceive+0x3c8>
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	2b00      	cmp	r3, #0
 800397a:	d103      	bne.n	8003984 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003982:	e01c      	b.n	80039be <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	f47f af5b 	bne.w	8003846 <HAL_SPI_TransmitReceive+0x292>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	f47f af54 	bne.w	8003846 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f934 	bl	8003c10 <SPI_EndRxTxTransaction>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d006      	beq.n	80039bc <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	661a      	str	r2, [r3, #96]	; 0x60
 80039ba:	e000      	b.n	80039be <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80039bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3728      	adds	r7, #40	; 0x28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039ec:	f7fd fadc 	bl	8000fa8 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	4413      	add	r3, r2
 80039fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039fc:	f7fd fad4 	bl	8000fa8 <HAL_GetTick>
 8003a00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a02:	4b39      	ldr	r3, [pc, #228]	; (8003ae8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	015b      	lsls	r3, r3, #5
 8003a08:	0d1b      	lsrs	r3, r3, #20
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a12:	e054      	b.n	8003abe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a1a:	d050      	beq.n	8003abe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a1c:	f7fd fac4 	bl	8000fa8 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d902      	bls.n	8003a32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d13d      	bne.n	8003aae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4a:	d111      	bne.n	8003a70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a54:	d004      	beq.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d107      	bne.n	8003a70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a78:	d10f      	bne.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e017      	b.n	8003ade <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	bf0c      	ite	eq
 8003ace:	2301      	moveq	r3, #1
 8003ad0:	2300      	movne	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d19b      	bne.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000000 	.word	0x20000000

08003aec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003afa:	f7fd fa55 	bl	8000fa8 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	4413      	add	r3, r2
 8003b08:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b0a:	f7fd fa4d 	bl	8000fa8 <HAL_GetTick>
 8003b0e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b10:	4b3e      	ldr	r3, [pc, #248]	; (8003c0c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00da      	lsls	r2, r3, #3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	0d1b      	lsrs	r3, r3, #20
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b28:	e062      	b.n	8003bf0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b30:	d109      	bne.n	8003b46 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d106      	bne.n	8003b46 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003b44:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b4c:	d050      	beq.n	8003bf0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b4e:	f7fd fa2b 	bl	8000fa8 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d902      	bls.n	8003b64 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d13d      	bne.n	8003be0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b7c:	d111      	bne.n	8003ba2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b86:	d004      	beq.n	8003b92 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b90:	d107      	bne.n	8003ba2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003baa:	d10f      	bne.n	8003bcc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e010      	b.n	8003c02 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	3b01      	subs	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d194      	bne.n	8003b2a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3720      	adds	r7, #32
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000000 	.word	0x20000000

08003c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7ff ff5f 	bl	8003aec <SPI_WaitFifoStateUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c38:	f043 0220 	orr.w	r2, r3, #32
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e027      	b.n	8003c94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2180      	movs	r1, #128	; 0x80
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f7ff fec4 	bl	80039dc <SPI_WaitFlagStateUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e014      	b.n	8003c94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff ff38 	bl	8003aec <SPI_WaitFifoStateUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e000      	b.n	8003c94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e040      	b.n	8003d30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fc ffda 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2224      	movs	r2, #36	; 0x24
 8003cc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f8c0 	bl	8003e60 <UART_SetConfig>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e022      	b.n	8003d30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fb3e 	bl	8004374 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fbc5 	bl	80044b8 <UART_CheckIdleState>
 8003d2e:	4603      	mov	r3, r0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	f040 8082 	bne.w	8003e56 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_UART_Transmit+0x26>
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e07a      	b.n	8003e58 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_UART_Transmit+0x38>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e073      	b.n	8003e58 <HAL_UART_Transmit+0x120>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2221      	movs	r2, #33	; 0x21
 8003d84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d86:	f7fd f90f 	bl	8000fa8 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	88fa      	ldrh	r2, [r7, #6]
 8003d98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da4:	d108      	bne.n	8003db8 <HAL_UART_Transmit+0x80>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	e003      	b.n	8003dc0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003dc8:	e02d      	b.n	8003e26 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fbb8 	bl	800454a <UART_WaitOnFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e039      	b.n	8003e58 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	881a      	ldrh	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df6:	b292      	uxth	r2, r2
 8003df8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	61bb      	str	r3, [r7, #24]
 8003e00:	e008      	b.n	8003e14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	b292      	uxth	r2, r2
 8003e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1cb      	bne.n	8003dca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2140      	movs	r1, #64	; 0x40
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fb84 	bl	800454a <UART_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e005      	b.n	8003e58 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
  }
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e60:	b5b0      	push	{r4, r5, r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4bad      	ldr	r3, [pc, #692]	; (8004140 <UART_SetConfig+0x2e0>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	69f9      	ldr	r1, [r7, #28]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4aa2      	ldr	r2, [pc, #648]	; (8004144 <UART_SetConfig+0x2e4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a99      	ldr	r2, [pc, #612]	; (8004148 <UART_SetConfig+0x2e8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d121      	bne.n	8003f2a <UART_SetConfig+0xca>
 8003ee6:	4b99      	ldr	r3, [pc, #612]	; (800414c <UART_SetConfig+0x2ec>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d817      	bhi.n	8003f24 <UART_SetConfig+0xc4>
 8003ef4:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <UART_SetConfig+0x9c>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f0d 	.word	0x08003f0d
 8003f00:	08003f19 	.word	0x08003f19
 8003f04:	08003f13 	.word	0x08003f13
 8003f08:	08003f1f 	.word	0x08003f1f
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	76fb      	strb	r3, [r7, #27]
 8003f10:	e0e7      	b.n	80040e2 <UART_SetConfig+0x282>
 8003f12:	2302      	movs	r3, #2
 8003f14:	76fb      	strb	r3, [r7, #27]
 8003f16:	e0e4      	b.n	80040e2 <UART_SetConfig+0x282>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	76fb      	strb	r3, [r7, #27]
 8003f1c:	e0e1      	b.n	80040e2 <UART_SetConfig+0x282>
 8003f1e:	2308      	movs	r3, #8
 8003f20:	76fb      	strb	r3, [r7, #27]
 8003f22:	e0de      	b.n	80040e2 <UART_SetConfig+0x282>
 8003f24:	2310      	movs	r3, #16
 8003f26:	76fb      	strb	r3, [r7, #27]
 8003f28:	e0db      	b.n	80040e2 <UART_SetConfig+0x282>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a88      	ldr	r2, [pc, #544]	; (8004150 <UART_SetConfig+0x2f0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d132      	bne.n	8003f9a <UART_SetConfig+0x13a>
 8003f34:	4b85      	ldr	r3, [pc, #532]	; (800414c <UART_SetConfig+0x2ec>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d828      	bhi.n	8003f94 <UART_SetConfig+0x134>
 8003f42:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <UART_SetConfig+0xe8>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f7d 	.word	0x08003f7d
 8003f4c:	08003f95 	.word	0x08003f95
 8003f50:	08003f95 	.word	0x08003f95
 8003f54:	08003f95 	.word	0x08003f95
 8003f58:	08003f89 	.word	0x08003f89
 8003f5c:	08003f95 	.word	0x08003f95
 8003f60:	08003f95 	.word	0x08003f95
 8003f64:	08003f95 	.word	0x08003f95
 8003f68:	08003f83 	.word	0x08003f83
 8003f6c:	08003f95 	.word	0x08003f95
 8003f70:	08003f95 	.word	0x08003f95
 8003f74:	08003f95 	.word	0x08003f95
 8003f78:	08003f8f 	.word	0x08003f8f
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	76fb      	strb	r3, [r7, #27]
 8003f80:	e0af      	b.n	80040e2 <UART_SetConfig+0x282>
 8003f82:	2302      	movs	r3, #2
 8003f84:	76fb      	strb	r3, [r7, #27]
 8003f86:	e0ac      	b.n	80040e2 <UART_SetConfig+0x282>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	76fb      	strb	r3, [r7, #27]
 8003f8c:	e0a9      	b.n	80040e2 <UART_SetConfig+0x282>
 8003f8e:	2308      	movs	r3, #8
 8003f90:	76fb      	strb	r3, [r7, #27]
 8003f92:	e0a6      	b.n	80040e2 <UART_SetConfig+0x282>
 8003f94:	2310      	movs	r3, #16
 8003f96:	76fb      	strb	r3, [r7, #27]
 8003f98:	e0a3      	b.n	80040e2 <UART_SetConfig+0x282>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a6d      	ldr	r2, [pc, #436]	; (8004154 <UART_SetConfig+0x2f4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d120      	bne.n	8003fe6 <UART_SetConfig+0x186>
 8003fa4:	4b69      	ldr	r3, [pc, #420]	; (800414c <UART_SetConfig+0x2ec>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fae:	2b30      	cmp	r3, #48	; 0x30
 8003fb0:	d013      	beq.n	8003fda <UART_SetConfig+0x17a>
 8003fb2:	2b30      	cmp	r3, #48	; 0x30
 8003fb4:	d814      	bhi.n	8003fe0 <UART_SetConfig+0x180>
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d009      	beq.n	8003fce <UART_SetConfig+0x16e>
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	d810      	bhi.n	8003fe0 <UART_SetConfig+0x180>
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <UART_SetConfig+0x168>
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d006      	beq.n	8003fd4 <UART_SetConfig+0x174>
 8003fc6:	e00b      	b.n	8003fe0 <UART_SetConfig+0x180>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	76fb      	strb	r3, [r7, #27]
 8003fcc:	e089      	b.n	80040e2 <UART_SetConfig+0x282>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	76fb      	strb	r3, [r7, #27]
 8003fd2:	e086      	b.n	80040e2 <UART_SetConfig+0x282>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	76fb      	strb	r3, [r7, #27]
 8003fd8:	e083      	b.n	80040e2 <UART_SetConfig+0x282>
 8003fda:	2308      	movs	r3, #8
 8003fdc:	76fb      	strb	r3, [r7, #27]
 8003fde:	e080      	b.n	80040e2 <UART_SetConfig+0x282>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	76fb      	strb	r3, [r7, #27]
 8003fe4:	e07d      	b.n	80040e2 <UART_SetConfig+0x282>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a5b      	ldr	r2, [pc, #364]	; (8004158 <UART_SetConfig+0x2f8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d120      	bne.n	8004032 <UART_SetConfig+0x1d2>
 8003ff0:	4b56      	ldr	r3, [pc, #344]	; (800414c <UART_SetConfig+0x2ec>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8003ffc:	d013      	beq.n	8004026 <UART_SetConfig+0x1c6>
 8003ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8004000:	d814      	bhi.n	800402c <UART_SetConfig+0x1cc>
 8004002:	2b80      	cmp	r3, #128	; 0x80
 8004004:	d009      	beq.n	800401a <UART_SetConfig+0x1ba>
 8004006:	2b80      	cmp	r3, #128	; 0x80
 8004008:	d810      	bhi.n	800402c <UART_SetConfig+0x1cc>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <UART_SetConfig+0x1b4>
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d006      	beq.n	8004020 <UART_SetConfig+0x1c0>
 8004012:	e00b      	b.n	800402c <UART_SetConfig+0x1cc>
 8004014:	2300      	movs	r3, #0
 8004016:	76fb      	strb	r3, [r7, #27]
 8004018:	e063      	b.n	80040e2 <UART_SetConfig+0x282>
 800401a:	2302      	movs	r3, #2
 800401c:	76fb      	strb	r3, [r7, #27]
 800401e:	e060      	b.n	80040e2 <UART_SetConfig+0x282>
 8004020:	2304      	movs	r3, #4
 8004022:	76fb      	strb	r3, [r7, #27]
 8004024:	e05d      	b.n	80040e2 <UART_SetConfig+0x282>
 8004026:	2308      	movs	r3, #8
 8004028:	76fb      	strb	r3, [r7, #27]
 800402a:	e05a      	b.n	80040e2 <UART_SetConfig+0x282>
 800402c:	2310      	movs	r3, #16
 800402e:	76fb      	strb	r3, [r7, #27]
 8004030:	e057      	b.n	80040e2 <UART_SetConfig+0x282>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a49      	ldr	r2, [pc, #292]	; (800415c <UART_SetConfig+0x2fc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d125      	bne.n	8004088 <UART_SetConfig+0x228>
 800403c:	4b43      	ldr	r3, [pc, #268]	; (800414c <UART_SetConfig+0x2ec>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800404a:	d017      	beq.n	800407c <UART_SetConfig+0x21c>
 800404c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004050:	d817      	bhi.n	8004082 <UART_SetConfig+0x222>
 8004052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004056:	d00b      	beq.n	8004070 <UART_SetConfig+0x210>
 8004058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405c:	d811      	bhi.n	8004082 <UART_SetConfig+0x222>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <UART_SetConfig+0x20a>
 8004062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004066:	d006      	beq.n	8004076 <UART_SetConfig+0x216>
 8004068:	e00b      	b.n	8004082 <UART_SetConfig+0x222>
 800406a:	2300      	movs	r3, #0
 800406c:	76fb      	strb	r3, [r7, #27]
 800406e:	e038      	b.n	80040e2 <UART_SetConfig+0x282>
 8004070:	2302      	movs	r3, #2
 8004072:	76fb      	strb	r3, [r7, #27]
 8004074:	e035      	b.n	80040e2 <UART_SetConfig+0x282>
 8004076:	2304      	movs	r3, #4
 8004078:	76fb      	strb	r3, [r7, #27]
 800407a:	e032      	b.n	80040e2 <UART_SetConfig+0x282>
 800407c:	2308      	movs	r3, #8
 800407e:	76fb      	strb	r3, [r7, #27]
 8004080:	e02f      	b.n	80040e2 <UART_SetConfig+0x282>
 8004082:	2310      	movs	r3, #16
 8004084:	76fb      	strb	r3, [r7, #27]
 8004086:	e02c      	b.n	80040e2 <UART_SetConfig+0x282>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a2d      	ldr	r2, [pc, #180]	; (8004144 <UART_SetConfig+0x2e4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d125      	bne.n	80040de <UART_SetConfig+0x27e>
 8004092:	4b2e      	ldr	r3, [pc, #184]	; (800414c <UART_SetConfig+0x2ec>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800409c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040a0:	d017      	beq.n	80040d2 <UART_SetConfig+0x272>
 80040a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040a6:	d817      	bhi.n	80040d8 <UART_SetConfig+0x278>
 80040a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ac:	d00b      	beq.n	80040c6 <UART_SetConfig+0x266>
 80040ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b2:	d811      	bhi.n	80040d8 <UART_SetConfig+0x278>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <UART_SetConfig+0x260>
 80040b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040bc:	d006      	beq.n	80040cc <UART_SetConfig+0x26c>
 80040be:	e00b      	b.n	80040d8 <UART_SetConfig+0x278>
 80040c0:	2300      	movs	r3, #0
 80040c2:	76fb      	strb	r3, [r7, #27]
 80040c4:	e00d      	b.n	80040e2 <UART_SetConfig+0x282>
 80040c6:	2302      	movs	r3, #2
 80040c8:	76fb      	strb	r3, [r7, #27]
 80040ca:	e00a      	b.n	80040e2 <UART_SetConfig+0x282>
 80040cc:	2304      	movs	r3, #4
 80040ce:	76fb      	strb	r3, [r7, #27]
 80040d0:	e007      	b.n	80040e2 <UART_SetConfig+0x282>
 80040d2:	2308      	movs	r3, #8
 80040d4:	76fb      	strb	r3, [r7, #27]
 80040d6:	e004      	b.n	80040e2 <UART_SetConfig+0x282>
 80040d8:	2310      	movs	r3, #16
 80040da:	76fb      	strb	r3, [r7, #27]
 80040dc:	e001      	b.n	80040e2 <UART_SetConfig+0x282>
 80040de:	2310      	movs	r3, #16
 80040e0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a17      	ldr	r2, [pc, #92]	; (8004144 <UART_SetConfig+0x2e4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	f040 8087 	bne.w	80041fc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040ee:	7efb      	ldrb	r3, [r7, #27]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d837      	bhi.n	8004164 <UART_SetConfig+0x304>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <UART_SetConfig+0x29c>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	08004121 	.word	0x08004121
 8004100:	08004165 	.word	0x08004165
 8004104:	08004129 	.word	0x08004129
 8004108:	08004165 	.word	0x08004165
 800410c:	0800412f 	.word	0x0800412f
 8004110:	08004165 	.word	0x08004165
 8004114:	08004165 	.word	0x08004165
 8004118:	08004165 	.word	0x08004165
 800411c:	08004137 	.word	0x08004137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004120:	f7fe f914 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8004124:	6178      	str	r0, [r7, #20]
        break;
 8004126:	e022      	b.n	800416e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004128:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <UART_SetConfig+0x300>)
 800412a:	617b      	str	r3, [r7, #20]
        break;
 800412c:	e01f      	b.n	800416e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800412e:	f7fe f875 	bl	800221c <HAL_RCC_GetSysClockFreq>
 8004132:	6178      	str	r0, [r7, #20]
        break;
 8004134:	e01b      	b.n	800416e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413a:	617b      	str	r3, [r7, #20]
        break;
 800413c:	e017      	b.n	800416e <UART_SetConfig+0x30e>
 800413e:	bf00      	nop
 8004140:	efff69f3 	.word	0xefff69f3
 8004144:	40008000 	.word	0x40008000
 8004148:	40013800 	.word	0x40013800
 800414c:	40021000 	.word	0x40021000
 8004150:	40004400 	.word	0x40004400
 8004154:	40004800 	.word	0x40004800
 8004158:	40004c00 	.word	0x40004c00
 800415c:	40005000 	.word	0x40005000
 8004160:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	76bb      	strb	r3, [r7, #26]
        break;
 800416c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80f1 	beq.w	8004358 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	429a      	cmp	r2, r3
 8004184:	d305      	bcc.n	8004192 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	429a      	cmp	r2, r3
 8004190:	d902      	bls.n	8004198 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	76bb      	strb	r3, [r7, #26]
 8004196:	e0df      	b.n	8004358 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	4618      	mov	r0, r3
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	020b      	lsls	r3, r1, #8
 80041aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041ae:	0202      	lsls	r2, r0, #8
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	6849      	ldr	r1, [r1, #4]
 80041b4:	0849      	lsrs	r1, r1, #1
 80041b6:	4608      	mov	r0, r1
 80041b8:	f04f 0100 	mov.w	r1, #0
 80041bc:	1814      	adds	r4, r2, r0
 80041be:	eb43 0501 	adc.w	r5, r3, r1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	461a      	mov	r2, r3
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	4620      	mov	r0, r4
 80041ce:	4629      	mov	r1, r5
 80041d0:	f7fc f856 	bl	8000280 <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4613      	mov	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e2:	d308      	bcc.n	80041f6 <UART_SetConfig+0x396>
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ea:	d204      	bcs.n	80041f6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	60da      	str	r2, [r3, #12]
 80041f4:	e0b0      	b.n	8004358 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	76bb      	strb	r3, [r7, #26]
 80041fa:	e0ad      	b.n	8004358 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004204:	d15c      	bne.n	80042c0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004206:	7efb      	ldrb	r3, [r7, #27]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d828      	bhi.n	800425e <UART_SetConfig+0x3fe>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x3b4>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004239 	.word	0x08004239
 8004218:	08004241 	.word	0x08004241
 800421c:	08004249 	.word	0x08004249
 8004220:	0800425f 	.word	0x0800425f
 8004224:	0800424f 	.word	0x0800424f
 8004228:	0800425f 	.word	0x0800425f
 800422c:	0800425f 	.word	0x0800425f
 8004230:	0800425f 	.word	0x0800425f
 8004234:	08004257 	.word	0x08004257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe f888 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 800423c:	6178      	str	r0, [r7, #20]
        break;
 800423e:	e013      	b.n	8004268 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004240:	f7fe f89a 	bl	8002378 <HAL_RCC_GetPCLK2Freq>
 8004244:	6178      	str	r0, [r7, #20]
        break;
 8004246:	e00f      	b.n	8004268 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004248:	4b49      	ldr	r3, [pc, #292]	; (8004370 <UART_SetConfig+0x510>)
 800424a:	617b      	str	r3, [r7, #20]
        break;
 800424c:	e00c      	b.n	8004268 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424e:	f7fd ffe5 	bl	800221c <HAL_RCC_GetSysClockFreq>
 8004252:	6178      	str	r0, [r7, #20]
        break;
 8004254:	e008      	b.n	8004268 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425a:	617b      	str	r3, [r7, #20]
        break;
 800425c:	e004      	b.n	8004268 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	76bb      	strb	r3, [r7, #26]
        break;
 8004266:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d074      	beq.n	8004358 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	005a      	lsls	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	441a      	add	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004282:	b29b      	uxth	r3, r3
 8004284:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b0f      	cmp	r3, #15
 800428a:	d916      	bls.n	80042ba <UART_SetConfig+0x45a>
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004292:	d212      	bcs.n	80042ba <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f023 030f 	bic.w	r3, r3, #15
 800429c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	89fb      	ldrh	r3, [r7, #14]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	89fa      	ldrh	r2, [r7, #14]
 80042b6:	60da      	str	r2, [r3, #12]
 80042b8:	e04e      	b.n	8004358 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	76bb      	strb	r3, [r7, #26]
 80042be:	e04b      	b.n	8004358 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042c0:	7efb      	ldrb	r3, [r7, #27]
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d827      	bhi.n	8004316 <UART_SetConfig+0x4b6>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0x46c>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	080042f9 	.word	0x080042f9
 80042d4:	08004301 	.word	0x08004301
 80042d8:	08004317 	.word	0x08004317
 80042dc:	08004307 	.word	0x08004307
 80042e0:	08004317 	.word	0x08004317
 80042e4:	08004317 	.word	0x08004317
 80042e8:	08004317 	.word	0x08004317
 80042ec:	0800430f 	.word	0x0800430f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7fe f82c 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 80042f4:	6178      	str	r0, [r7, #20]
        break;
 80042f6:	e013      	b.n	8004320 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f8:	f7fe f83e 	bl	8002378 <HAL_RCC_GetPCLK2Freq>
 80042fc:	6178      	str	r0, [r7, #20]
        break;
 80042fe:	e00f      	b.n	8004320 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004300:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <UART_SetConfig+0x510>)
 8004302:	617b      	str	r3, [r7, #20]
        break;
 8004304:	e00c      	b.n	8004320 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004306:	f7fd ff89 	bl	800221c <HAL_RCC_GetSysClockFreq>
 800430a:	6178      	str	r0, [r7, #20]
        break;
 800430c:	e008      	b.n	8004320 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004312:	617b      	str	r3, [r7, #20]
        break;
 8004314:	e004      	b.n	8004320 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	76bb      	strb	r3, [r7, #26]
        break;
 800431e:	bf00      	nop
    }

    if (pclk != 0U)
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d018      	beq.n	8004358 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	085a      	lsrs	r2, r3, #1
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	441a      	add	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	b29b      	uxth	r3, r3
 800433a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b0f      	cmp	r3, #15
 8004340:	d908      	bls.n	8004354 <UART_SetConfig+0x4f4>
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004348:	d204      	bcs.n	8004354 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	e001      	b.n	8004358 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004364:	7ebb      	ldrb	r3, [r7, #26]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bdb0      	pop	{r4, r5, r7, pc}
 800436e:	bf00      	nop
 8004370:	00f42400 	.word	0x00f42400

08004374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01a      	beq.n	800448a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004472:	d10a      	bne.n	800448a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af02      	add	r7, sp, #8
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044c8:	f7fc fd6e 	bl	8000fa8 <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d10e      	bne.n	80044fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f82d 	bl	800454a <UART_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e023      	b.n	8004542 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b04      	cmp	r3, #4
 8004506:	d10e      	bne.n	8004526 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f817 	bl	800454a <UART_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e00d      	b.n	8004542 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455a:	e05e      	b.n	800461a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004562:	d05a      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004564:	f7fc fd20 	bl	8000fa8 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	429a      	cmp	r2, r3
 8004572:	d302      	bcc.n	800457a <UART_WaitOnFlagUntilTimeout+0x30>
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d11b      	bne.n	80045b2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004588:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e043      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02c      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ce:	d124      	bne.n	800461a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045d8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045e8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e00f      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4013      	ands	r3, r2
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	bf0c      	ite	eq
 800462a:	2301      	moveq	r3, #1
 800462c:	2300      	movne	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	429a      	cmp	r2, r3
 8004636:	d091      	beq.n	800455c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <sd_mount>:


static FATFS FatFs;

error_code_t sd_mount (void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
	FRESULT fres;
	uint8_t retval = E_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	71fb      	strb	r3, [r7, #7]

	fres = f_mount(&FatFs, "", 1); //1=mount now
 800464e:	2201      	movs	r2, #1
 8004650:	490c      	ldr	r1, [pc, #48]	; (8004684 <sd_mount+0x40>)
 8004652:	480d      	ldr	r0, [pc, #52]	; (8004688 <sd_mount+0x44>)
 8004654:	f001 f99c 	bl	8005990 <f_mount>
 8004658:	4603      	mov	r3, r0
 800465a:	71bb      	strb	r3, [r7, #6]
	if (fres != FR_OK)
 800465c:	79bb      	ldrb	r3, [r7, #6]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <sd_mount+0x2e>
	{
		reptar_printf("f_mount error (%i)\r\n", fres);
 8004662:	79bb      	ldrb	r3, [r7, #6]
 8004664:	4619      	mov	r1, r3
 8004666:	4809      	ldr	r0, [pc, #36]	; (800468c <sd_mount+0x48>)
 8004668:	f7fc f9de 	bl	8000a28 <reptar_printf>
		retval = E_FS;
 800466c:	2304      	movs	r3, #4
 800466e:	71fb      	strb	r3, [r7, #7]
		goto out;
 8004670:	e002      	b.n	8004678 <sd_mount+0x34>
	}
	else
	{
		reptar_printf("Successfully mounted file system\r\n");
 8004672:	4807      	ldr	r0, [pc, #28]	; (8004690 <sd_mount+0x4c>)
 8004674:	f7fc f9d8 	bl	8000a28 <reptar_printf>
	}

out:
	return retval;
 8004678:	79fb      	ldrb	r3, [r7, #7]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	0800643c 	.word	0x0800643c
 8004688:	200001a8 	.word	0x200001a8
 800468c:	08006440 	.word	0x08006440
 8004690:	08006458 	.word	0x08006458

08004694 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004698:	4904      	ldr	r1, [pc, #16]	; (80046ac <MX_FATFS_Init+0x18>)
 800469a:	4805      	ldr	r0, [pc, #20]	; (80046b0 <MX_FATFS_Init+0x1c>)
 800469c:	f001 fa0a 	bl	8005ab4 <FATFS_LinkDriver>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <MX_FATFS_Init+0x20>)
 80046a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80046a8:	bf00      	nop
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	200005f8 	.word	0x200005f8
 80046b0:	2000000c 	.word	0x2000000c
 80046b4:	200005fc 	.word	0x200005fc

080046b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
		return USER_SPI_initialize(pdrv);
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f9d9 	bl	8004a7c <USER_SPI_initialize>
 80046ca:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
		return USER_SPI_status(pdrv);
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fab5 	bl	8004c50 <USER_SPI_status>
 80046e6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	4603      	mov	r3, r0
 80046fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    	return USER_SPI_read(pdrv, buff, sector, count);
 8004700:	7bf8      	ldrb	r0, [r7, #15]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	f000 fab8 	bl	8004c7c <USER_SPI_read>
 800470c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	4603      	mov	r3, r0
 8004724:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    	return USER_SPI_write(pdrv, buff, sector, count);
 8004726:	7bf8      	ldrb	r0, [r7, #15]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	f000 fb0b 	bl	8004d48 <USER_SPI_write>
 8004732:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	603a      	str	r2, [r7, #0]
 8004746:	71fb      	strb	r3, [r7, #7]
 8004748:	460b      	mov	r3, r1
 800474a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    	return USER_SPI_ioctl(pdrv, cmd, buff);
 800474c:	79b9      	ldrb	r1, [r7, #6]
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fb74 	bl	8004e40 <USER_SPI_ioctl>
 8004758:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800476c:	f7fc fc1c 	bl	8000fa8 <HAL_GetTick>
 8004770:	4603      	mov	r3, r0
 8004772:	4a04      	ldr	r2, [pc, #16]	; (8004784 <SPI_Timer_On+0x20>)
 8004774:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004776:	4a04      	ldr	r2, [pc, #16]	; (8004788 <SPI_Timer_On+0x24>)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6013      	str	r3, [r2, #0]
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000a60 	.word	0x20000a60
 8004788:	20000a64 	.word	0x20000a64

0800478c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004790:	f7fc fc0a 	bl	8000fa8 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <SPI_Timer_Status+0x24>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	1ad2      	subs	r2, r2, r3
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <SPI_Timer_Status+0x28>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	bf34      	ite	cc
 80047a4:	2301      	movcc	r3, #1
 80047a6:	2300      	movcs	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000a60 	.word	0x20000a60
 80047b4:	20000a64 	.word	0x20000a64

080047b8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af02      	add	r7, sp, #8
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80047c2:	f107 020f 	add.w	r2, r7, #15
 80047c6:	1df9      	adds	r1, r7, #7
 80047c8:	2332      	movs	r3, #50	; 0x32
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	2301      	movs	r3, #1
 80047ce:	4804      	ldr	r0, [pc, #16]	; (80047e0 <xchg_spi+0x28>)
 80047d0:	f7fe fef0 	bl	80035b4 <HAL_SPI_TransmitReceive>
    return rxDat;
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	2000050c 	.word	0x2000050c

080047e4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80047e4:	b590      	push	{r4, r7, lr}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	e00a      	b.n	800480a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	18d4      	adds	r4, r2, r3
 80047fa:	20ff      	movs	r0, #255	; 0xff
 80047fc:	f7ff ffdc 	bl	80047b8 <xchg_spi>
 8004800:	4603      	mov	r3, r0
 8004802:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d3f0      	bcc.n	80047f4 <rcvr_spi_multi+0x10>
	}
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	bd90      	pop	{r4, r7, pc}

0800481c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e009      	b.n	8004840 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ffbf 	bl	80047b8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3301      	adds	r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d3f1      	bcc.n	800482c <xmit_spi_multi+0x10>
	}
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800485a:	f7fc fba5 	bl	8000fa8 <HAL_GetTick>
 800485e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004864:	20ff      	movs	r0, #255	; 0xff
 8004866:	f7ff ffa7 	bl	80047b8 <xchg_spi>
 800486a:	4603      	mov	r3, r0
 800486c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2bff      	cmp	r3, #255	; 0xff
 8004872:	d007      	beq.n	8004884 <wait_ready+0x32>
 8004874:	f7fc fb98 	bl	8000fa8 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	429a      	cmp	r2, r3
 8004882:	d8ef      	bhi.n	8004864 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2bff      	cmp	r3, #255	; 0xff
 8004888:	bf0c      	ite	eq
 800488a:	2301      	moveq	r3, #1
 800488c:	2300      	movne	r3, #0
 800488e:	b2db      	uxtb	r3, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800489c:	2201      	movs	r2, #1
 800489e:	2140      	movs	r1, #64	; 0x40
 80048a0:	4803      	ldr	r0, [pc, #12]	; (80048b0 <despiselect+0x18>)
 80048a2:	f7fc fe41 	bl	8001528 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80048a6:	20ff      	movs	r0, #255	; 0xff
 80048a8:	f7ff ff86 	bl	80047b8 <xchg_spi>

}
 80048ac:	bf00      	nop
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	48000400 	.word	0x48000400

080048b4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80048b8:	2200      	movs	r2, #0
 80048ba:	2140      	movs	r1, #64	; 0x40
 80048bc:	4809      	ldr	r0, [pc, #36]	; (80048e4 <spiselect+0x30>)
 80048be:	f7fc fe33 	bl	8001528 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80048c2:	20ff      	movs	r0, #255	; 0xff
 80048c4:	f7ff ff78 	bl	80047b8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80048c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048cc:	f7ff ffc1 	bl	8004852 <wait_ready>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <spiselect+0x26>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e002      	b.n	80048e0 <spiselect+0x2c>

	despiselect();
 80048da:	f7ff ffdd 	bl	8004898 <despiselect>
	return 0;	/* Timeout */
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	48000400 	.word	0x48000400

080048e8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80048f2:	20c8      	movs	r0, #200	; 0xc8
 80048f4:	f7ff ff36 	bl	8004764 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80048f8:	20ff      	movs	r0, #255	; 0xff
 80048fa:	f7ff ff5d 	bl	80047b8 <xchg_spi>
 80048fe:	4603      	mov	r3, r0
 8004900:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	2bff      	cmp	r3, #255	; 0xff
 8004906:	d104      	bne.n	8004912 <rcvr_datablock+0x2a>
 8004908:	f7ff ff40 	bl	800478c <SPI_Timer_Status>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f2      	bne.n	80048f8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2bfe      	cmp	r3, #254	; 0xfe
 8004916:	d001      	beq.n	800491c <rcvr_datablock+0x34>
 8004918:	2300      	movs	r3, #0
 800491a:	e00a      	b.n	8004932 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ff60 	bl	80047e4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004924:	20ff      	movs	r0, #255	; 0xff
 8004926:	f7ff ff47 	bl	80047b8 <xchg_spi>
 800492a:	20ff      	movs	r0, #255	; 0xff
 800492c:	f7ff ff44 	bl	80047b8 <xchg_spi>

	return 1;						/* Function succeeded */
 8004930:	2301      	movs	r3, #1
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800494a:	f7ff ff82 	bl	8004852 <wait_ready>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <xmit_datablock+0x1e>
 8004954:	2300      	movs	r3, #0
 8004956:	e01e      	b.n	8004996 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff ff2c 	bl	80047b8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	2bfd      	cmp	r3, #253	; 0xfd
 8004964:	d016      	beq.n	8004994 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff ff56 	bl	800481c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004970:	20ff      	movs	r0, #255	; 0xff
 8004972:	f7ff ff21 	bl	80047b8 <xchg_spi>
 8004976:	20ff      	movs	r0, #255	; 0xff
 8004978:	f7ff ff1e 	bl	80047b8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800497c:	20ff      	movs	r0, #255	; 0xff
 800497e:	f7ff ff1b 	bl	80047b8 <xchg_spi>
 8004982:	4603      	mov	r3, r0
 8004984:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2b05      	cmp	r3, #5
 800498e:	d001      	beq.n	8004994 <xmit_datablock+0x5a>
 8004990:	2300      	movs	r3, #0
 8004992:	e000      	b.n	8004996 <xmit_datablock+0x5c>
	}
	return 1;
 8004994:	2301      	movs	r3, #1
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	4603      	mov	r3, r0
 80049a6:	6039      	str	r1, [r7, #0]
 80049a8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80049aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	da0e      	bge.n	80049d0 <send_cmd+0x32>
		cmd &= 0x7F;
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80049ba:	2100      	movs	r1, #0
 80049bc:	2037      	movs	r0, #55	; 0x37
 80049be:	f7ff ffee 	bl	800499e <send_cmd>
 80049c2:	4603      	mov	r3, r0
 80049c4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80049c6:	7bbb      	ldrb	r3, [r7, #14]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d901      	bls.n	80049d0 <send_cmd+0x32>
 80049cc:	7bbb      	ldrb	r3, [r7, #14]
 80049ce:	e051      	b.n	8004a74 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	2b0c      	cmp	r3, #12
 80049d4:	d008      	beq.n	80049e8 <send_cmd+0x4a>
		despiselect();
 80049d6:	f7ff ff5f 	bl	8004898 <despiselect>
		if (!spiselect()) return 0xFF;
 80049da:	f7ff ff6b 	bl	80048b4 <spiselect>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <send_cmd+0x4a>
 80049e4:	23ff      	movs	r3, #255	; 0xff
 80049e6:	e045      	b.n	8004a74 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fee1 	bl	80047b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	0e1b      	lsrs	r3, r3, #24
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fedb 	bl	80047b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff fed5 	bl	80047b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	0a1b      	lsrs	r3, r3, #8
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff fecf 	bl	80047b8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff feca 	bl	80047b8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <send_cmd+0x94>
 8004a2e:	2395      	movs	r3, #149	; 0x95
 8004a30:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d101      	bne.n	8004a3c <send_cmd+0x9e>
 8004a38:	2387      	movs	r3, #135	; 0x87
 8004a3a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff feba 	bl	80047b8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d102      	bne.n	8004a50 <send_cmd+0xb2>
 8004a4a:	20ff      	movs	r0, #255	; 0xff
 8004a4c:	f7ff feb4 	bl	80047b8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004a50:	230a      	movs	r3, #10
 8004a52:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004a54:	20ff      	movs	r0, #255	; 0xff
 8004a56:	f7ff feaf 	bl	80047b8 <xchg_spi>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	da05      	bge.n	8004a72 <send_cmd+0xd4>
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <USER_SPI_initialize+0x14>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0d4      	b.n	8004c3a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004a90:	4b6c      	ldr	r3, [pc, #432]	; (8004c44 <USER_SPI_initialize+0x1c8>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <USER_SPI_initialize+0x2a>
 8004a9e:	4b69      	ldr	r3, [pc, #420]	; (8004c44 <USER_SPI_initialize+0x1c8>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	e0c9      	b.n	8004c3a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8004aa6:	4b68      	ldr	r3, [pc, #416]	; (8004c48 <USER_SPI_initialize+0x1cc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b66      	ldr	r3, [pc, #408]	; (8004c48 <USER_SPI_initialize+0x1cc>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8004ab4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004ab6:	230a      	movs	r3, #10
 8004ab8:	73fb      	strb	r3, [r7, #15]
 8004aba:	e005      	b.n	8004ac8 <USER_SPI_initialize+0x4c>
 8004abc:	20ff      	movs	r0, #255	; 0xff
 8004abe:	f7ff fe7b 	bl	80047b8 <xchg_spi>
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f6      	bne.n	8004abc <USER_SPI_initialize+0x40>

	ty = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f7ff ff62 	bl	800499e <send_cmd>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	f040 808b 	bne.w	8004bf8 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ae6:	f7ff fe3d 	bl	8004764 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004aea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004aee:	2008      	movs	r0, #8
 8004af0:	f7ff ff55 	bl	800499e <send_cmd>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d151      	bne.n	8004b9e <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
 8004afe:	e00d      	b.n	8004b1c <USER_SPI_initialize+0xa0>
 8004b00:	7bfc      	ldrb	r4, [r7, #15]
 8004b02:	20ff      	movs	r0, #255	; 0xff
 8004b04:	f7ff fe58 	bl	80047b8 <xchg_spi>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f107 0310 	add.w	r3, r7, #16
 8004b10:	4423      	add	r3, r4
 8004b12:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d9ee      	bls.n	8004b00 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004b22:	7abb      	ldrb	r3, [r7, #10]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d167      	bne.n	8004bf8 <USER_SPI_initialize+0x17c>
 8004b28:	7afb      	ldrb	r3, [r7, #11]
 8004b2a:	2baa      	cmp	r3, #170	; 0xaa
 8004b2c:	d164      	bne.n	8004bf8 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004b2e:	bf00      	nop
 8004b30:	f7ff fe2c 	bl	800478c <SPI_Timer_Status>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <USER_SPI_initialize+0xce>
 8004b3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b3e:	20a9      	movs	r0, #169	; 0xa9
 8004b40:	f7ff ff2d 	bl	800499e <send_cmd>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f2      	bne.n	8004b30 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004b4a:	f7ff fe1f 	bl	800478c <SPI_Timer_Status>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d051      	beq.n	8004bf8 <USER_SPI_initialize+0x17c>
 8004b54:	2100      	movs	r1, #0
 8004b56:	203a      	movs	r0, #58	; 0x3a
 8004b58:	f7ff ff21 	bl	800499e <send_cmd>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d14a      	bne.n	8004bf8 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004b62:	2300      	movs	r3, #0
 8004b64:	73fb      	strb	r3, [r7, #15]
 8004b66:	e00d      	b.n	8004b84 <USER_SPI_initialize+0x108>
 8004b68:	7bfc      	ldrb	r4, [r7, #15]
 8004b6a:	20ff      	movs	r0, #255	; 0xff
 8004b6c:	f7ff fe24 	bl	80047b8 <xchg_spi>
 8004b70:	4603      	mov	r3, r0
 8004b72:	461a      	mov	r2, r3
 8004b74:	f107 0310 	add.w	r3, r7, #16
 8004b78:	4423      	add	r3, r4
 8004b7a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	3301      	adds	r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d9ee      	bls.n	8004b68 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004b8a:	7a3b      	ldrb	r3, [r7, #8]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <USER_SPI_initialize+0x11c>
 8004b94:	230c      	movs	r3, #12
 8004b96:	e000      	b.n	8004b9a <USER_SPI_initialize+0x11e>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	737b      	strb	r3, [r7, #13]
 8004b9c:	e02c      	b.n	8004bf8 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	20a9      	movs	r0, #169	; 0xa9
 8004ba2:	f7ff fefc 	bl	800499e <send_cmd>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d804      	bhi.n	8004bb6 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004bac:	2302      	movs	r3, #2
 8004bae:	737b      	strb	r3, [r7, #13]
 8004bb0:	23a9      	movs	r3, #169	; 0xa9
 8004bb2:	73bb      	strb	r3, [r7, #14]
 8004bb4:	e003      	b.n	8004bbe <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	737b      	strb	r3, [r7, #13]
 8004bba:	2301      	movs	r3, #1
 8004bbc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004bbe:	bf00      	nop
 8004bc0:	f7ff fde4 	bl	800478c <SPI_Timer_Status>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d007      	beq.n	8004bda <USER_SPI_initialize+0x15e>
 8004bca:	7bbb      	ldrb	r3, [r7, #14]
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fee5 	bl	800499e <send_cmd>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f2      	bne.n	8004bc0 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004bda:	f7ff fdd7 	bl	800478c <SPI_Timer_Status>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <USER_SPI_initialize+0x178>
 8004be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004be8:	2010      	movs	r0, #16
 8004bea:	f7ff fed8 	bl	800499e <send_cmd>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <USER_SPI_initialize+0x17c>
				ty = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004bf8:	4a14      	ldr	r2, [pc, #80]	; (8004c4c <USER_SPI_initialize+0x1d0>)
 8004bfa:	7b7b      	ldrb	r3, [r7, #13]
 8004bfc:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004bfe:	f7ff fe4b 	bl	8004898 <despiselect>

	if (ty) {			/* OK */
 8004c02:	7b7b      	ldrb	r3, [r7, #13]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8004c08:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <USER_SPI_initialize+0x1cc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004c12:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <USER_SPI_initialize+0x1cc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0210 	orr.w	r2, r2, #16
 8004c1a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <USER_SPI_initialize+0x1c8>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <USER_SPI_initialize+0x1c8>)
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e002      	b.n	8004c34 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <USER_SPI_initialize+0x1c8>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <USER_SPI_initialize+0x1c8>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	b2db      	uxtb	r3, r3
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd90      	pop	{r4, r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000020 	.word	0x20000020
 8004c48:	2000050c 	.word	0x2000050c
 8004c4c:	200003d8 	.word	0x200003d8

08004c50 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <USER_SPI_status+0x14>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e002      	b.n	8004c6a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004c64:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <USER_SPI_status+0x28>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	b2db      	uxtb	r3, r3
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000020 	.word	0x20000020

08004c7c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	4603      	mov	r3, r0
 8004c8a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d102      	bne.n	8004c98 <USER_SPI_read+0x1c>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <USER_SPI_read+0x20>
 8004c98:	2304      	movs	r3, #4
 8004c9a:	e04d      	b.n	8004d38 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004c9c:	4b28      	ldr	r3, [pc, #160]	; (8004d40 <USER_SPI_read+0xc4>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <USER_SPI_read+0x32>
 8004caa:	2303      	movs	r3, #3
 8004cac:	e044      	b.n	8004d38 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004cae:	4b25      	ldr	r3, [pc, #148]	; (8004d44 <USER_SPI_read+0xc8>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <USER_SPI_read+0x44>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	025b      	lsls	r3, r3, #9
 8004cbe:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d111      	bne.n	8004cea <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	2011      	movs	r0, #17
 8004cca:	f7ff fe68 	bl	800499e <send_cmd>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d129      	bne.n	8004d28 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004cd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cd8:	68b8      	ldr	r0, [r7, #8]
 8004cda:	f7ff fe05 	bl	80048e8 <rcvr_datablock>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d021      	beq.n	8004d28 <USER_SPI_read+0xac>
			count = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	e01e      	b.n	8004d28 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	2012      	movs	r0, #18
 8004cee:	f7ff fe56 	bl	800499e <send_cmd>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d117      	bne.n	8004d28 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cfc:	68b8      	ldr	r0, [r7, #8]
 8004cfe:	f7ff fdf3 	bl	80048e8 <rcvr_datablock>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <USER_SPI_read+0xa2>
				buff += 512;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004d0e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1ed      	bne.n	8004cf8 <USER_SPI_read+0x7c>
 8004d1c:	e000      	b.n	8004d20 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004d1e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004d20:	2100      	movs	r1, #0
 8004d22:	200c      	movs	r0, #12
 8004d24:	f7ff fe3b 	bl	800499e <send_cmd>
		}
	}
	despiselect();
 8004d28:	f7ff fdb6 	bl	8004898 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bf14      	ite	ne
 8004d32:	2301      	movne	r3, #1
 8004d34:	2300      	moveq	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20000020 	.word	0x20000020
 8004d44:	200003d8 	.word	0x200003d8

08004d48 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4603      	mov	r3, r0
 8004d56:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d102      	bne.n	8004d64 <USER_SPI_write+0x1c>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <USER_SPI_write+0x20>
 8004d64:	2304      	movs	r3, #4
 8004d66:	e063      	b.n	8004e30 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004d68:	4b33      	ldr	r3, [pc, #204]	; (8004e38 <USER_SPI_write+0xf0>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <USER_SPI_write+0x32>
 8004d76:	2303      	movs	r3, #3
 8004d78:	e05a      	b.n	8004e30 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004d7a:	4b2f      	ldr	r3, [pc, #188]	; (8004e38 <USER_SPI_write+0xf0>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <USER_SPI_write+0x44>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e051      	b.n	8004e30 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004d8c:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <USER_SPI_write+0xf4>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <USER_SPI_write+0x56>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	025b      	lsls	r3, r3, #9
 8004d9c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d110      	bne.n	8004dc6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	2018      	movs	r0, #24
 8004da8:	f7ff fdf9 	bl	800499e <send_cmd>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d136      	bne.n	8004e20 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004db2:	21fe      	movs	r1, #254	; 0xfe
 8004db4:	68b8      	ldr	r0, [r7, #8]
 8004db6:	f7ff fdc0 	bl	800493a <xmit_datablock>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d02f      	beq.n	8004e20 <USER_SPI_write+0xd8>
			count = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	e02c      	b.n	8004e20 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <USER_SPI_write+0xf4>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	f003 0306 	and.w	r3, r3, #6
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <USER_SPI_write+0x92>
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	2097      	movs	r0, #151	; 0x97
 8004dd6:	f7ff fde2 	bl	800499e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	2019      	movs	r0, #25
 8004dde:	f7ff fdde 	bl	800499e <send_cmd>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11b      	bne.n	8004e20 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004de8:	21fc      	movs	r1, #252	; 0xfc
 8004dea:	68b8      	ldr	r0, [r7, #8]
 8004dec:	f7ff fda5 	bl	800493a <xmit_datablock>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <USER_SPI_write+0xc4>
				buff += 512;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004dfc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1ee      	bne.n	8004de8 <USER_SPI_write+0xa0>
 8004e0a:	e000      	b.n	8004e0e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004e0c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004e0e:	21fd      	movs	r1, #253	; 0xfd
 8004e10:	2000      	movs	r0, #0
 8004e12:	f7ff fd92 	bl	800493a <xmit_datablock>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <USER_SPI_write+0xd8>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004e20:	f7ff fd3a 	bl	8004898 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bf14      	ite	ne
 8004e2a:	2301      	movne	r3, #1
 8004e2c:	2300      	moveq	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000020 	.word	0x20000020
 8004e3c:	200003d8 	.word	0x200003d8

08004e40 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08c      	sub	sp, #48	; 0x30
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	603a      	str	r2, [r7, #0]
 8004e4a:	71fb      	strb	r3, [r7, #7]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <USER_SPI_ioctl+0x1a>
 8004e56:	2304      	movs	r3, #4
 8004e58:	e15a      	b.n	8005110 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004e5a:	4baf      	ldr	r3, [pc, #700]	; (8005118 <USER_SPI_ioctl+0x2d8>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <USER_SPI_ioctl+0x2c>
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e151      	b.n	8005110 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004e72:	79bb      	ldrb	r3, [r7, #6]
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	f200 8136 	bhi.w	80050e6 <USER_SPI_ioctl+0x2a6>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <USER_SPI_ioctl+0x40>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004e95 	.word	0x08004e95
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	080050e7 	.word	0x080050e7
 8004e8c:	08004f55 	.word	0x08004f55
 8004e90:	0800504b 	.word	0x0800504b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004e94:	f7ff fd0e 	bl	80048b4 <spiselect>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 8127 	beq.w	80050ee <USER_SPI_ioctl+0x2ae>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004ea6:	e122      	b.n	80050ee <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	2009      	movs	r0, #9
 8004eac:	f7ff fd77 	bl	800499e <send_cmd>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f040 811d 	bne.w	80050f2 <USER_SPI_ioctl+0x2b2>
 8004eb8:	f107 030c 	add.w	r3, r7, #12
 8004ebc:	2110      	movs	r1, #16
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fd12 	bl	80048e8 <rcvr_datablock>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 8113 	beq.w	80050f2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004ecc:	7b3b      	ldrb	r3, [r7, #12]
 8004ece:	099b      	lsrs	r3, r3, #6
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d111      	bne.n	8004efa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004ed6:	7d7b      	ldrb	r3, [r7, #21]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	7d3b      	ldrb	r3, [r7, #20]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	4413      	add	r3, r2
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	041b      	lsls	r3, r3, #16
 8004ee6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004eea:	4413      	add	r3, r2
 8004eec:	3301      	adds	r3, #1
 8004eee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	029a      	lsls	r2, r3, #10
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e028      	b.n	8004f4c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004efa:	7c7b      	ldrb	r3, [r7, #17]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	7dbb      	ldrb	r3, [r7, #22]
 8004f04:	09db      	lsrs	r3, r3, #7
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	4413      	add	r3, r2
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	7d7b      	ldrb	r3, [r7, #21]
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f003 0306 	and.w	r3, r3, #6
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	4413      	add	r3, r2
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	3302      	adds	r3, #2
 8004f1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004f22:	7d3b      	ldrb	r3, [r7, #20]
 8004f24:	099b      	lsrs	r3, r3, #6
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	7cfb      	ldrb	r3, [r7, #19]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	7cbb      	ldrb	r3, [r7, #18]
 8004f32:	029b      	lsls	r3, r3, #10
 8004f34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f38:	4413      	add	r3, r2
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004f3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f42:	3b09      	subs	r3, #9
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	409a      	lsls	r2, r3
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004f52:	e0ce      	b.n	80050f2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004f54:	4b71      	ldr	r3, [pc, #452]	; (800511c <USER_SPI_ioctl+0x2dc>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d031      	beq.n	8004fc4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004f60:	2100      	movs	r1, #0
 8004f62:	208d      	movs	r0, #141	; 0x8d
 8004f64:	f7ff fd1b 	bl	800499e <send_cmd>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f040 80c3 	bne.w	80050f6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004f70:	20ff      	movs	r0, #255	; 0xff
 8004f72:	f7ff fc21 	bl	80047b8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004f76:	f107 030c 	add.w	r3, r7, #12
 8004f7a:	2110      	movs	r1, #16
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fcb3 	bl	80048e8 <rcvr_datablock>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80b6 	beq.w	80050f6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004f8a:	2330      	movs	r3, #48	; 0x30
 8004f8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004f90:	e007      	b.n	8004fa2 <USER_SPI_ioctl+0x162>
 8004f92:	20ff      	movs	r0, #255	; 0xff
 8004f94:	f7ff fc10 	bl	80047b8 <xchg_spi>
 8004f98:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004fa2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f3      	bne.n	8004f92 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004faa:	7dbb      	ldrb	r3, [r7, #22]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2310      	movs	r3, #16
 8004fb4:	fa03 f202 	lsl.w	r2, r3, r2
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004fc2:	e098      	b.n	80050f6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	2009      	movs	r0, #9
 8004fc8:	f7ff fce9 	bl	800499e <send_cmd>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f040 8091 	bne.w	80050f6 <USER_SPI_ioctl+0x2b6>
 8004fd4:	f107 030c 	add.w	r3, r7, #12
 8004fd8:	2110      	movs	r1, #16
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fc84 	bl	80048e8 <rcvr_datablock>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 8087 	beq.w	80050f6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004fe8:	4b4c      	ldr	r3, [pc, #304]	; (800511c <USER_SPI_ioctl+0x2dc>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d012      	beq.n	800501a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004ff4:	7dbb      	ldrb	r3, [r7, #22]
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004ffc:	7dfa      	ldrb	r2, [r7, #23]
 8004ffe:	09d2      	lsrs	r2, r2, #7
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	4413      	add	r3, r2
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	7e7b      	ldrb	r3, [r7, #25]
 8005008:	099b      	lsrs	r3, r3, #6
 800500a:	b2db      	uxtb	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	461a      	mov	r2, r3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e013      	b.n	8005042 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800501a:	7dbb      	ldrb	r3, [r7, #22]
 800501c:	109b      	asrs	r3, r3, #2
 800501e:	b29b      	uxth	r3, r3
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	3301      	adds	r3, #1
 8005026:	7dfa      	ldrb	r2, [r7, #23]
 8005028:	00d2      	lsls	r2, r2, #3
 800502a:	f002 0218 	and.w	r2, r2, #24
 800502e:	7df9      	ldrb	r1, [r7, #23]
 8005030:	0949      	lsrs	r1, r1, #5
 8005032:	b2c9      	uxtb	r1, r1
 8005034:	440a      	add	r2, r1
 8005036:	3201      	adds	r2, #1
 8005038:	fb02 f303 	mul.w	r3, r2, r3
 800503c:	461a      	mov	r2, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005048:	e055      	b.n	80050f6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800504a:	4b34      	ldr	r3, [pc, #208]	; (800511c <USER_SPI_ioctl+0x2dc>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	f003 0306 	and.w	r3, r3, #6
 8005052:	2b00      	cmp	r3, #0
 8005054:	d051      	beq.n	80050fa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005056:	f107 020c 	add.w	r2, r7, #12
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	210b      	movs	r1, #11
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff feee 	bl	8004e40 <USER_SPI_ioctl>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d149      	bne.n	80050fe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800506a:	7b3b      	ldrb	r3, [r7, #12]
 800506c:	099b      	lsrs	r3, r3, #6
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d104      	bne.n	800507e <USER_SPI_ioctl+0x23e>
 8005074:	7dbb      	ldrb	r3, [r7, #22]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d041      	beq.n	8005102 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	623b      	str	r3, [r7, #32]
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800508e:	4b23      	ldr	r3, [pc, #140]	; (800511c <USER_SPI_ioctl+0x2dc>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d105      	bne.n	80050a6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	025b      	lsls	r3, r3, #9
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	025b      	lsls	r3, r3, #9
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80050a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050a8:	2020      	movs	r0, #32
 80050aa:	f7ff fc78 	bl	800499e <send_cmd>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d128      	bne.n	8005106 <USER_SPI_ioctl+0x2c6>
 80050b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050b6:	2021      	movs	r0, #33	; 0x21
 80050b8:	f7ff fc71 	bl	800499e <send_cmd>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d121      	bne.n	8005106 <USER_SPI_ioctl+0x2c6>
 80050c2:	2100      	movs	r1, #0
 80050c4:	2026      	movs	r0, #38	; 0x26
 80050c6:	f7ff fc6a 	bl	800499e <send_cmd>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d11a      	bne.n	8005106 <USER_SPI_ioctl+0x2c6>
 80050d0:	f247 5030 	movw	r0, #30000	; 0x7530
 80050d4:	f7ff fbbd 	bl	8004852 <wait_ready>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d013      	beq.n	8005106 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80050de:	2300      	movs	r3, #0
 80050e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80050e4:	e00f      	b.n	8005106 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80050e6:	2304      	movs	r3, #4
 80050e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80050ec:	e00c      	b.n	8005108 <USER_SPI_ioctl+0x2c8>
		break;
 80050ee:	bf00      	nop
 80050f0:	e00a      	b.n	8005108 <USER_SPI_ioctl+0x2c8>
		break;
 80050f2:	bf00      	nop
 80050f4:	e008      	b.n	8005108 <USER_SPI_ioctl+0x2c8>
		break;
 80050f6:	bf00      	nop
 80050f8:	e006      	b.n	8005108 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80050fa:	bf00      	nop
 80050fc:	e004      	b.n	8005108 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80050fe:	bf00      	nop
 8005100:	e002      	b.n	8005108 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005102:	bf00      	nop
 8005104:	e000      	b.n	8005108 <USER_SPI_ioctl+0x2c8>
		break;
 8005106:	bf00      	nop
	}

	despiselect();
 8005108:	f7ff fbc6 	bl	8004898 <despiselect>

	return res;
 800510c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005110:	4618      	mov	r0, r3
 8005112:	3730      	adds	r7, #48	; 0x30
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000020 	.word	0x20000020
 800511c:	200003d8 	.word	0x200003d8

08005120 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	4a08      	ldr	r2, [pc, #32]	; (8005150 <disk_status+0x30>)
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	79fa      	ldrb	r2, [r7, #7]
 8005138:	4905      	ldr	r1, [pc, #20]	; (8005150 <disk_status+0x30>)
 800513a:	440a      	add	r2, r1
 800513c:	7a12      	ldrb	r2, [r2, #8]
 800513e:	4610      	mov	r0, r2
 8005140:	4798      	blx	r3
 8005142:	4603      	mov	r3, r0
 8005144:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000404 	.word	0x20000404

08005154 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	4a0d      	ldr	r2, [pc, #52]	; (800519c <disk_initialize+0x48>)
 8005166:	5cd3      	ldrb	r3, [r2, r3]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d111      	bne.n	8005190 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	4a0b      	ldr	r2, [pc, #44]	; (800519c <disk_initialize+0x48>)
 8005170:	2101      	movs	r1, #1
 8005172:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	4a09      	ldr	r2, [pc, #36]	; (800519c <disk_initialize+0x48>)
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	79fa      	ldrb	r2, [r7, #7]
 8005182:	4906      	ldr	r1, [pc, #24]	; (800519c <disk_initialize+0x48>)
 8005184:	440a      	add	r2, r1
 8005186:	7a12      	ldrb	r2, [r2, #8]
 8005188:	4610      	mov	r0, r2
 800518a:	4798      	blx	r3
 800518c:	4603      	mov	r3, r0
 800518e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005190:	7bfb      	ldrb	r3, [r7, #15]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000404 	.word	0x20000404

080051a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80051a0:	b590      	push	{r4, r7, lr}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4603      	mov	r3, r0
 80051ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	4a0a      	ldr	r2, [pc, #40]	; (80051dc <disk_read+0x3c>)
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	689c      	ldr	r4, [r3, #8]
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	4a07      	ldr	r2, [pc, #28]	; (80051dc <disk_read+0x3c>)
 80051c0:	4413      	add	r3, r2
 80051c2:	7a18      	ldrb	r0, [r3, #8]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	68b9      	ldr	r1, [r7, #8]
 80051ca:	47a0      	blx	r4
 80051cc:	4603      	mov	r3, r0
 80051ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd90      	pop	{r4, r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000404 	.word	0x20000404

080051e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80051e0:	b590      	push	{r4, r7, lr}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	607a      	str	r2, [r7, #4]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	4603      	mov	r3, r0
 80051ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	4a0a      	ldr	r2, [pc, #40]	; (800521c <disk_write+0x3c>)
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68dc      	ldr	r4, [r3, #12]
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	4a07      	ldr	r2, [pc, #28]	; (800521c <disk_write+0x3c>)
 8005200:	4413      	add	r3, r2
 8005202:	7a18      	ldrb	r0, [r3, #8]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	47a0      	blx	r4
 800520c:	4603      	mov	r3, r0
 800520e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005210:	7dfb      	ldrb	r3, [r7, #23]
}
 8005212:	4618      	mov	r0, r3
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	bd90      	pop	{r4, r7, pc}
 800521a:	bf00      	nop
 800521c:	20000404 	.word	0x20000404

08005220 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3301      	adds	r3, #1
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005230:	89fb      	ldrh	r3, [r7, #14]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	b21a      	sxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	b21b      	sxth	r3, r3
 800523c:	4313      	orrs	r3, r2
 800523e:	b21b      	sxth	r3, r3
 8005240:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005242:	89fb      	ldrh	r3, [r7, #14]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3303      	adds	r3, #3
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	3202      	adds	r2, #2
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	3201      	adds	r2, #1
 8005276:	7812      	ldrb	r2, [r2, #0]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	7812      	ldrb	r2, [r2, #0]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
	return rv;
 8005288:	68fb      	ldr	r3, [r7, #12]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e010      	b.n	80052c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80052a6:	4a0d      	ldr	r2, [pc, #52]	; (80052dc <clear_lock+0x44>)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	4413      	add	r3, r2
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d105      	bne.n	80052c2 <clear_lock+0x2a>
 80052b6:	4a09      	ldr	r2, [pc, #36]	; (80052dc <clear_lock+0x44>)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	4413      	add	r3, r2
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3301      	adds	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d9eb      	bls.n	80052a6 <clear_lock+0xe>
	}
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	200003e4 	.word	0x200003e4

080052e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	78db      	ldrb	r3, [r3, #3]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d034      	beq.n	800535e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7858      	ldrb	r0, [r3, #1]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005304:	2301      	movs	r3, #1
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	f7ff ff6a 	bl	80051e0 <disk_write>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005312:	2301      	movs	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
 8005316:	e022      	b.n	800535e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	1ad2      	subs	r2, r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	429a      	cmp	r2, r3
 800532c:	d217      	bcs.n	800535e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	789b      	ldrb	r3, [r3, #2]
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	e010      	b.n	8005358 <sync_window+0x78>
					wsect += fs->fsize;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4413      	add	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7858      	ldrb	r0, [r3, #1]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800534a:	2301      	movs	r3, #1
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	f7ff ff47 	bl	80051e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	3b01      	subs	r3, #1
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d8eb      	bhi.n	8005336 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d01b      	beq.n	80053b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7ff ffad 	bl	80052e0 <sync_window>
 8005386:	4603      	mov	r3, r0
 8005388:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d113      	bne.n	80053b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	7858      	ldrb	r0, [r3, #1]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800539a:	2301      	movs	r3, #1
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	f7ff feff 	bl	80051a0 <disk_read>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d004      	beq.n	80053b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b087      	sub	sp, #28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80053ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d031      	beq.n	800543c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	e002      	b.n	80053e6 <get_ldnumber+0x24>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	3301      	adds	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d903      	bls.n	80053f6 <get_ldnumber+0x34>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b3a      	cmp	r3, #58	; 0x3a
 80053f4:	d1f4      	bne.n	80053e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b3a      	cmp	r3, #58	; 0x3a
 80053fc:	d11c      	bne.n	8005438 <get_ldnumber+0x76>
			tp = *path;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	60fa      	str	r2, [r7, #12]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	3b30      	subs	r3, #48	; 0x30
 800540e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b09      	cmp	r3, #9
 8005414:	d80e      	bhi.n	8005434 <get_ldnumber+0x72>
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	429a      	cmp	r2, r3
 800541c:	d10a      	bne.n	8005434 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d107      	bne.n	8005434 <get_ldnumber+0x72>
					vol = (int)i;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	3301      	adds	r3, #1
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	e002      	b.n	800543e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005438:	2300      	movs	r3, #0
 800543a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800543c:	693b      	ldr	r3, [r7, #16]
}
 800543e:	4618      	mov	r0, r3
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	70da      	strb	r2, [r3, #3]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005462:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005464:	6839      	ldr	r1, [r7, #0]
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff ff7e 	bl	8005368 <move_window>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <check_fs+0x2a>
 8005472:	2304      	movs	r3, #4
 8005474:	e038      	b.n	80054e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3330      	adds	r3, #48	; 0x30
 800547a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fece 	bl	8005220 <ld_word>
 8005484:	4603      	mov	r3, r0
 8005486:	461a      	mov	r2, r3
 8005488:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800548c:	429a      	cmp	r2, r3
 800548e:	d001      	beq.n	8005494 <check_fs+0x48>
 8005490:	2303      	movs	r3, #3
 8005492:	e029      	b.n	80054e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800549a:	2be9      	cmp	r3, #233	; 0xe9
 800549c:	d009      	beq.n	80054b2 <check_fs+0x66>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054a4:	2beb      	cmp	r3, #235	; 0xeb
 80054a6:	d11e      	bne.n	80054e6 <check_fs+0x9a>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80054ae:	2b90      	cmp	r3, #144	; 0x90
 80054b0:	d119      	bne.n	80054e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3330      	adds	r3, #48	; 0x30
 80054b6:	3336      	adds	r3, #54	; 0x36
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fec9 	bl	8005250 <ld_dword>
 80054be:	4603      	mov	r3, r0
 80054c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054c4:	4a0a      	ldr	r2, [pc, #40]	; (80054f0 <check_fs+0xa4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d101      	bne.n	80054ce <check_fs+0x82>
 80054ca:	2300      	movs	r3, #0
 80054cc:	e00c      	b.n	80054e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3330      	adds	r3, #48	; 0x30
 80054d2:	3352      	adds	r3, #82	; 0x52
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff febb 	bl	8005250 <ld_dword>
 80054da:	4603      	mov	r3, r0
 80054dc:	4a05      	ldr	r2, [pc, #20]	; (80054f4 <check_fs+0xa8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d101      	bne.n	80054e6 <check_fs+0x9a>
 80054e2:	2300      	movs	r3, #0
 80054e4:	e000      	b.n	80054e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80054e6:	2302      	movs	r3, #2
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	00544146 	.word	0x00544146
 80054f4:	33544146 	.word	0x33544146

080054f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b096      	sub	sp, #88	; 0x58
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	4613      	mov	r3, r2
 8005504:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f7ff ff58 	bl	80053c2 <get_ldnumber>
 8005512:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005516:	2b00      	cmp	r3, #0
 8005518:	da01      	bge.n	800551e <find_volume+0x26>
 800551a:	230b      	movs	r3, #11
 800551c:	e22e      	b.n	800597c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800551e:	4aa8      	ldr	r2, [pc, #672]	; (80057c0 <find_volume+0x2c8>)
 8005520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005526:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <find_volume+0x3a>
 800552e:	230c      	movs	r3, #12
 8005530:	e224      	b.n	800597c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005536:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	f023 0301 	bic.w	r3, r3, #1
 800553e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01a      	beq.n	800557e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fde7 	bl	8005120 <disk_status>
 8005552:	4603      	mov	r3, r0
 8005554:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005558:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10c      	bne.n	800557e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <find_volume+0x82>
 800556a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005576:	230a      	movs	r3, #10
 8005578:	e200      	b.n	800597c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800557a:	2300      	movs	r3, #0
 800557c:	e1fe      	b.n	800597c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005586:	b2da      	uxtb	r2, r3
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff fddf 	bl	8005154 <disk_initialize>
 8005596:	4603      	mov	r3, r0
 8005598:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800559c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80055a8:	2303      	movs	r3, #3
 80055aa:	e1e7      	b.n	800597c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <find_volume+0xca>
 80055b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80055be:	230a      	movs	r3, #10
 80055c0:	e1dc      	b.n	800597c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80055c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055ca:	f7ff ff3f 	bl	800544c <check_fs>
 80055ce:	4603      	mov	r3, r0
 80055d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80055d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d14b      	bne.n	8005674 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80055dc:	2300      	movs	r3, #0
 80055de:	643b      	str	r3, [r7, #64]	; 0x40
 80055e0:	e01f      	b.n	8005622 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80055e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80055f0:	4413      	add	r3, r2
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	3304      	adds	r3, #4
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d006      	beq.n	800560c <find_volume+0x114>
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	3308      	adds	r3, #8
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff fe24 	bl	8005250 <ld_dword>
 8005608:	4602      	mov	r2, r0
 800560a:	e000      	b.n	800560e <find_volume+0x116>
 800560c:	2200      	movs	r2, #0
 800560e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005616:	440b      	add	r3, r1
 8005618:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800561c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561e:	3301      	adds	r3, #1
 8005620:	643b      	str	r3, [r7, #64]	; 0x40
 8005622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005624:	2b03      	cmp	r3, #3
 8005626:	d9dc      	bls.n	80055e2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005628:	2300      	movs	r3, #0
 800562a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800562c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <find_volume+0x140>
 8005632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005634:	3b01      	subs	r3, #1
 8005636:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005640:	4413      	add	r3, r2
 8005642:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005646:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <find_volume+0x162>
 800564e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005650:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005652:	f7ff fefb 	bl	800544c <check_fs>
 8005656:	4603      	mov	r3, r0
 8005658:	e000      	b.n	800565c <find_volume+0x164>
 800565a:	2303      	movs	r3, #3
 800565c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005660:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005664:	2b01      	cmp	r3, #1
 8005666:	d905      	bls.n	8005674 <find_volume+0x17c>
 8005668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566a:	3301      	adds	r3, #1
 800566c:	643b      	str	r3, [r7, #64]	; 0x40
 800566e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005670:	2b03      	cmp	r3, #3
 8005672:	d9e1      	bls.n	8005638 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005674:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005678:	2b04      	cmp	r3, #4
 800567a:	d101      	bne.n	8005680 <find_volume+0x188>
 800567c:	2301      	movs	r3, #1
 800567e:	e17d      	b.n	800597c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005680:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005684:	2b01      	cmp	r3, #1
 8005686:	d901      	bls.n	800568c <find_volume+0x194>
 8005688:	230d      	movs	r3, #13
 800568a:	e177      	b.n	800597c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	3330      	adds	r3, #48	; 0x30
 8005690:	330b      	adds	r3, #11
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fdc4 	bl	8005220 <ld_word>
 8005698:	4603      	mov	r3, r0
 800569a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800569e:	d001      	beq.n	80056a4 <find_volume+0x1ac>
 80056a0:	230d      	movs	r3, #13
 80056a2:	e16b      	b.n	800597c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	3330      	adds	r3, #48	; 0x30
 80056a8:	3316      	adds	r3, #22
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fdb8 	bl	8005220 <ld_word>
 80056b0:	4603      	mov	r3, r0
 80056b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80056b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <find_volume+0x1d0>
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	3330      	adds	r3, #48	; 0x30
 80056be:	3324      	adds	r3, #36	; 0x24
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fdc5 	bl	8005250 <ld_dword>
 80056c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056cc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	789b      	ldrb	r3, [r3, #2]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d005      	beq.n	80056ec <find_volume+0x1f4>
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	789b      	ldrb	r3, [r3, #2]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d001      	beq.n	80056ec <find_volume+0x1f4>
 80056e8:	230d      	movs	r3, #13
 80056ea:	e147      	b.n	800597c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	789b      	ldrb	r3, [r3, #2]
 80056f0:	461a      	mov	r2, r3
 80056f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f4:	fb02 f303 	mul.w	r3, r2, r3
 80056f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005700:	b29a      	uxth	r2, r3
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	895b      	ldrh	r3, [r3, #10]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <find_volume+0x228>
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	895b      	ldrh	r3, [r3, #10]
 8005712:	461a      	mov	r2, r3
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	895b      	ldrh	r3, [r3, #10]
 8005718:	3b01      	subs	r3, #1
 800571a:	4013      	ands	r3, r2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <find_volume+0x22c>
 8005720:	230d      	movs	r3, #13
 8005722:	e12b      	b.n	800597c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	3330      	adds	r3, #48	; 0x30
 8005728:	3311      	adds	r3, #17
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fd78 	bl	8005220 <ld_word>
 8005730:	4603      	mov	r3, r0
 8005732:	461a      	mov	r2, r3
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	891b      	ldrh	r3, [r3, #8]
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <find_volume+0x252>
 8005746:	230d      	movs	r3, #13
 8005748:	e118      	b.n	800597c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	3330      	adds	r3, #48	; 0x30
 800574e:	3313      	adds	r3, #19
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fd65 	bl	8005220 <ld_word>
 8005756:	4603      	mov	r3, r0
 8005758:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800575a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <find_volume+0x276>
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	3330      	adds	r3, #48	; 0x30
 8005764:	3320      	adds	r3, #32
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fd72 	bl	8005250 <ld_dword>
 800576c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	3330      	adds	r3, #48	; 0x30
 8005772:	330e      	adds	r3, #14
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fd53 	bl	8005220 <ld_word>
 800577a:	4603      	mov	r3, r0
 800577c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800577e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <find_volume+0x290>
 8005784:	230d      	movs	r3, #13
 8005786:	e0f9      	b.n	800597c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005788:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800578a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578c:	4413      	add	r3, r2
 800578e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005790:	8912      	ldrh	r2, [r2, #8]
 8005792:	0912      	lsrs	r2, r2, #4
 8005794:	b292      	uxth	r2, r2
 8005796:	4413      	add	r3, r2
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800579a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	429a      	cmp	r2, r3
 80057a0:	d201      	bcs.n	80057a6 <find_volume+0x2ae>
 80057a2:	230d      	movs	r3, #13
 80057a4:	e0ea      	b.n	800597c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80057a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057ae:	8952      	ldrh	r2, [r2, #10]
 80057b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d103      	bne.n	80057c4 <find_volume+0x2cc>
 80057bc:	230d      	movs	r3, #13
 80057be:	e0dd      	b.n	800597c <find_volume+0x484>
 80057c0:	200003dc 	.word	0x200003dc
		fmt = FS_FAT32;
 80057c4:	2303      	movs	r3, #3
 80057c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d802      	bhi.n	80057da <find_volume+0x2e2>
 80057d4:	2302      	movs	r3, #2
 80057d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d802      	bhi.n	80057ea <find_volume+0x2f2>
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	1c9a      	adds	r2, r3, #2
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057f6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80057f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80057fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fc:	441a      	add	r2, r3
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005802:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	441a      	add	r2, r3
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800580c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005810:	2b03      	cmp	r3, #3
 8005812:	d11e      	bne.n	8005852 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	3330      	adds	r3, #48	; 0x30
 8005818:	332a      	adds	r3, #42	; 0x2a
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fd00 	bl	8005220 <ld_word>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <find_volume+0x332>
 8005826:	230d      	movs	r3, #13
 8005828:	e0a8      	b.n	800597c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	891b      	ldrh	r3, [r3, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <find_volume+0x33e>
 8005832:	230d      	movs	r3, #13
 8005834:	e0a2      	b.n	800597c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	3330      	adds	r3, #48	; 0x30
 800583a:	332c      	adds	r3, #44	; 0x2c
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff fd07 	bl	8005250 <ld_dword>
 8005842:	4602      	mov	r2, r0
 8005844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005846:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	647b      	str	r3, [r7, #68]	; 0x44
 8005850:	e01f      	b.n	8005892 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	891b      	ldrh	r3, [r3, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <find_volume+0x366>
 800585a:	230d      	movs	r3, #13
 800585c:	e08e      	b.n	800597c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	6a1a      	ldr	r2, [r3, #32]
 8005862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005864:	441a      	add	r2, r3
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800586a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800586e:	2b02      	cmp	r3, #2
 8005870:	d103      	bne.n	800587a <find_volume+0x382>
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	e00a      	b.n	8005890 <find_volume+0x398>
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	695a      	ldr	r2, [r3, #20]
 800587e:	4613      	mov	r3, r2
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	4413      	add	r3, r2
 8005884:	085a      	lsrs	r2, r3, #1
 8005886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005890:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005898:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800589c:	0a5b      	lsrs	r3, r3, #9
 800589e:	429a      	cmp	r2, r3
 80058a0:	d201      	bcs.n	80058a6 <find_volume+0x3ae>
 80058a2:	230d      	movs	r3, #13
 80058a4:	e06a      	b.n	800597c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058ac:	611a      	str	r2, [r3, #16]
 80058ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b8:	2280      	movs	r2, #128	; 0x80
 80058ba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80058bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d149      	bne.n	8005958 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	3330      	adds	r3, #48	; 0x30
 80058c8:	3330      	adds	r3, #48	; 0x30
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff fca8 	bl	8005220 <ld_word>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d140      	bne.n	8005958 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80058d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d8:	3301      	adds	r3, #1
 80058da:	4619      	mov	r1, r3
 80058dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058de:	f7ff fd43 	bl	8005368 <move_window>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d137      	bne.n	8005958 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	2200      	movs	r2, #0
 80058ec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80058ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f0:	3330      	adds	r3, #48	; 0x30
 80058f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fc92 	bl	8005220 <ld_word>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005904:	429a      	cmp	r2, r3
 8005906:	d127      	bne.n	8005958 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	3330      	adds	r3, #48	; 0x30
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff fc9f 	bl	8005250 <ld_dword>
 8005912:	4603      	mov	r3, r0
 8005914:	4a1b      	ldr	r2, [pc, #108]	; (8005984 <find_volume+0x48c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d11e      	bne.n	8005958 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	3330      	adds	r3, #48	; 0x30
 800591e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff fc94 	bl	8005250 <ld_dword>
 8005928:	4603      	mov	r3, r0
 800592a:	4a17      	ldr	r2, [pc, #92]	; (8005988 <find_volume+0x490>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d113      	bne.n	8005958 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	3330      	adds	r3, #48	; 0x30
 8005934:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff fc89 	bl	8005250 <ld_dword>
 800593e:	4602      	mov	r2, r0
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005946:	3330      	adds	r3, #48	; 0x30
 8005948:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fc7f 	bl	8005250 <ld_dword>
 8005952:	4602      	mov	r2, r0
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800595e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005960:	4b0a      	ldr	r3, [pc, #40]	; (800598c <find_volume+0x494>)
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	4b08      	ldr	r3, [pc, #32]	; (800598c <find_volume+0x494>)
 800596a:	801a      	strh	r2, [r3, #0]
 800596c:	4b07      	ldr	r3, [pc, #28]	; (800598c <find_volume+0x494>)
 800596e:	881a      	ldrh	r2, [r3, #0]
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005974:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005976:	f7ff fc8f 	bl	8005298 <clear_lock>
#endif
	return FR_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3758      	adds	r7, #88	; 0x58
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	41615252 	.word	0x41615252
 8005988:	61417272 	.word	0x61417272
 800598c:	200003e0 	.word	0x200003e0

08005990 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	4613      	mov	r3, r2
 800599c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80059a2:	f107 0310 	add.w	r3, r7, #16
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff fd0b 	bl	80053c2 <get_ldnumber>
 80059ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	da01      	bge.n	80059b8 <f_mount+0x28>
 80059b4:	230b      	movs	r3, #11
 80059b6:	e02b      	b.n	8005a10 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80059b8:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <f_mount+0x88>)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80059c8:	69b8      	ldr	r0, [r7, #24]
 80059ca:	f7ff fc65 	bl	8005298 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	490d      	ldr	r1, [pc, #52]	; (8005a18 <f_mount+0x88>)
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <f_mount+0x66>
 80059f0:	79fb      	ldrb	r3, [r7, #7]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d001      	beq.n	80059fa <f_mount+0x6a>
 80059f6:	2300      	movs	r3, #0
 80059f8:	e00a      	b.n	8005a10 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80059fa:	f107 010c 	add.w	r1, r7, #12
 80059fe:	f107 0308 	add.w	r3, r7, #8
 8005a02:	2200      	movs	r2, #0
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff fd77 	bl	80054f8 <find_volume>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3720      	adds	r7, #32
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	200003dc 	.word	0x200003dc

08005a1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	4613      	mov	r3, r2
 8005a28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005a32:	4b1f      	ldr	r3, [pc, #124]	; (8005ab0 <FATFS_LinkDriverEx+0x94>)
 8005a34:	7a5b      	ldrb	r3, [r3, #9]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d131      	bne.n	8005aa0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005a3c:	4b1c      	ldr	r3, [pc, #112]	; (8005ab0 <FATFS_LinkDriverEx+0x94>)
 8005a3e:	7a5b      	ldrb	r3, [r3, #9]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <FATFS_LinkDriverEx+0x94>)
 8005a46:	2100      	movs	r1, #0
 8005a48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005a4a:	4b19      	ldr	r3, [pc, #100]	; (8005ab0 <FATFS_LinkDriverEx+0x94>)
 8005a4c:	7a5b      	ldrb	r3, [r3, #9]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	4a17      	ldr	r2, [pc, #92]	; (8005ab0 <FATFS_LinkDriverEx+0x94>)
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005a5a:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <FATFS_LinkDriverEx+0x94>)
 8005a5c:	7a5b      	ldrb	r3, [r3, #9]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <FATFS_LinkDriverEx+0x94>)
 8005a64:	4413      	add	r3, r2
 8005a66:	79fa      	ldrb	r2, [r7, #7]
 8005a68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005a6a:	4b11      	ldr	r3, [pc, #68]	; (8005ab0 <FATFS_LinkDriverEx+0x94>)
 8005a6c:	7a5b      	ldrb	r3, [r3, #9]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	b2d1      	uxtb	r1, r2
 8005a74:	4a0e      	ldr	r2, [pc, #56]	; (8005ab0 <FATFS_LinkDriverEx+0x94>)
 8005a76:	7251      	strb	r1, [r2, #9]
 8005a78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005a7a:	7dbb      	ldrb	r3, [r7, #22]
 8005a7c:	3330      	adds	r3, #48	; 0x30
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	3301      	adds	r3, #1
 8005a88:	223a      	movs	r2, #58	; 0x3a
 8005a8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	3302      	adds	r3, #2
 8005a90:	222f      	movs	r2, #47	; 0x2f
 8005a92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	3303      	adds	r3, #3
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	20000404 	.word	0x20000404

08005ab4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005abe:	2200      	movs	r2, #0
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff ffaa 	bl	8005a1c <FATFS_LinkDriverEx>
 8005ac8:	4603      	mov	r3, r0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <__errno>:
 8005ad4:	4b01      	ldr	r3, [pc, #4]	; (8005adc <__errno+0x8>)
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	20000024 	.word	0x20000024

08005ae0 <__libc_init_array>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	4d0d      	ldr	r5, [pc, #52]	; (8005b18 <__libc_init_array+0x38>)
 8005ae4:	4c0d      	ldr	r4, [pc, #52]	; (8005b1c <__libc_init_array+0x3c>)
 8005ae6:	1b64      	subs	r4, r4, r5
 8005ae8:	10a4      	asrs	r4, r4, #2
 8005aea:	2600      	movs	r6, #0
 8005aec:	42a6      	cmp	r6, r4
 8005aee:	d109      	bne.n	8005b04 <__libc_init_array+0x24>
 8005af0:	4d0b      	ldr	r5, [pc, #44]	; (8005b20 <__libc_init_array+0x40>)
 8005af2:	4c0c      	ldr	r4, [pc, #48]	; (8005b24 <__libc_init_array+0x44>)
 8005af4:	f000 fc68 	bl	80063c8 <_init>
 8005af8:	1b64      	subs	r4, r4, r5
 8005afa:	10a4      	asrs	r4, r4, #2
 8005afc:	2600      	movs	r6, #0
 8005afe:	42a6      	cmp	r6, r4
 8005b00:	d105      	bne.n	8005b0e <__libc_init_array+0x2e>
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
 8005b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b08:	4798      	blx	r3
 8005b0a:	3601      	adds	r6, #1
 8005b0c:	e7ee      	b.n	8005aec <__libc_init_array+0xc>
 8005b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b12:	4798      	blx	r3
 8005b14:	3601      	adds	r6, #1
 8005b16:	e7f2      	b.n	8005afe <__libc_init_array+0x1e>
 8005b18:	08006528 	.word	0x08006528
 8005b1c:	08006528 	.word	0x08006528
 8005b20:	08006528 	.word	0x08006528
 8005b24:	0800652c 	.word	0x0800652c

08005b28 <memset>:
 8005b28:	4402      	add	r2, r0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d100      	bne.n	8005b32 <memset+0xa>
 8005b30:	4770      	bx	lr
 8005b32:	f803 1b01 	strb.w	r1, [r3], #1
 8005b36:	e7f9      	b.n	8005b2c <memset+0x4>

08005b38 <_vsniprintf_r>:
 8005b38:	b530      	push	{r4, r5, lr}
 8005b3a:	1e14      	subs	r4, r2, #0
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	b09b      	sub	sp, #108	; 0x6c
 8005b40:	4618      	mov	r0, r3
 8005b42:	da05      	bge.n	8005b50 <_vsniprintf_r+0x18>
 8005b44:	238b      	movs	r3, #139	; 0x8b
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b4c:	b01b      	add	sp, #108	; 0x6c
 8005b4e:	bd30      	pop	{r4, r5, pc}
 8005b50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005b58:	bf14      	ite	ne
 8005b5a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005b5e:	4623      	moveq	r3, r4
 8005b60:	9302      	str	r3, [sp, #8]
 8005b62:	9305      	str	r3, [sp, #20]
 8005b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b68:	9100      	str	r1, [sp, #0]
 8005b6a:	9104      	str	r1, [sp, #16]
 8005b6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005b70:	4602      	mov	r2, r0
 8005b72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b74:	4669      	mov	r1, sp
 8005b76:	4628      	mov	r0, r5
 8005b78:	f000 f874 	bl	8005c64 <_svfiprintf_r>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	bfbc      	itt	lt
 8005b80:	238b      	movlt	r3, #139	; 0x8b
 8005b82:	602b      	strlt	r3, [r5, #0]
 8005b84:	2c00      	cmp	r4, #0
 8005b86:	d0e1      	beq.n	8005b4c <_vsniprintf_r+0x14>
 8005b88:	9b00      	ldr	r3, [sp, #0]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	e7dd      	b.n	8005b4c <_vsniprintf_r+0x14>

08005b90 <vsniprintf>:
 8005b90:	b507      	push	{r0, r1, r2, lr}
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	4613      	mov	r3, r2
 8005b96:	460a      	mov	r2, r1
 8005b98:	4601      	mov	r1, r0
 8005b9a:	4803      	ldr	r0, [pc, #12]	; (8005ba8 <vsniprintf+0x18>)
 8005b9c:	6800      	ldr	r0, [r0, #0]
 8005b9e:	f7ff ffcb 	bl	8005b38 <_vsniprintf_r>
 8005ba2:	b003      	add	sp, #12
 8005ba4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ba8:	20000024 	.word	0x20000024

08005bac <__ssputs_r>:
 8005bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	688e      	ldr	r6, [r1, #8]
 8005bb2:	429e      	cmp	r6, r3
 8005bb4:	4682      	mov	sl, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	4690      	mov	r8, r2
 8005bba:	461f      	mov	r7, r3
 8005bbc:	d838      	bhi.n	8005c30 <__ssputs_r+0x84>
 8005bbe:	898a      	ldrh	r2, [r1, #12]
 8005bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bc4:	d032      	beq.n	8005c2c <__ssputs_r+0x80>
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	6909      	ldr	r1, [r1, #16]
 8005bca:	eba5 0901 	sub.w	r9, r5, r1
 8005bce:	6965      	ldr	r5, [r4, #20]
 8005bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bd8:	3301      	adds	r3, #1
 8005bda:	444b      	add	r3, r9
 8005bdc:	106d      	asrs	r5, r5, #1
 8005bde:	429d      	cmp	r5, r3
 8005be0:	bf38      	it	cc
 8005be2:	461d      	movcc	r5, r3
 8005be4:	0553      	lsls	r3, r2, #21
 8005be6:	d531      	bpl.n	8005c4c <__ssputs_r+0xa0>
 8005be8:	4629      	mov	r1, r5
 8005bea:	f000 fb47 	bl	800627c <_malloc_r>
 8005bee:	4606      	mov	r6, r0
 8005bf0:	b950      	cbnz	r0, 8005c08 <__ssputs_r+0x5c>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	f8ca 3000 	str.w	r3, [sl]
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bfe:	81a3      	strh	r3, [r4, #12]
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c08:	6921      	ldr	r1, [r4, #16]
 8005c0a:	464a      	mov	r2, r9
 8005c0c:	f000 fabe 	bl	800618c <memcpy>
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1a:	81a3      	strh	r3, [r4, #12]
 8005c1c:	6126      	str	r6, [r4, #16]
 8005c1e:	6165      	str	r5, [r4, #20]
 8005c20:	444e      	add	r6, r9
 8005c22:	eba5 0509 	sub.w	r5, r5, r9
 8005c26:	6026      	str	r6, [r4, #0]
 8005c28:	60a5      	str	r5, [r4, #8]
 8005c2a:	463e      	mov	r6, r7
 8005c2c:	42be      	cmp	r6, r7
 8005c2e:	d900      	bls.n	8005c32 <__ssputs_r+0x86>
 8005c30:	463e      	mov	r6, r7
 8005c32:	4632      	mov	r2, r6
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	4641      	mov	r1, r8
 8005c38:	f000 fab6 	bl	80061a8 <memmove>
 8005c3c:	68a3      	ldr	r3, [r4, #8]
 8005c3e:	6822      	ldr	r2, [r4, #0]
 8005c40:	1b9b      	subs	r3, r3, r6
 8005c42:	4432      	add	r2, r6
 8005c44:	60a3      	str	r3, [r4, #8]
 8005c46:	6022      	str	r2, [r4, #0]
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e7db      	b.n	8005c04 <__ssputs_r+0x58>
 8005c4c:	462a      	mov	r2, r5
 8005c4e:	f000 fb6f 	bl	8006330 <_realloc_r>
 8005c52:	4606      	mov	r6, r0
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1e1      	bne.n	8005c1c <__ssputs_r+0x70>
 8005c58:	6921      	ldr	r1, [r4, #16]
 8005c5a:	4650      	mov	r0, sl
 8005c5c:	f000 fabe 	bl	80061dc <_free_r>
 8005c60:	e7c7      	b.n	8005bf2 <__ssputs_r+0x46>
	...

08005c64 <_svfiprintf_r>:
 8005c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c68:	4698      	mov	r8, r3
 8005c6a:	898b      	ldrh	r3, [r1, #12]
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	b09d      	sub	sp, #116	; 0x74
 8005c70:	4607      	mov	r7, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	4614      	mov	r4, r2
 8005c76:	d50e      	bpl.n	8005c96 <_svfiprintf_r+0x32>
 8005c78:	690b      	ldr	r3, [r1, #16]
 8005c7a:	b963      	cbnz	r3, 8005c96 <_svfiprintf_r+0x32>
 8005c7c:	2140      	movs	r1, #64	; 0x40
 8005c7e:	f000 fafd 	bl	800627c <_malloc_r>
 8005c82:	6028      	str	r0, [r5, #0]
 8005c84:	6128      	str	r0, [r5, #16]
 8005c86:	b920      	cbnz	r0, 8005c92 <_svfiprintf_r+0x2e>
 8005c88:	230c      	movs	r3, #12
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c90:	e0d1      	b.n	8005e36 <_svfiprintf_r+0x1d2>
 8005c92:	2340      	movs	r3, #64	; 0x40
 8005c94:	616b      	str	r3, [r5, #20]
 8005c96:	2300      	movs	r3, #0
 8005c98:	9309      	str	r3, [sp, #36]	; 0x24
 8005c9a:	2320      	movs	r3, #32
 8005c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ca4:	2330      	movs	r3, #48	; 0x30
 8005ca6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e50 <_svfiprintf_r+0x1ec>
 8005caa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cae:	f04f 0901 	mov.w	r9, #1
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	469a      	mov	sl, r3
 8005cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cba:	b10a      	cbz	r2, 8005cc0 <_svfiprintf_r+0x5c>
 8005cbc:	2a25      	cmp	r2, #37	; 0x25
 8005cbe:	d1f9      	bne.n	8005cb4 <_svfiprintf_r+0x50>
 8005cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8005cc4:	d00b      	beq.n	8005cde <_svfiprintf_r+0x7a>
 8005cc6:	465b      	mov	r3, fp
 8005cc8:	4622      	mov	r2, r4
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7ff ff6d 	bl	8005bac <__ssputs_r>
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f000 80aa 	beq.w	8005e2c <_svfiprintf_r+0x1c8>
 8005cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cda:	445a      	add	r2, fp
 8005cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8005cde:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 80a2 	beq.w	8005e2c <_svfiprintf_r+0x1c8>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cf2:	f10a 0a01 	add.w	sl, sl, #1
 8005cf6:	9304      	str	r3, [sp, #16]
 8005cf8:	9307      	str	r3, [sp, #28]
 8005cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8005d00:	4654      	mov	r4, sl
 8005d02:	2205      	movs	r2, #5
 8005d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d08:	4851      	ldr	r0, [pc, #324]	; (8005e50 <_svfiprintf_r+0x1ec>)
 8005d0a:	f7fa fa69 	bl	80001e0 <memchr>
 8005d0e:	9a04      	ldr	r2, [sp, #16]
 8005d10:	b9d8      	cbnz	r0, 8005d4a <_svfiprintf_r+0xe6>
 8005d12:	06d0      	lsls	r0, r2, #27
 8005d14:	bf44      	itt	mi
 8005d16:	2320      	movmi	r3, #32
 8005d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d1c:	0711      	lsls	r1, r2, #28
 8005d1e:	bf44      	itt	mi
 8005d20:	232b      	movmi	r3, #43	; 0x2b
 8005d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d26:	f89a 3000 	ldrb.w	r3, [sl]
 8005d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d2c:	d015      	beq.n	8005d5a <_svfiprintf_r+0xf6>
 8005d2e:	9a07      	ldr	r2, [sp, #28]
 8005d30:	4654      	mov	r4, sl
 8005d32:	2000      	movs	r0, #0
 8005d34:	f04f 0c0a 	mov.w	ip, #10
 8005d38:	4621      	mov	r1, r4
 8005d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d3e:	3b30      	subs	r3, #48	; 0x30
 8005d40:	2b09      	cmp	r3, #9
 8005d42:	d94e      	bls.n	8005de2 <_svfiprintf_r+0x17e>
 8005d44:	b1b0      	cbz	r0, 8005d74 <_svfiprintf_r+0x110>
 8005d46:	9207      	str	r2, [sp, #28]
 8005d48:	e014      	b.n	8005d74 <_svfiprintf_r+0x110>
 8005d4a:	eba0 0308 	sub.w	r3, r0, r8
 8005d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8005d52:	4313      	orrs	r3, r2
 8005d54:	9304      	str	r3, [sp, #16]
 8005d56:	46a2      	mov	sl, r4
 8005d58:	e7d2      	b.n	8005d00 <_svfiprintf_r+0x9c>
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	1d19      	adds	r1, r3, #4
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	9103      	str	r1, [sp, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bfbb      	ittet	lt
 8005d66:	425b      	neglt	r3, r3
 8005d68:	f042 0202 	orrlt.w	r2, r2, #2
 8005d6c:	9307      	strge	r3, [sp, #28]
 8005d6e:	9307      	strlt	r3, [sp, #28]
 8005d70:	bfb8      	it	lt
 8005d72:	9204      	strlt	r2, [sp, #16]
 8005d74:	7823      	ldrb	r3, [r4, #0]
 8005d76:	2b2e      	cmp	r3, #46	; 0x2e
 8005d78:	d10c      	bne.n	8005d94 <_svfiprintf_r+0x130>
 8005d7a:	7863      	ldrb	r3, [r4, #1]
 8005d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d7e:	d135      	bne.n	8005dec <_svfiprintf_r+0x188>
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	1d1a      	adds	r2, r3, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	9203      	str	r2, [sp, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bfb8      	it	lt
 8005d8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d90:	3402      	adds	r4, #2
 8005d92:	9305      	str	r3, [sp, #20]
 8005d94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e60 <_svfiprintf_r+0x1fc>
 8005d98:	7821      	ldrb	r1, [r4, #0]
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	4650      	mov	r0, sl
 8005d9e:	f7fa fa1f 	bl	80001e0 <memchr>
 8005da2:	b140      	cbz	r0, 8005db6 <_svfiprintf_r+0x152>
 8005da4:	2340      	movs	r3, #64	; 0x40
 8005da6:	eba0 000a 	sub.w	r0, r0, sl
 8005daa:	fa03 f000 	lsl.w	r0, r3, r0
 8005dae:	9b04      	ldr	r3, [sp, #16]
 8005db0:	4303      	orrs	r3, r0
 8005db2:	3401      	adds	r4, #1
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dba:	4826      	ldr	r0, [pc, #152]	; (8005e54 <_svfiprintf_r+0x1f0>)
 8005dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dc0:	2206      	movs	r2, #6
 8005dc2:	f7fa fa0d 	bl	80001e0 <memchr>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d038      	beq.n	8005e3c <_svfiprintf_r+0x1d8>
 8005dca:	4b23      	ldr	r3, [pc, #140]	; (8005e58 <_svfiprintf_r+0x1f4>)
 8005dcc:	bb1b      	cbnz	r3, 8005e16 <_svfiprintf_r+0x1b2>
 8005dce:	9b03      	ldr	r3, [sp, #12]
 8005dd0:	3307      	adds	r3, #7
 8005dd2:	f023 0307 	bic.w	r3, r3, #7
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	9303      	str	r3, [sp, #12]
 8005dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ddc:	4433      	add	r3, r6
 8005dde:	9309      	str	r3, [sp, #36]	; 0x24
 8005de0:	e767      	b.n	8005cb2 <_svfiprintf_r+0x4e>
 8005de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005de6:	460c      	mov	r4, r1
 8005de8:	2001      	movs	r0, #1
 8005dea:	e7a5      	b.n	8005d38 <_svfiprintf_r+0xd4>
 8005dec:	2300      	movs	r3, #0
 8005dee:	3401      	adds	r4, #1
 8005df0:	9305      	str	r3, [sp, #20]
 8005df2:	4619      	mov	r1, r3
 8005df4:	f04f 0c0a 	mov.w	ip, #10
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dfe:	3a30      	subs	r2, #48	; 0x30
 8005e00:	2a09      	cmp	r2, #9
 8005e02:	d903      	bls.n	8005e0c <_svfiprintf_r+0x1a8>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0c5      	beq.n	8005d94 <_svfiprintf_r+0x130>
 8005e08:	9105      	str	r1, [sp, #20]
 8005e0a:	e7c3      	b.n	8005d94 <_svfiprintf_r+0x130>
 8005e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e10:	4604      	mov	r4, r0
 8005e12:	2301      	movs	r3, #1
 8005e14:	e7f0      	b.n	8005df8 <_svfiprintf_r+0x194>
 8005e16:	ab03      	add	r3, sp, #12
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	462a      	mov	r2, r5
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <_svfiprintf_r+0x1f8>)
 8005e1e:	a904      	add	r1, sp, #16
 8005e20:	4638      	mov	r0, r7
 8005e22:	f3af 8000 	nop.w
 8005e26:	1c42      	adds	r2, r0, #1
 8005e28:	4606      	mov	r6, r0
 8005e2a:	d1d6      	bne.n	8005dda <_svfiprintf_r+0x176>
 8005e2c:	89ab      	ldrh	r3, [r5, #12]
 8005e2e:	065b      	lsls	r3, r3, #25
 8005e30:	f53f af2c 	bmi.w	8005c8c <_svfiprintf_r+0x28>
 8005e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e36:	b01d      	add	sp, #116	; 0x74
 8005e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3c:	ab03      	add	r3, sp, #12
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	462a      	mov	r2, r5
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <_svfiprintf_r+0x1f8>)
 8005e44:	a904      	add	r1, sp, #16
 8005e46:	4638      	mov	r0, r7
 8005e48:	f000 f87a 	bl	8005f40 <_printf_i>
 8005e4c:	e7eb      	b.n	8005e26 <_svfiprintf_r+0x1c2>
 8005e4e:	bf00      	nop
 8005e50:	080064ec 	.word	0x080064ec
 8005e54:	080064f6 	.word	0x080064f6
 8005e58:	00000000 	.word	0x00000000
 8005e5c:	08005bad 	.word	0x08005bad
 8005e60:	080064f2 	.word	0x080064f2

08005e64 <_printf_common>:
 8005e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e68:	4616      	mov	r6, r2
 8005e6a:	4699      	mov	r9, r3
 8005e6c:	688a      	ldr	r2, [r1, #8]
 8005e6e:	690b      	ldr	r3, [r1, #16]
 8005e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e74:	4293      	cmp	r3, r2
 8005e76:	bfb8      	it	lt
 8005e78:	4613      	movlt	r3, r2
 8005e7a:	6033      	str	r3, [r6, #0]
 8005e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e80:	4607      	mov	r7, r0
 8005e82:	460c      	mov	r4, r1
 8005e84:	b10a      	cbz	r2, 8005e8a <_printf_common+0x26>
 8005e86:	3301      	adds	r3, #1
 8005e88:	6033      	str	r3, [r6, #0]
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	0699      	lsls	r1, r3, #26
 8005e8e:	bf42      	ittt	mi
 8005e90:	6833      	ldrmi	r3, [r6, #0]
 8005e92:	3302      	addmi	r3, #2
 8005e94:	6033      	strmi	r3, [r6, #0]
 8005e96:	6825      	ldr	r5, [r4, #0]
 8005e98:	f015 0506 	ands.w	r5, r5, #6
 8005e9c:	d106      	bne.n	8005eac <_printf_common+0x48>
 8005e9e:	f104 0a19 	add.w	sl, r4, #25
 8005ea2:	68e3      	ldr	r3, [r4, #12]
 8005ea4:	6832      	ldr	r2, [r6, #0]
 8005ea6:	1a9b      	subs	r3, r3, r2
 8005ea8:	42ab      	cmp	r3, r5
 8005eaa:	dc26      	bgt.n	8005efa <_printf_common+0x96>
 8005eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005eb0:	1e13      	subs	r3, r2, #0
 8005eb2:	6822      	ldr	r2, [r4, #0]
 8005eb4:	bf18      	it	ne
 8005eb6:	2301      	movne	r3, #1
 8005eb8:	0692      	lsls	r2, r2, #26
 8005eba:	d42b      	bmi.n	8005f14 <_printf_common+0xb0>
 8005ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	47c0      	blx	r8
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	d01e      	beq.n	8005f08 <_printf_common+0xa4>
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	68e5      	ldr	r5, [r4, #12]
 8005ece:	6832      	ldr	r2, [r6, #0]
 8005ed0:	f003 0306 	and.w	r3, r3, #6
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	bf08      	it	eq
 8005ed8:	1aad      	subeq	r5, r5, r2
 8005eda:	68a3      	ldr	r3, [r4, #8]
 8005edc:	6922      	ldr	r2, [r4, #16]
 8005ede:	bf0c      	ite	eq
 8005ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee4:	2500      	movne	r5, #0
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	bfc4      	itt	gt
 8005eea:	1a9b      	subgt	r3, r3, r2
 8005eec:	18ed      	addgt	r5, r5, r3
 8005eee:	2600      	movs	r6, #0
 8005ef0:	341a      	adds	r4, #26
 8005ef2:	42b5      	cmp	r5, r6
 8005ef4:	d11a      	bne.n	8005f2c <_printf_common+0xc8>
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	e008      	b.n	8005f0c <_printf_common+0xa8>
 8005efa:	2301      	movs	r3, #1
 8005efc:	4652      	mov	r2, sl
 8005efe:	4649      	mov	r1, r9
 8005f00:	4638      	mov	r0, r7
 8005f02:	47c0      	blx	r8
 8005f04:	3001      	adds	r0, #1
 8005f06:	d103      	bne.n	8005f10 <_printf_common+0xac>
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f10:	3501      	adds	r5, #1
 8005f12:	e7c6      	b.n	8005ea2 <_printf_common+0x3e>
 8005f14:	18e1      	adds	r1, r4, r3
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	2030      	movs	r0, #48	; 0x30
 8005f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f1e:	4422      	add	r2, r4
 8005f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f28:	3302      	adds	r3, #2
 8005f2a:	e7c7      	b.n	8005ebc <_printf_common+0x58>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4622      	mov	r2, r4
 8005f30:	4649      	mov	r1, r9
 8005f32:	4638      	mov	r0, r7
 8005f34:	47c0      	blx	r8
 8005f36:	3001      	adds	r0, #1
 8005f38:	d0e6      	beq.n	8005f08 <_printf_common+0xa4>
 8005f3a:	3601      	adds	r6, #1
 8005f3c:	e7d9      	b.n	8005ef2 <_printf_common+0x8e>
	...

08005f40 <_printf_i>:
 8005f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	460c      	mov	r4, r1
 8005f46:	4691      	mov	r9, r2
 8005f48:	7e27      	ldrb	r7, [r4, #24]
 8005f4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f4c:	2f78      	cmp	r7, #120	; 0x78
 8005f4e:	4680      	mov	r8, r0
 8005f50:	469a      	mov	sl, r3
 8005f52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f56:	d807      	bhi.n	8005f68 <_printf_i+0x28>
 8005f58:	2f62      	cmp	r7, #98	; 0x62
 8005f5a:	d80a      	bhi.n	8005f72 <_printf_i+0x32>
 8005f5c:	2f00      	cmp	r7, #0
 8005f5e:	f000 80d8 	beq.w	8006112 <_printf_i+0x1d2>
 8005f62:	2f58      	cmp	r7, #88	; 0x58
 8005f64:	f000 80a3 	beq.w	80060ae <_printf_i+0x16e>
 8005f68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f70:	e03a      	b.n	8005fe8 <_printf_i+0xa8>
 8005f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f76:	2b15      	cmp	r3, #21
 8005f78:	d8f6      	bhi.n	8005f68 <_printf_i+0x28>
 8005f7a:	a001      	add	r0, pc, #4	; (adr r0, 8005f80 <_printf_i+0x40>)
 8005f7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f80:	08005fd9 	.word	0x08005fd9
 8005f84:	08005fed 	.word	0x08005fed
 8005f88:	08005f69 	.word	0x08005f69
 8005f8c:	08005f69 	.word	0x08005f69
 8005f90:	08005f69 	.word	0x08005f69
 8005f94:	08005f69 	.word	0x08005f69
 8005f98:	08005fed 	.word	0x08005fed
 8005f9c:	08005f69 	.word	0x08005f69
 8005fa0:	08005f69 	.word	0x08005f69
 8005fa4:	08005f69 	.word	0x08005f69
 8005fa8:	08005f69 	.word	0x08005f69
 8005fac:	080060f9 	.word	0x080060f9
 8005fb0:	0800601d 	.word	0x0800601d
 8005fb4:	080060db 	.word	0x080060db
 8005fb8:	08005f69 	.word	0x08005f69
 8005fbc:	08005f69 	.word	0x08005f69
 8005fc0:	0800611b 	.word	0x0800611b
 8005fc4:	08005f69 	.word	0x08005f69
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	08005f69 	.word	0x08005f69
 8005fd0:	08005f69 	.word	0x08005f69
 8005fd4:	080060e3 	.word	0x080060e3
 8005fd8:	680b      	ldr	r3, [r1, #0]
 8005fda:	1d1a      	adds	r2, r3, #4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	600a      	str	r2, [r1, #0]
 8005fe0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0a3      	b.n	8006134 <_printf_i+0x1f4>
 8005fec:	6825      	ldr	r5, [r4, #0]
 8005fee:	6808      	ldr	r0, [r1, #0]
 8005ff0:	062e      	lsls	r6, r5, #24
 8005ff2:	f100 0304 	add.w	r3, r0, #4
 8005ff6:	d50a      	bpl.n	800600e <_printf_i+0xce>
 8005ff8:	6805      	ldr	r5, [r0, #0]
 8005ffa:	600b      	str	r3, [r1, #0]
 8005ffc:	2d00      	cmp	r5, #0
 8005ffe:	da03      	bge.n	8006008 <_printf_i+0xc8>
 8006000:	232d      	movs	r3, #45	; 0x2d
 8006002:	426d      	negs	r5, r5
 8006004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006008:	485e      	ldr	r0, [pc, #376]	; (8006184 <_printf_i+0x244>)
 800600a:	230a      	movs	r3, #10
 800600c:	e019      	b.n	8006042 <_printf_i+0x102>
 800600e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006012:	6805      	ldr	r5, [r0, #0]
 8006014:	600b      	str	r3, [r1, #0]
 8006016:	bf18      	it	ne
 8006018:	b22d      	sxthne	r5, r5
 800601a:	e7ef      	b.n	8005ffc <_printf_i+0xbc>
 800601c:	680b      	ldr	r3, [r1, #0]
 800601e:	6825      	ldr	r5, [r4, #0]
 8006020:	1d18      	adds	r0, r3, #4
 8006022:	6008      	str	r0, [r1, #0]
 8006024:	0628      	lsls	r0, r5, #24
 8006026:	d501      	bpl.n	800602c <_printf_i+0xec>
 8006028:	681d      	ldr	r5, [r3, #0]
 800602a:	e002      	b.n	8006032 <_printf_i+0xf2>
 800602c:	0669      	lsls	r1, r5, #25
 800602e:	d5fb      	bpl.n	8006028 <_printf_i+0xe8>
 8006030:	881d      	ldrh	r5, [r3, #0]
 8006032:	4854      	ldr	r0, [pc, #336]	; (8006184 <_printf_i+0x244>)
 8006034:	2f6f      	cmp	r7, #111	; 0x6f
 8006036:	bf0c      	ite	eq
 8006038:	2308      	moveq	r3, #8
 800603a:	230a      	movne	r3, #10
 800603c:	2100      	movs	r1, #0
 800603e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006042:	6866      	ldr	r6, [r4, #4]
 8006044:	60a6      	str	r6, [r4, #8]
 8006046:	2e00      	cmp	r6, #0
 8006048:	bfa2      	ittt	ge
 800604a:	6821      	ldrge	r1, [r4, #0]
 800604c:	f021 0104 	bicge.w	r1, r1, #4
 8006050:	6021      	strge	r1, [r4, #0]
 8006052:	b90d      	cbnz	r5, 8006058 <_printf_i+0x118>
 8006054:	2e00      	cmp	r6, #0
 8006056:	d04d      	beq.n	80060f4 <_printf_i+0x1b4>
 8006058:	4616      	mov	r6, r2
 800605a:	fbb5 f1f3 	udiv	r1, r5, r3
 800605e:	fb03 5711 	mls	r7, r3, r1, r5
 8006062:	5dc7      	ldrb	r7, [r0, r7]
 8006064:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006068:	462f      	mov	r7, r5
 800606a:	42bb      	cmp	r3, r7
 800606c:	460d      	mov	r5, r1
 800606e:	d9f4      	bls.n	800605a <_printf_i+0x11a>
 8006070:	2b08      	cmp	r3, #8
 8006072:	d10b      	bne.n	800608c <_printf_i+0x14c>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	07df      	lsls	r7, r3, #31
 8006078:	d508      	bpl.n	800608c <_printf_i+0x14c>
 800607a:	6923      	ldr	r3, [r4, #16]
 800607c:	6861      	ldr	r1, [r4, #4]
 800607e:	4299      	cmp	r1, r3
 8006080:	bfde      	ittt	le
 8006082:	2330      	movle	r3, #48	; 0x30
 8006084:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006088:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800608c:	1b92      	subs	r2, r2, r6
 800608e:	6122      	str	r2, [r4, #16]
 8006090:	f8cd a000 	str.w	sl, [sp]
 8006094:	464b      	mov	r3, r9
 8006096:	aa03      	add	r2, sp, #12
 8006098:	4621      	mov	r1, r4
 800609a:	4640      	mov	r0, r8
 800609c:	f7ff fee2 	bl	8005e64 <_printf_common>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d14c      	bne.n	800613e <_printf_i+0x1fe>
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a8:	b004      	add	sp, #16
 80060aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ae:	4835      	ldr	r0, [pc, #212]	; (8006184 <_printf_i+0x244>)
 80060b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	680e      	ldr	r6, [r1, #0]
 80060b8:	061f      	lsls	r7, r3, #24
 80060ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80060be:	600e      	str	r6, [r1, #0]
 80060c0:	d514      	bpl.n	80060ec <_printf_i+0x1ac>
 80060c2:	07d9      	lsls	r1, r3, #31
 80060c4:	bf44      	itt	mi
 80060c6:	f043 0320 	orrmi.w	r3, r3, #32
 80060ca:	6023      	strmi	r3, [r4, #0]
 80060cc:	b91d      	cbnz	r5, 80060d6 <_printf_i+0x196>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	f023 0320 	bic.w	r3, r3, #32
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	2310      	movs	r3, #16
 80060d8:	e7b0      	b.n	800603c <_printf_i+0xfc>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	f043 0320 	orr.w	r3, r3, #32
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	2378      	movs	r3, #120	; 0x78
 80060e4:	4828      	ldr	r0, [pc, #160]	; (8006188 <_printf_i+0x248>)
 80060e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060ea:	e7e3      	b.n	80060b4 <_printf_i+0x174>
 80060ec:	065e      	lsls	r6, r3, #25
 80060ee:	bf48      	it	mi
 80060f0:	b2ad      	uxthmi	r5, r5
 80060f2:	e7e6      	b.n	80060c2 <_printf_i+0x182>
 80060f4:	4616      	mov	r6, r2
 80060f6:	e7bb      	b.n	8006070 <_printf_i+0x130>
 80060f8:	680b      	ldr	r3, [r1, #0]
 80060fa:	6826      	ldr	r6, [r4, #0]
 80060fc:	6960      	ldr	r0, [r4, #20]
 80060fe:	1d1d      	adds	r5, r3, #4
 8006100:	600d      	str	r5, [r1, #0]
 8006102:	0635      	lsls	r5, r6, #24
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	d501      	bpl.n	800610c <_printf_i+0x1cc>
 8006108:	6018      	str	r0, [r3, #0]
 800610a:	e002      	b.n	8006112 <_printf_i+0x1d2>
 800610c:	0671      	lsls	r1, r6, #25
 800610e:	d5fb      	bpl.n	8006108 <_printf_i+0x1c8>
 8006110:	8018      	strh	r0, [r3, #0]
 8006112:	2300      	movs	r3, #0
 8006114:	6123      	str	r3, [r4, #16]
 8006116:	4616      	mov	r6, r2
 8006118:	e7ba      	b.n	8006090 <_printf_i+0x150>
 800611a:	680b      	ldr	r3, [r1, #0]
 800611c:	1d1a      	adds	r2, r3, #4
 800611e:	600a      	str	r2, [r1, #0]
 8006120:	681e      	ldr	r6, [r3, #0]
 8006122:	6862      	ldr	r2, [r4, #4]
 8006124:	2100      	movs	r1, #0
 8006126:	4630      	mov	r0, r6
 8006128:	f7fa f85a 	bl	80001e0 <memchr>
 800612c:	b108      	cbz	r0, 8006132 <_printf_i+0x1f2>
 800612e:	1b80      	subs	r0, r0, r6
 8006130:	6060      	str	r0, [r4, #4]
 8006132:	6863      	ldr	r3, [r4, #4]
 8006134:	6123      	str	r3, [r4, #16]
 8006136:	2300      	movs	r3, #0
 8006138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800613c:	e7a8      	b.n	8006090 <_printf_i+0x150>
 800613e:	6923      	ldr	r3, [r4, #16]
 8006140:	4632      	mov	r2, r6
 8006142:	4649      	mov	r1, r9
 8006144:	4640      	mov	r0, r8
 8006146:	47d0      	blx	sl
 8006148:	3001      	adds	r0, #1
 800614a:	d0ab      	beq.n	80060a4 <_printf_i+0x164>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	079b      	lsls	r3, r3, #30
 8006150:	d413      	bmi.n	800617a <_printf_i+0x23a>
 8006152:	68e0      	ldr	r0, [r4, #12]
 8006154:	9b03      	ldr	r3, [sp, #12]
 8006156:	4298      	cmp	r0, r3
 8006158:	bfb8      	it	lt
 800615a:	4618      	movlt	r0, r3
 800615c:	e7a4      	b.n	80060a8 <_printf_i+0x168>
 800615e:	2301      	movs	r3, #1
 8006160:	4632      	mov	r2, r6
 8006162:	4649      	mov	r1, r9
 8006164:	4640      	mov	r0, r8
 8006166:	47d0      	blx	sl
 8006168:	3001      	adds	r0, #1
 800616a:	d09b      	beq.n	80060a4 <_printf_i+0x164>
 800616c:	3501      	adds	r5, #1
 800616e:	68e3      	ldr	r3, [r4, #12]
 8006170:	9903      	ldr	r1, [sp, #12]
 8006172:	1a5b      	subs	r3, r3, r1
 8006174:	42ab      	cmp	r3, r5
 8006176:	dcf2      	bgt.n	800615e <_printf_i+0x21e>
 8006178:	e7eb      	b.n	8006152 <_printf_i+0x212>
 800617a:	2500      	movs	r5, #0
 800617c:	f104 0619 	add.w	r6, r4, #25
 8006180:	e7f5      	b.n	800616e <_printf_i+0x22e>
 8006182:	bf00      	nop
 8006184:	080064fd 	.word	0x080064fd
 8006188:	0800650e 	.word	0x0800650e

0800618c <memcpy>:
 800618c:	440a      	add	r2, r1
 800618e:	4291      	cmp	r1, r2
 8006190:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006194:	d100      	bne.n	8006198 <memcpy+0xc>
 8006196:	4770      	bx	lr
 8006198:	b510      	push	{r4, lr}
 800619a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800619e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061a2:	4291      	cmp	r1, r2
 80061a4:	d1f9      	bne.n	800619a <memcpy+0xe>
 80061a6:	bd10      	pop	{r4, pc}

080061a8 <memmove>:
 80061a8:	4288      	cmp	r0, r1
 80061aa:	b510      	push	{r4, lr}
 80061ac:	eb01 0402 	add.w	r4, r1, r2
 80061b0:	d902      	bls.n	80061b8 <memmove+0x10>
 80061b2:	4284      	cmp	r4, r0
 80061b4:	4623      	mov	r3, r4
 80061b6:	d807      	bhi.n	80061c8 <memmove+0x20>
 80061b8:	1e43      	subs	r3, r0, #1
 80061ba:	42a1      	cmp	r1, r4
 80061bc:	d008      	beq.n	80061d0 <memmove+0x28>
 80061be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061c6:	e7f8      	b.n	80061ba <memmove+0x12>
 80061c8:	4402      	add	r2, r0
 80061ca:	4601      	mov	r1, r0
 80061cc:	428a      	cmp	r2, r1
 80061ce:	d100      	bne.n	80061d2 <memmove+0x2a>
 80061d0:	bd10      	pop	{r4, pc}
 80061d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061da:	e7f7      	b.n	80061cc <memmove+0x24>

080061dc <_free_r>:
 80061dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061de:	2900      	cmp	r1, #0
 80061e0:	d048      	beq.n	8006274 <_free_r+0x98>
 80061e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061e6:	9001      	str	r0, [sp, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f1a1 0404 	sub.w	r4, r1, #4
 80061ee:	bfb8      	it	lt
 80061f0:	18e4      	addlt	r4, r4, r3
 80061f2:	f000 f8d3 	bl	800639c <__malloc_lock>
 80061f6:	4a20      	ldr	r2, [pc, #128]	; (8006278 <_free_r+0x9c>)
 80061f8:	9801      	ldr	r0, [sp, #4]
 80061fa:	6813      	ldr	r3, [r2, #0]
 80061fc:	4615      	mov	r5, r2
 80061fe:	b933      	cbnz	r3, 800620e <_free_r+0x32>
 8006200:	6063      	str	r3, [r4, #4]
 8006202:	6014      	str	r4, [r2, #0]
 8006204:	b003      	add	sp, #12
 8006206:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800620a:	f000 b8cd 	b.w	80063a8 <__malloc_unlock>
 800620e:	42a3      	cmp	r3, r4
 8006210:	d90b      	bls.n	800622a <_free_r+0x4e>
 8006212:	6821      	ldr	r1, [r4, #0]
 8006214:	1862      	adds	r2, r4, r1
 8006216:	4293      	cmp	r3, r2
 8006218:	bf04      	itt	eq
 800621a:	681a      	ldreq	r2, [r3, #0]
 800621c:	685b      	ldreq	r3, [r3, #4]
 800621e:	6063      	str	r3, [r4, #4]
 8006220:	bf04      	itt	eq
 8006222:	1852      	addeq	r2, r2, r1
 8006224:	6022      	streq	r2, [r4, #0]
 8006226:	602c      	str	r4, [r5, #0]
 8006228:	e7ec      	b.n	8006204 <_free_r+0x28>
 800622a:	461a      	mov	r2, r3
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	b10b      	cbz	r3, 8006234 <_free_r+0x58>
 8006230:	42a3      	cmp	r3, r4
 8006232:	d9fa      	bls.n	800622a <_free_r+0x4e>
 8006234:	6811      	ldr	r1, [r2, #0]
 8006236:	1855      	adds	r5, r2, r1
 8006238:	42a5      	cmp	r5, r4
 800623a:	d10b      	bne.n	8006254 <_free_r+0x78>
 800623c:	6824      	ldr	r4, [r4, #0]
 800623e:	4421      	add	r1, r4
 8006240:	1854      	adds	r4, r2, r1
 8006242:	42a3      	cmp	r3, r4
 8006244:	6011      	str	r1, [r2, #0]
 8006246:	d1dd      	bne.n	8006204 <_free_r+0x28>
 8006248:	681c      	ldr	r4, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	6053      	str	r3, [r2, #4]
 800624e:	4421      	add	r1, r4
 8006250:	6011      	str	r1, [r2, #0]
 8006252:	e7d7      	b.n	8006204 <_free_r+0x28>
 8006254:	d902      	bls.n	800625c <_free_r+0x80>
 8006256:	230c      	movs	r3, #12
 8006258:	6003      	str	r3, [r0, #0]
 800625a:	e7d3      	b.n	8006204 <_free_r+0x28>
 800625c:	6825      	ldr	r5, [r4, #0]
 800625e:	1961      	adds	r1, r4, r5
 8006260:	428b      	cmp	r3, r1
 8006262:	bf04      	itt	eq
 8006264:	6819      	ldreq	r1, [r3, #0]
 8006266:	685b      	ldreq	r3, [r3, #4]
 8006268:	6063      	str	r3, [r4, #4]
 800626a:	bf04      	itt	eq
 800626c:	1949      	addeq	r1, r1, r5
 800626e:	6021      	streq	r1, [r4, #0]
 8006270:	6054      	str	r4, [r2, #4]
 8006272:	e7c7      	b.n	8006204 <_free_r+0x28>
 8006274:	b003      	add	sp, #12
 8006276:	bd30      	pop	{r4, r5, pc}
 8006278:	20000410 	.word	0x20000410

0800627c <_malloc_r>:
 800627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627e:	1ccd      	adds	r5, r1, #3
 8006280:	f025 0503 	bic.w	r5, r5, #3
 8006284:	3508      	adds	r5, #8
 8006286:	2d0c      	cmp	r5, #12
 8006288:	bf38      	it	cc
 800628a:	250c      	movcc	r5, #12
 800628c:	2d00      	cmp	r5, #0
 800628e:	4606      	mov	r6, r0
 8006290:	db01      	blt.n	8006296 <_malloc_r+0x1a>
 8006292:	42a9      	cmp	r1, r5
 8006294:	d903      	bls.n	800629e <_malloc_r+0x22>
 8006296:	230c      	movs	r3, #12
 8006298:	6033      	str	r3, [r6, #0]
 800629a:	2000      	movs	r0, #0
 800629c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800629e:	f000 f87d 	bl	800639c <__malloc_lock>
 80062a2:	4921      	ldr	r1, [pc, #132]	; (8006328 <_malloc_r+0xac>)
 80062a4:	680a      	ldr	r2, [r1, #0]
 80062a6:	4614      	mov	r4, r2
 80062a8:	b99c      	cbnz	r4, 80062d2 <_malloc_r+0x56>
 80062aa:	4f20      	ldr	r7, [pc, #128]	; (800632c <_malloc_r+0xb0>)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	b923      	cbnz	r3, 80062ba <_malloc_r+0x3e>
 80062b0:	4621      	mov	r1, r4
 80062b2:	4630      	mov	r0, r6
 80062b4:	f000 f862 	bl	800637c <_sbrk_r>
 80062b8:	6038      	str	r0, [r7, #0]
 80062ba:	4629      	mov	r1, r5
 80062bc:	4630      	mov	r0, r6
 80062be:	f000 f85d 	bl	800637c <_sbrk_r>
 80062c2:	1c43      	adds	r3, r0, #1
 80062c4:	d123      	bne.n	800630e <_malloc_r+0x92>
 80062c6:	230c      	movs	r3, #12
 80062c8:	6033      	str	r3, [r6, #0]
 80062ca:	4630      	mov	r0, r6
 80062cc:	f000 f86c 	bl	80063a8 <__malloc_unlock>
 80062d0:	e7e3      	b.n	800629a <_malloc_r+0x1e>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	1b5b      	subs	r3, r3, r5
 80062d6:	d417      	bmi.n	8006308 <_malloc_r+0x8c>
 80062d8:	2b0b      	cmp	r3, #11
 80062da:	d903      	bls.n	80062e4 <_malloc_r+0x68>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	441c      	add	r4, r3
 80062e0:	6025      	str	r5, [r4, #0]
 80062e2:	e004      	b.n	80062ee <_malloc_r+0x72>
 80062e4:	6863      	ldr	r3, [r4, #4]
 80062e6:	42a2      	cmp	r2, r4
 80062e8:	bf0c      	ite	eq
 80062ea:	600b      	streq	r3, [r1, #0]
 80062ec:	6053      	strne	r3, [r2, #4]
 80062ee:	4630      	mov	r0, r6
 80062f0:	f000 f85a 	bl	80063a8 <__malloc_unlock>
 80062f4:	f104 000b 	add.w	r0, r4, #11
 80062f8:	1d23      	adds	r3, r4, #4
 80062fa:	f020 0007 	bic.w	r0, r0, #7
 80062fe:	1ac2      	subs	r2, r0, r3
 8006300:	d0cc      	beq.n	800629c <_malloc_r+0x20>
 8006302:	1a1b      	subs	r3, r3, r0
 8006304:	50a3      	str	r3, [r4, r2]
 8006306:	e7c9      	b.n	800629c <_malloc_r+0x20>
 8006308:	4622      	mov	r2, r4
 800630a:	6864      	ldr	r4, [r4, #4]
 800630c:	e7cc      	b.n	80062a8 <_malloc_r+0x2c>
 800630e:	1cc4      	adds	r4, r0, #3
 8006310:	f024 0403 	bic.w	r4, r4, #3
 8006314:	42a0      	cmp	r0, r4
 8006316:	d0e3      	beq.n	80062e0 <_malloc_r+0x64>
 8006318:	1a21      	subs	r1, r4, r0
 800631a:	4630      	mov	r0, r6
 800631c:	f000 f82e 	bl	800637c <_sbrk_r>
 8006320:	3001      	adds	r0, #1
 8006322:	d1dd      	bne.n	80062e0 <_malloc_r+0x64>
 8006324:	e7cf      	b.n	80062c6 <_malloc_r+0x4a>
 8006326:	bf00      	nop
 8006328:	20000410 	.word	0x20000410
 800632c:	20000414 	.word	0x20000414

08006330 <_realloc_r>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	4607      	mov	r7, r0
 8006334:	4614      	mov	r4, r2
 8006336:	460e      	mov	r6, r1
 8006338:	b921      	cbnz	r1, 8006344 <_realloc_r+0x14>
 800633a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800633e:	4611      	mov	r1, r2
 8006340:	f7ff bf9c 	b.w	800627c <_malloc_r>
 8006344:	b922      	cbnz	r2, 8006350 <_realloc_r+0x20>
 8006346:	f7ff ff49 	bl	80061dc <_free_r>
 800634a:	4625      	mov	r5, r4
 800634c:	4628      	mov	r0, r5
 800634e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006350:	f000 f830 	bl	80063b4 <_malloc_usable_size_r>
 8006354:	42a0      	cmp	r0, r4
 8006356:	d20f      	bcs.n	8006378 <_realloc_r+0x48>
 8006358:	4621      	mov	r1, r4
 800635a:	4638      	mov	r0, r7
 800635c:	f7ff ff8e 	bl	800627c <_malloc_r>
 8006360:	4605      	mov	r5, r0
 8006362:	2800      	cmp	r0, #0
 8006364:	d0f2      	beq.n	800634c <_realloc_r+0x1c>
 8006366:	4631      	mov	r1, r6
 8006368:	4622      	mov	r2, r4
 800636a:	f7ff ff0f 	bl	800618c <memcpy>
 800636e:	4631      	mov	r1, r6
 8006370:	4638      	mov	r0, r7
 8006372:	f7ff ff33 	bl	80061dc <_free_r>
 8006376:	e7e9      	b.n	800634c <_realloc_r+0x1c>
 8006378:	4635      	mov	r5, r6
 800637a:	e7e7      	b.n	800634c <_realloc_r+0x1c>

0800637c <_sbrk_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4d06      	ldr	r5, [pc, #24]	; (8006398 <_sbrk_r+0x1c>)
 8006380:	2300      	movs	r3, #0
 8006382:	4604      	mov	r4, r0
 8006384:	4608      	mov	r0, r1
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	f7fa fd14 	bl	8000db4 <_sbrk>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_sbrk_r+0x1a>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_sbrk_r+0x1a>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	20000a68 	.word	0x20000a68

0800639c <__malloc_lock>:
 800639c:	4801      	ldr	r0, [pc, #4]	; (80063a4 <__malloc_lock+0x8>)
 800639e:	f000 b811 	b.w	80063c4 <__retarget_lock_acquire_recursive>
 80063a2:	bf00      	nop
 80063a4:	20000a70 	.word	0x20000a70

080063a8 <__malloc_unlock>:
 80063a8:	4801      	ldr	r0, [pc, #4]	; (80063b0 <__malloc_unlock+0x8>)
 80063aa:	f000 b80c 	b.w	80063c6 <__retarget_lock_release_recursive>
 80063ae:	bf00      	nop
 80063b0:	20000a70 	.word	0x20000a70

080063b4 <_malloc_usable_size_r>:
 80063b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b8:	1f18      	subs	r0, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bfbc      	itt	lt
 80063be:	580b      	ldrlt	r3, [r1, r0]
 80063c0:	18c0      	addlt	r0, r0, r3
 80063c2:	4770      	bx	lr

080063c4 <__retarget_lock_acquire_recursive>:
 80063c4:	4770      	bx	lr

080063c6 <__retarget_lock_release_recursive>:
 80063c6:	4770      	bx	lr

080063c8 <_init>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	bf00      	nop
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr

080063d4 <_fini>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	bf00      	nop
 80063d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063da:	bc08      	pop	{r3}
 80063dc:	469e      	mov	lr, r3
 80063de:	4770      	bx	lr
