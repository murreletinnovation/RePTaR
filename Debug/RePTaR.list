
RePTaR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800a438  0800a438  0001a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab68  0800ab68  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab68  0800ab68  0001ab68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab70  0800ab70  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab70  0800ab70  0001ab70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab74  0800ab74  0001ab74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800ab78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000462c  20000084  0800abfc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046b0  0800abfc  000246b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020652  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef7  00000000  00000000  00040706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00044600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  00045b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b25d  00000000  00000000  00046f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c16c  00000000  00000000  000721e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f64c3  00000000  00000000  0008e351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00184814  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a4  00000000  00000000  00184868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a420 	.word	0x0800a420

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800a420 	.word	0x0800a420

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  error_code_t retval = E_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8e:	f000 fd44 	bl	800161a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 f817 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b96:	f000 f9f1 	bl	8000f7c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b9a:	f000 f8a1 	bl	8000ce0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b9e:	f000 f94f 	bl	8000e40 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000ba2:	f000 f9bb 	bl	8000f1c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000ba6:	f000 f989 	bl	8000ebc <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000baa:	f000 f8d9 	bl	8000d60 <MX_RTC_Init>
  MX_FATFS_Init();
 8000bae:	f004 fde9 	bl	8005784 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  retval = reptar_init();
 8000bb2:	f000 fa65 	bl	8001080 <reptar_init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]

  if (retval != E_OK)
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d000      	beq.n	8000bc2 <main+0x3e>
  {
	  while(1);
 8000bc0:	e7fe      	b.n	8000bc0 <main+0x3c>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <main+0x3e>

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0b8      	sub	sp, #224	; 0xe0
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bce:	2244      	movs	r2, #68	; 0x44
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f008 ff4b 	bl	8009a6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2288      	movs	r2, #136	; 0x88
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f008 ff3d 	bl	8009a6e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bf4:	f001 f978 	bl	8001ee8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <SystemClock_Config+0x114>)
 8000bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bfe:	4a36      	ldr	r2, [pc, #216]	; (8000cd8 <SystemClock_Config+0x114>)
 8000c00:	f023 0318 	bic.w	r3, r3, #24
 8000c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000c08:	2306      	movs	r3, #6
 8000c0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c34:	2308      	movs	r3, #8
 8000c36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 f9e9 	bl	8002028 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c5c:	f000 f9e4 	bl	8001028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	230f      	movs	r3, #15
 8000c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c66:	2303      	movs	r3, #3
 8000c68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c7e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c82:	2101      	movs	r1, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f001 fdb5 	bl	80027f4 <HAL_RCC_ClockConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c90:	f000 f9ca 	bl	8001028 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <SystemClock_Config+0x118>)
 8000c96:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 f89e 	bl	8002df0 <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000cba:	f000 f9b5 	bl	8001028 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cc2:	f001 f92f 	bl	8001f24 <HAL_PWREx_ControlVoltageScaling>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000ccc:	f000 f9ac 	bl	8001028 <Error_Handler>
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	37e0      	adds	r7, #224	; 0xe0
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	00020043 	.word	0x00020043

08000ce0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <MX_I2C1_Init+0x78>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <MX_I2C1_Init+0x7c>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d1c:	f000 ffbe 	bl	8001c9c <HAL_I2C_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d26:	f000 f97f 	bl	8001028 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d2e:	f001 f844 	bl	8001dba <HAL_I2CEx_ConfigAnalogFilter>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d38:	f000 f976 	bl	8001028 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d40:	f001 f886 	bl	8001e50 <HAL_I2CEx_ConfigDigitalFilter>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 f96d 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000244c 	.word	0x2000244c
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	00707cbb 	.word	0x00707cbb

08000d60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d74:	2300      	movs	r3, #0
 8000d76:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d78:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000d7a:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <MX_RTC_Init+0xd8>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d84:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000d86:	227f      	movs	r2, #127	; 0x7f
 8000d88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000d8c:	22ff      	movs	r2, #255	; 0xff
 8000d8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d90:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d9c:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000da8:	4822      	ldr	r0, [pc, #136]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000daa:	f002 fcdd 	bl	8003768 <HAL_RTC_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000db4:	f000 f938 	bl	8001028 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != RTC_BACKUP_MAGIC_NUM)
 8000db8:	2100      	movs	r1, #0
 8000dba:	481e      	ldr	r0, [pc, #120]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000dbc:	f003 f807 	bl	8003dce <HAL_RTCEx_BKUPRead>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f243 22f3 	movw	r2, #13043	; 0x32f3
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d030      	beq.n	8000e2c <MX_RTC_Init+0xcc>
  {
	  reptar_printf("Setting up RTC!\r\n");
 8000dca:	481c      	ldr	r0, [pc, #112]	; (8000e3c <MX_RTC_Init+0xdc>)
 8000dcc:	f000 f932 	bl	8001034 <reptar_printf>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x14;
 8000dd0:	2314      	movs	r3, #20
 8000dd2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x27;
 8000dd4:	2327      	movs	r3, #39	; 0x27
 8000dd6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2201      	movs	r2, #1
 8000de8:	4619      	mov	r1, r3
 8000dea:	4812      	ldr	r0, [pc, #72]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000dec:	f002 fd37 	bl	800385e <HAL_RTC_SetTime>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000df6:	f000 f917 	bl	8001028 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x26;
 8000e02:	2326      	movs	r3, #38	; 0x26
 8000e04:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8000e06:	2321      	movs	r3, #33	; 0x21
 8000e08:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000e12:	f002 fe1d 	bl	8003a50 <HAL_RTC_SetDate>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 8000e1c:	f000 f904 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, RTC_BACKUP_MAGIC_NUM);
 8000e20:	f243 22f3 	movw	r2, #13043	; 0x32f3
 8000e24:	2100      	movs	r1, #0
 8000e26:	4803      	ldr	r0, [pc, #12]	; (8000e34 <MX_RTC_Init+0xd4>)
 8000e28:	f002 ffb8 	bl	8003d9c <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000251c 	.word	0x2000251c
 8000e38:	40002800 	.word	0x40002800
 8000e3c:	0800a438 	.word	0x0800a438

08000e40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <MX_SPI1_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e76:	2210      	movs	r2, #16
 8000e78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e8e:	2207      	movs	r2, #7
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000ea0:	f002 ffab 	bl	8003dfa <HAL_SPI_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f000 f8bd 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20002540 	.word	0x20002540
 8000eb8:	40013000 	.word	0x40013000

08000ebc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ec2:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <MX_USART1_UART_Init+0x5c>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ec8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_USART1_UART_Init+0x58>)
 8000f00:	f003 fd00 	bl	8004904 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f0a:	f000 f88d 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20002498 	.word	0x20002498
 8000f18:	40013800 	.word	0x40013800

08000f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f22:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <MX_USART2_UART_Init+0x5c>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f60:	f003 fcd0 	bl	8004904 <HAL_UART_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f6a:	f000 f85d 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200025a4 	.word	0x200025a4
 8000f78:	40004400 	.word	0x40004400

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	4b23      	ldr	r3, [pc, #140]	; (8001020 <MX_GPIO_Init+0xa4>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a22      	ldr	r2, [pc, #136]	; (8001020 <MX_GPIO_Init+0xa4>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <MX_GPIO_Init+0xa4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <MX_GPIO_Init+0xa4>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <MX_GPIO_Init+0xa4>)
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_GPIO_Init+0xa4>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_GPIO_Init+0xa4>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a16      	ldr	r2, [pc, #88]	; (8001020 <MX_GPIO_Init+0xa4>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_GPIO_Init+0xa4>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_GPIO_Init+0xa4>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <MX_GPIO_Init+0xa4>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_GPIO_Init+0xa4>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2140      	movs	r1, #64	; 0x40
 8000ff6:	480b      	ldr	r0, [pc, #44]	; (8001024 <MX_GPIO_Init+0xa8>)
 8000ff8:	f000 fe38 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000ffc:	2340      	movs	r3, #64	; 0x40
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001008:	2301      	movs	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_GPIO_Init+0xa8>)
 8001014:	f000 fc80 	bl	8001918 <HAL_GPIO_Init>

}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000
 8001024:	48000400 	.word	0x48000400

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <reptar_printf>:
extern UART_HandleTypeDef 	DEBUG_UART_HANDLE;
extern RTC_HandleTypeDef  	RTC_HANDLE;
extern SPI_HandleTypeDef	SD_SPI_HANDLE;

void reptar_printf(const char *fmt, ...)
{
 8001034:	b40f      	push	{r0, r1, r2, r3}
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104a:	480b      	ldr	r0, [pc, #44]	; (8001078 <reptar_printf+0x44>)
 800104c:	f008 fe42 	bl	8009cd4 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <reptar_printf+0x44>)
 8001052:	f7ff f8bd 	bl	80001d0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t*) buffer, len, -1);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001062:	4905      	ldr	r1, [pc, #20]	; (8001078 <reptar_printf+0x44>)
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <reptar_printf+0x48>)
 8001066:	f003 fc9b 	bl	80049a0 <HAL_UART_Transmit>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001074:	b004      	add	sp, #16
 8001076:	4770      	bx	lr
 8001078:	200000a0 	.word	0x200000a0
 800107c:	200025a4 	.word	0x200025a4

08001080 <reptar_init>:


error_code_t reptar_init (void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
	error_code_t retval = E_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	uint32_t totalSpace, freeSpace;

	HAL_RTC_GetTime(&RTC_HANDLE, &gTime, RTC_FORMAT_BIN);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	4836      	ldr	r0, [pc, #216]	; (8001170 <reptar_init+0xf0>)
 8001096:	f002 fc7f 	bl	8003998 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&RTC_HANDLE, &gDate, RTC_FORMAT_BIN);
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	4833      	ldr	r0, [pc, #204]	; (8001170 <reptar_init+0xf0>)
 80010a4:	f002 fd5b 	bl	8003b5e <HAL_RTC_GetDate>

	reptar_printf("%02d:%02d:%02d\r\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 80010a8:	7b3b      	ldrb	r3, [r7, #12]
 80010aa:	4619      	mov	r1, r3
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	461a      	mov	r2, r3
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	4830      	ldr	r0, [pc, #192]	; (8001174 <reptar_init+0xf4>)
 80010b4:	f7ff ffbe 	bl	8001034 <reptar_printf>
	reptar_printf("%02d-%02d-%2d\r\n", gDate.Date, gDate.Month, 2000 + gDate.Year);
 80010b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010bc:	4619      	mov	r1, r3
 80010be:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010c2:	461a      	mov	r2, r3
 80010c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010c8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010cc:	482a      	ldr	r0, [pc, #168]	; (8001178 <reptar_init+0xf8>)
 80010ce:	f7ff ffb1 	bl	8001034 <reptar_printf>
	reptar_printf("Welcome to the Reptar Project!\r\n");
 80010d2:	482a      	ldr	r0, [pc, #168]	; (800117c <reptar_init+0xfc>)
 80010d4:	f7ff ffae 	bl	8001034 <reptar_printf>

    /* Wait for SD module reset */
    HAL_Delay(500);
 80010d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010dc:	f000 fb12 	bl	8001704 <HAL_Delay>

    retval = sd_mount();
 80010e0:	f004 fa0c 	bl	80054fc <sd_mount>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    retval = sd_open_file("file.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80010ea:	2113      	movs	r1, #19
 80010ec:	4824      	ldr	r0, [pc, #144]	; (8001180 <reptar_init+0x100>)
 80010ee:	f004 fab9 	bl	8005664 <sd_open_file>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    retval = sd_get_free(&totalSpace, &freeSpace);
 80010f8:	1d3a      	adds	r2, r7, #4
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f004 fa49 	bl	8005598 <sd_get_free>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    retval = sd_puts("STM32 SD Card I/O Example via SPI\r\n");
 800110c:	481d      	ldr	r0, [pc, #116]	; (8001184 <reptar_init+0x104>)
 800110e:	f004 faf7 	bl	8005700 <sd_puts>
 8001112:	4603      	mov	r3, r0
 8001114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    retval = sd_puts("Save the world!!!\r\n");
 8001118:	481b      	ldr	r0, [pc, #108]	; (8001188 <reptar_init+0x108>)
 800111a:	f004 faf1 	bl	8005700 <sd_puts>
 800111e:	4603      	mov	r3, r0
 8001120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    retval = sd_close_file();
 8001124:	f004 fac8 	bl	80056b8 <sd_close_file>
 8001128:	4603      	mov	r3, r0
 800112a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    retval = sd_open_file("file.txt", FA_READ);
 800112e:	2101      	movs	r1, #1
 8001130:	4813      	ldr	r0, [pc, #76]	; (8001180 <reptar_init+0x100>)
 8001132:	f004 fa97 	bl	8005664 <sd_open_file>
 8001136:	4603      	mov	r3, r0
 8001138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    sd_test_print();
 800113c:	f004 fafe 	bl	800573c <sd_test_print>
    retval = sd_close_file();
 8001140:	f004 faba 	bl	80056b8 <sd_close_file>
 8001144:	4603      	mov	r3, r0
 8001146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    retval = sd_unmount();
 800114a:	f004 f9ff 	bl	800554c <sd_unmount>
 800114e:	4603      	mov	r3, r0
 8001150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Include this when you have an actual interrupt source
    low_power_enter_stop();
 8001154:	f004 f8aa 	bl	80052ac <low_power_enter_stop>
    retval = low_power_exit_stop();
 8001158:	f004 f974 	bl	8005444 <low_power_exit_stop>
 800115c:	4603      	mov	r3, r0
 800115e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return retval;
 8001162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001166:	4618      	mov	r0, r3
 8001168:	3728      	adds	r7, #40	; 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000251c 	.word	0x2000251c
 8001174:	0800a44c 	.word	0x0800a44c
 8001178:	0800a460 	.word	0x0800a460
 800117c:	0800a470 	.word	0x0800a470
 8001180:	0800a494 	.word	0x0800a494
 8001184:	0800a4a0 	.word	0x0800a4a0
 8001188:	0800a4c4 	.word	0x0800a4c4

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_MspInit+0x44>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_MspInit+0x44>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6613      	str	r3, [r2, #96]	; 0x60
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_MspInit+0x44>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_MspInit+0x44>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_MspInit+0x44>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6593      	str	r3, [r2, #88]	; 0x58
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x44>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_I2C_MspInit+0x7c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d128      	bne.n	8001248 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_I2C_MspInit+0x80>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a16      	ldr	r2, [pc, #88]	; (8001254 <HAL_I2C_MspInit+0x80>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_I2C_MspInit+0x80>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800120e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001214:	2312      	movs	r3, #18
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001218:	2301      	movs	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001220:	2304      	movs	r3, #4
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	480b      	ldr	r0, [pc, #44]	; (8001258 <HAL_I2C_MspInit+0x84>)
 800122c:	f000 fb74 	bl	8001918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_I2C_MspInit+0x80>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_I2C_MspInit+0x80>)
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800123a:	6593      	str	r3, [r2, #88]	; 0x58
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_I2C_MspInit+0x80>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40005400 	.word	0x40005400
 8001254:	40021000 	.word	0x40021000
 8001258:	48000400 	.word	0x48000400

0800125c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a08      	ldr	r2, [pc, #32]	; (800128c <HAL_RTC_MspInit+0x30>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d107      	bne.n	800127e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_RTC_MspInit+0x34>)
 8001270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_RTC_MspInit+0x34>)
 8001276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40002800 	.word	0x40002800
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_SPI_MspInit+0x7c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d128      	bne.n	8001308 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_SPI_MspInit+0x80>)
 80012b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ba:	4a16      	ldr	r2, [pc, #88]	; (8001314 <HAL_SPI_MspInit+0x80>)
 80012bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012c0:	6613      	str	r3, [r2, #96]	; 0x60
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_SPI_MspInit+0x80>)
 80012c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_SPI_MspInit+0x80>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	4a10      	ldr	r2, [pc, #64]	; (8001314 <HAL_SPI_MspInit+0x80>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_SPI_MspInit+0x80>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012e6:	23e0      	movs	r3, #224	; 0xe0
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012f6:	2305      	movs	r3, #5
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001304:	f000 fb08 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40013000 	.word	0x40013000
 8001314:	40021000 	.word	0x40021000

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	; 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2f      	ldr	r2, [pc, #188]	; (80013f4 <HAL_UART_MspInit+0xdc>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d12a      	bne.n	8001390 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <HAL_UART_MspInit+0xe0>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133e:	4a2e      	ldr	r2, [pc, #184]	; (80013f8 <HAL_UART_MspInit+0xe0>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6613      	str	r3, [r2, #96]	; 0x60
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <HAL_UART_MspInit+0xe0>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <HAL_UART_MspInit+0xe0>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a28      	ldr	r2, [pc, #160]	; (80013f8 <HAL_UART_MspInit+0xe0>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135e:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <HAL_UART_MspInit+0xe0>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800136a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800137c:	2307      	movs	r3, #7
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f000 fac5 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800138e:	e02d      	b.n	80013ec <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_UART_MspInit+0xe4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d128      	bne.n	80013ec <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_UART_MspInit+0xe0>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <HAL_UART_MspInit+0xe0>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	6593      	str	r3, [r2, #88]	; 0x58
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_UART_MspInit+0xe0>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_UART_MspInit+0xe0>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_UART_MspInit+0xe0>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_UART_MspInit+0xe0>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ca:	230c      	movs	r3, #12
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013da:	2307      	movs	r3, #7
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f000 fa96 	bl	8001918 <HAL_GPIO_Init>
}
 80013ec:	bf00      	nop
 80013ee:	3730      	adds	r7, #48	; 0x30
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40013800 	.word	0x40013800
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40004400 	.word	0x40004400

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 f93a 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	e00a      	b.n	800147c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001466:	f3af 8000 	nop.w
 800146a:	4601      	mov	r1, r0
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	60ba      	str	r2, [r7, #8]
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbf0      	blt.n	8001466 <_read+0x12>
	}

return len;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e009      	b.n	80014b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	60ba      	str	r2, [r7, #8]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dbf1      	blt.n	80014a0 <_write+0x12>
	}
	return len;
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_close>:

int _close(int file)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
	return -1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 80014de:	b480      	push	{r7}
 80014e0:	b085      	sub	sp, #20
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
	return 0;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f008 f8aa 	bl	8009680 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <_sbrk+0x64>)
 8001548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20018000 	.word	0x20018000
 8001558:	00000400 	.word	0x00000400
 800155c:	200001a0 	.word	0x200001a0
 8001560:	200046b0 	.word	0x200046b0

08001564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <SystemInit+0x5c>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156e:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <SystemInit+0x5c>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <SystemInit+0x60>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a11      	ldr	r2, [pc, #68]	; (80015c4 <SystemInit+0x60>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <SystemInit+0x60>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <SystemInit+0x60>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <SystemInit+0x60>)
 8001590:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001594:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001598:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <SystemInit+0x60>)
 800159c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <SystemInit+0x60>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <SystemInit+0x60>)
 80015a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SystemInit+0x60>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00
 80015c4:	40021000 	.word	0x40021000

080015c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015cc:	f7ff ffca 	bl	8001564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015d2:	e003      	b.n	80015dc <LoopCopyDataInit>

080015d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015da:	3104      	adds	r1, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015dc:	480a      	ldr	r0, [pc, #40]	; (8001608 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <LoopForever+0xe>)
	adds	r2, r0, r1
 80015e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015e4:	d3f6      	bcc.n	80015d4 <CopyDataInit>
	ldr	r2, =_sbss
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015e8:	e002      	b.n	80015f0 <LoopFillZerobss>

080015ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015ec:	f842 3b04 	str.w	r3, [r2], #4

080015f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <LoopForever+0x16>)
	cmp	r2, r3
 80015f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015f4:	d3f9      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f6:	f008 fa13 	bl	8009a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015fa:	f7ff fac3 	bl	8000b84 <main>

080015fe <LoopForever>:

LoopForever:
    b LoopForever
 80015fe:	e7fe      	b.n	80015fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001600:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001604:	0800ab78 	.word	0x0800ab78
	ldr	r0, =_sdata
 8001608:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800160c:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8001610:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8001614:	200046b0 	.word	0x200046b0

08001618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC1_2_IRQHandler>

0800161a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 f943 	bl	80018b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f80e 	bl	800164c <HAL_InitTick>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	71fb      	strb	r3, [r7, #7]
 800163a:	e001      	b.n	8001640 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800163c:	f7ff fda6 	bl	800118c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001640:	79fb      	ldrb	r3, [r7, #7]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_InitTick+0x6c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d023      	beq.n	80016a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <HAL_InitTick+0x70>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_InitTick+0x6c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f941 	bl	80018fe <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10f      	bne.n	80016a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d809      	bhi.n	800169c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001690:	f000 f919 	bl	80018c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_InitTick+0x74>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e007      	b.n	80016ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e004      	b.n	80016ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	e001      	b.n	80016ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	20002628 	.word	0x20002628

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20002628 	.word	0x20002628

08001704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008

0800174c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	; (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	; (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800187c:	d301      	bcc.n	8001882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187e:	2301      	movs	r3, #1
 8001880:	e00f      	b.n	80018a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <SysTick_Config+0x40>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188a:	210f      	movs	r1, #15
 800188c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001890:	f7ff ff8e 	bl	80017b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <SysTick_Config+0x40>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <SysTick_Config+0x40>)
 800189c:	2207      	movs	r2, #7
 800189e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	e000e010 	.word	0xe000e010

080018b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff47 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018d8:	f7ff ff5c 	bl	8001794 <__NVIC_GetPriorityGrouping>
 80018dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f7ff ff8e 	bl	8001804 <NVIC_EncodePriority>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff5d 	bl	80017b0 <__NVIC_SetPriority>
}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffb0 	bl	800186c <SysTick_Config>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001926:	e17f      	b.n	8001c28 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2101      	movs	r1, #1
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	fa01 f303 	lsl.w	r3, r1, r3
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8171 	beq.w	8001c22 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d00b      	beq.n	8001960 <HAL_GPIO_Init+0x48>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d007      	beq.n	8001960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001954:	2b11      	cmp	r3, #17
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b12      	cmp	r3, #18
 800195e:	d130      	bne.n	80019c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001996:	2201      	movs	r2, #1
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f003 0201 	and.w	r2, r3, #1
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d118      	bne.n	8001a00 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019d4:	2201      	movs	r2, #1
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	08db      	lsrs	r3, r3, #3
 80019ea:	f003 0201 	and.w	r2, r3, #1
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x128>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b12      	cmp	r3, #18
 8001a3e:	d123      	bne.n	8001a88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	08da      	lsrs	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3208      	adds	r2, #8
 8001a82:	6939      	ldr	r1, [r7, #16]
 8001a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80ac 	beq.w	8001c22 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	4b5f      	ldr	r3, [pc, #380]	; (8001c48 <HAL_GPIO_Init+0x330>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ace:	4a5e      	ldr	r2, [pc, #376]	; (8001c48 <HAL_GPIO_Init+0x330>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad6:	4b5c      	ldr	r3, [pc, #368]	; (8001c48 <HAL_GPIO_Init+0x330>)
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ae2:	4a5a      	ldr	r2, [pc, #360]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	220f      	movs	r2, #15
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b0c:	d025      	beq.n	8001b5a <HAL_GPIO_Init+0x242>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4f      	ldr	r2, [pc, #316]	; (8001c50 <HAL_GPIO_Init+0x338>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01f      	beq.n	8001b56 <HAL_GPIO_Init+0x23e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4e      	ldr	r2, [pc, #312]	; (8001c54 <HAL_GPIO_Init+0x33c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d019      	beq.n	8001b52 <HAL_GPIO_Init+0x23a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_GPIO_Init+0x340>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0x236>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4c      	ldr	r2, [pc, #304]	; (8001c5c <HAL_GPIO_Init+0x344>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00d      	beq.n	8001b4a <HAL_GPIO_Init+0x232>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4b      	ldr	r2, [pc, #300]	; (8001c60 <HAL_GPIO_Init+0x348>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d007      	beq.n	8001b46 <HAL_GPIO_Init+0x22e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4a      	ldr	r2, [pc, #296]	; (8001c64 <HAL_GPIO_Init+0x34c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_GPIO_Init+0x22a>
 8001b3e:	2306      	movs	r3, #6
 8001b40:	e00c      	b.n	8001b5c <HAL_GPIO_Init+0x244>
 8001b42:	2307      	movs	r3, #7
 8001b44:	e00a      	b.n	8001b5c <HAL_GPIO_Init+0x244>
 8001b46:	2305      	movs	r3, #5
 8001b48:	e008      	b.n	8001b5c <HAL_GPIO_Init+0x244>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x244>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x244>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x244>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x244>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4093      	lsls	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b6c:	4937      	ldr	r1, [pc, #220]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b9e:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ba4:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bc8:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f47f ae78 	bne.w	8001928 <HAL_GPIO_Init+0x10>
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	48000400 	.word	0x48000400
 8001c54:	48000800 	.word	0x48000800
 8001c58:	48000c00 	.word	0x48000c00
 8001c5c:	48001000 	.word	0x48001000
 8001c60:	48001400 	.word	0x48001400
 8001c64:	48001800 	.word	0x48001800
 8001c68:	40010400 	.word	0x40010400

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c88:	e002      	b.n	8001c90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c8a:	887a      	ldrh	r2, [r7, #2]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e081      	b.n	8001db2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fa86 	bl	80011d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2224      	movs	r2, #36	; 0x24
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d107      	bne.n	8001d16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	e006      	b.n	8001d24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d104      	bne.n	8001d36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	ea42 0103 	orr.w	r1, r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	021a      	lsls	r2, r3, #8
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69d9      	ldr	r1, [r3, #28]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1a      	ldr	r2, [r3, #32]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	d138      	bne.n	8001e42 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e032      	b.n	8001e44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2224      	movs	r2, #36	; 0x24
 8001dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e0c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
  }
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d139      	bne.n	8001eda <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e033      	b.n	8001edc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ea2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eda:	2302      	movs	r3, #2
  }
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40007000 	.word	0x40007000

08001f08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40007000 	.word	0x40007000

08001f24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f32:	d130      	bne.n	8001f96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f40:	d038      	beq.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2232      	movs	r2, #50	; 0x32
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0c9b      	lsrs	r3, r3, #18
 8001f64:	3301      	adds	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f68:	e002      	b.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7c:	d102      	bne.n	8001f84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f2      	bne.n	8001f6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f90:	d110      	bne.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e00f      	b.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa2:	d007      	beq.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fac:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	431bde83 	.word	0x431bde83

08001fd0 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0307 	bic.w	r3, r3, #7
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001ffc:	bf30      	wfi
 8001ffe:	e002      	b.n	8002006 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002000:	bf40      	sev
    __WFE();
 8002002:	bf20      	wfe
    __WFE();
 8002004:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	4a06      	ldr	r2, [pc, #24]	; (8002024 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	6113      	str	r3, [r2, #16]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40007000 	.word	0x40007000
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e3d4      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203a:	4ba1      	ldr	r3, [pc, #644]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002044:	4b9e      	ldr	r3, [pc, #632]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80e4 	beq.w	8002224 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_RCC_OscConfig+0x4a>
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	f040 808b 	bne.w	8002180 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b01      	cmp	r3, #1
 800206e:	f040 8087 	bne.w	8002180 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002072:	4b93      	ldr	r3, [pc, #588]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_RCC_OscConfig+0x62>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e3ac      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1a      	ldr	r2, [r3, #32]
 800208e:	4b8c      	ldr	r3, [pc, #560]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <HAL_RCC_OscConfig+0x7c>
 800209a:	4b89      	ldr	r3, [pc, #548]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a2:	e005      	b.n	80020b0 <HAL_RCC_OscConfig+0x88>
 80020a4:	4b86      	ldr	r3, [pc, #536]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80020a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d223      	bcs.n	80020fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fe39 	bl	8002d30 <RCC_SetFlashLatencyFromMSIRange>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e38d      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c8:	4b7d      	ldr	r3, [pc, #500]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a7c      	ldr	r2, [pc, #496]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4977      	ldr	r1, [pc, #476]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e6:	4b76      	ldr	r3, [pc, #472]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	4972      	ldr	r1, [pc, #456]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
 80020fa:	e025      	b.n	8002148 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020fc:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a6f      	ldr	r2, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b6d      	ldr	r3, [pc, #436]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	496a      	ldr	r1, [pc, #424]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211a:	4b69      	ldr	r3, [pc, #420]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	4965      	ldr	r1, [pc, #404]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fdf9 	bl	8002d30 <RCC_SetFlashLatencyFromMSIRange>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e34d      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002148:	f000 fc36 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b5c      	ldr	r3, [pc, #368]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	495a      	ldr	r1, [pc, #360]	; (80022c4 <HAL_RCC_OscConfig+0x29c>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_RCC_OscConfig+0x2a0>)
 8002166:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002168:	4b58      	ldr	r3, [pc, #352]	; (80022cc <HAL_RCC_OscConfig+0x2a4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fa6d 	bl	800164c <HAL_InitTick>
 8002172:	4603      	mov	r3, r0
 8002174:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d052      	beq.n	8002222 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	e331      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d032      	beq.n	80021ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002188:	4b4d      	ldr	r3, [pc, #308]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a4c      	ldr	r2, [pc, #304]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002194:	f7ff faaa 	bl	80016ec <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800219c:	f7ff faa6 	bl	80016ec <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e31a      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ae:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ba:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a40      	ldr	r2, [pc, #256]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	493b      	ldr	r1, [pc, #236]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d8:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	4936      	ldr	r1, [pc, #216]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	e01a      	b.n	8002224 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021ee:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a33      	ldr	r2, [pc, #204]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021fa:	f7ff fa77 	bl	80016ec <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002202:	f7ff fa73 	bl	80016ec <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e2e7      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x1da>
 8002220:	e000      	b.n	8002224 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002222:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d074      	beq.n	800231a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b08      	cmp	r3, #8
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x21a>
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b0c      	cmp	r3, #12
 800223a:	d10e      	bne.n	800225a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d10b      	bne.n	800225a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d064      	beq.n	8002318 <HAL_RCC_OscConfig+0x2f0>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d160      	bne.n	8002318 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e2c4      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x24a>
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e01d      	b.n	80022ae <HAL_RCC_OscConfig+0x286>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227a:	d10c      	bne.n	8002296 <HAL_RCC_OscConfig+0x26e>
 800227c:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 8002282:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e00b      	b.n	80022ae <HAL_RCC_OscConfig+0x286>
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 800229c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <HAL_RCC_OscConfig+0x298>)
 80022a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01c      	beq.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b6:	f7ff fa19 	bl	80016ec <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022bc:	e011      	b.n	80022e2 <HAL_RCC_OscConfig+0x2ba>
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	0800a648 	.word	0x0800a648
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7ff fa0c 	bl	80016ec <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e280      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e2:	4baf      	ldr	r3, [pc, #700]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x2a8>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7ff f9fc 	bl	80016ec <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7ff f9f8 	bl	80016ec <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e26c      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230a:	4ba5      	ldr	r3, [pc, #660]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x2d0>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d060      	beq.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d005      	beq.n	8002338 <HAL_RCC_OscConfig+0x310>
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d119      	bne.n	8002366 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d116      	bne.n	8002366 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002338:	4b99      	ldr	r3, [pc, #612]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_OscConfig+0x328>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e249      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b93      	ldr	r3, [pc, #588]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	4990      	ldr	r1, [pc, #576]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002364:	e040      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d023      	beq.n	80023b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236e:	4b8c      	ldr	r3, [pc, #560]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a8b      	ldr	r2, [pc, #556]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7ff f9b7 	bl	80016ec <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7ff f9b3 	bl	80016ec <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e227      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002394:	4b82      	ldr	r3, [pc, #520]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	4b7f      	ldr	r3, [pc, #508]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	497c      	ldr	r1, [pc, #496]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
 80023b4:	e018      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b6:	4b7a      	ldr	r3, [pc, #488]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a79      	ldr	r2, [pc, #484]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 80023bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c2:	f7ff f993 	bl	80016ec <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ca:	f7ff f98f 	bl	80016ec <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e203      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023dc:	4b70      	ldr	r3, [pc, #448]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f0      	bne.n	80023ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d03c      	beq.n	800246e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01c      	beq.n	8002436 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fc:	4b68      	ldr	r3, [pc, #416]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002402:	4a67      	ldr	r2, [pc, #412]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7ff f96e 	bl	80016ec <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff f96a 	bl	80016ec <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1de      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002426:	4b5e      	ldr	r3, [pc, #376]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ef      	beq.n	8002414 <HAL_RCC_OscConfig+0x3ec>
 8002434:	e01b      	b.n	800246e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002436:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7ff f951 	bl	80016ec <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff f94d 	bl	80016ec <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1c1      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002460:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1ef      	bne.n	800244e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80a6 	beq.w	80025c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002480:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10d      	bne.n	80024a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	4a43      	ldr	r2, [pc, #268]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002496:	6593      	str	r3, [r2, #88]	; 0x58
 8002498:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a4:	2301      	movs	r3, #1
 80024a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a8:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <HAL_RCC_OscConfig+0x57c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d118      	bne.n	80024e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b4:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCC_OscConfig+0x57c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a3a      	ldr	r2, [pc, #232]	; (80025a4 <HAL_RCC_OscConfig+0x57c>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c0:	f7ff f914 	bl	80016ec <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c8:	f7ff f910 	bl	80016ec <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e184      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_RCC_OscConfig+0x57c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <HAL_RCC_OscConfig+0x4d8>
 80024ee:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	4a2a      	ldr	r2, [pc, #168]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024fe:	e024      	b.n	800254a <HAL_RCC_OscConfig+0x522>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d110      	bne.n	800252a <HAL_RCC_OscConfig+0x502>
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002518:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002528:	e00f      	b.n	800254a <HAL_RCC_OscConfig+0x522>
 800252a:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002540:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002542:	f023 0304 	bic.w	r3, r3, #4
 8002546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d016      	beq.n	8002580 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7ff f8cb 	bl	80016ec <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7ff f8c7 	bl	80016ec <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	; 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e139      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x578>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0ed      	beq.n	800255a <HAL_RCC_OscConfig+0x532>
 800257e:	e01a      	b.n	80025b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7ff f8b4 	bl	80016ec <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002586:	e00f      	b.n	80025a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f7ff f8b0 	bl	80016ec <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d906      	bls.n	80025a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e122      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a8:	4b90      	ldr	r3, [pc, #576]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1e8      	bne.n	8002588 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b6:	7ffb      	ldrb	r3, [r7, #31]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b8b      	ldr	r3, [pc, #556]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	4a8a      	ldr	r2, [pc, #552]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80025c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8108 	beq.w	80027e2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	f040 80d0 	bne.w	800277c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025dc:	4b83      	ldr	r3, [pc, #524]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d130      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	3b01      	subs	r3, #1
 80025fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d127      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d11f      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800261c:	2a07      	cmp	r2, #7
 800261e:	bf14      	ite	ne
 8002620:	2201      	movne	r2, #1
 8002622:	2200      	moveq	r2, #0
 8002624:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002626:	4293      	cmp	r3, r2
 8002628:	d113      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	085b      	lsrs	r3, r3, #1
 8002636:	3b01      	subs	r3, #1
 8002638:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d109      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	3b01      	subs	r3, #1
 800264c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d06e      	beq.n	8002730 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d069      	beq.n	800272c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002658:	4b64      	ldr	r3, [pc, #400]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002664:	4b61      	ldr	r3, [pc, #388]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0b7      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002674:	4b5d      	ldr	r3, [pc, #372]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a5c      	ldr	r2, [pc, #368]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 800267a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800267e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002680:	f7ff f834 	bl	80016ec <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff f830 	bl	80016ec <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e0a4      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269a:	4b54      	ldr	r3, [pc, #336]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a6:	4b51      	ldr	r3, [pc, #324]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4b51      	ldr	r3, [pc, #324]	; (80027f0 <HAL_RCC_OscConfig+0x7c8>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026b6:	3a01      	subs	r2, #1
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	4311      	orrs	r1, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026c0:	0212      	lsls	r2, r2, #8
 80026c2:	4311      	orrs	r1, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026c8:	0852      	lsrs	r2, r2, #1
 80026ca:	3a01      	subs	r2, #1
 80026cc:	0552      	lsls	r2, r2, #21
 80026ce:	4311      	orrs	r1, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026d4:	0852      	lsrs	r2, r2, #1
 80026d6:	3a01      	subs	r2, #1
 80026d8:	0652      	lsls	r2, r2, #25
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026e0:	0912      	lsrs	r2, r2, #4
 80026e2:	0452      	lsls	r2, r2, #17
 80026e4:	430a      	orrs	r2, r1
 80026e6:	4941      	ldr	r1, [pc, #260]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026ec:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a3e      	ldr	r2, [pc, #248]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80026f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026f8:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a3b      	ldr	r2, [pc, #236]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80026fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002704:	f7fe fff2 	bl	80016ec <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7fe ffee 	bl	80016ec <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e062      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271e:	4b33      	ldr	r3, [pc, #204]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800272a:	e05a      	b.n	80027e2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e059      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002730:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d152      	bne.n	80027e2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 8002742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002746:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002748:	4b28      	ldr	r3, [pc, #160]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a27      	ldr	r2, [pc, #156]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 800274e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002752:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002754:	f7fe ffca 	bl	80016ec <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe ffc6 	bl	80016ec <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e03a      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x734>
 800277a:	e032      	b.n	80027e2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b0c      	cmp	r3, #12
 8002780:	d02d      	beq.n	80027de <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a19      	ldr	r2, [pc, #100]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 8002788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800278c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4a13      	ldr	r2, [pc, #76]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80027a0:	f023 0303 	bic.w	r3, r3, #3
 80027a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	4a10      	ldr	r2, [pc, #64]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80027ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe ff99 	bl	80016ec <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7fe ff95 	bl	80016ec <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e009      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_OscConfig+0x7c4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x796>
 80027dc:	e001      	b.n	80027e2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3720      	adds	r7, #32
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	f99d808c 	.word	0xf99d808c

080027f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0c8      	b.n	800299a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002808:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_RCC_ClockConfig+0x1b0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d910      	bls.n	8002838 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 0207 	bic.w	r2, r3, #7
 800281e:	4961      	ldr	r1, [pc, #388]	; (80029a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b5f      	ldr	r3, [pc, #380]	; (80029a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0b0      	b.n	800299a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d04c      	beq.n	80028de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d107      	bne.n	800285c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284c:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d121      	bne.n	800289c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e09e      	b.n	800299a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d107      	bne.n	8002874 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d115      	bne.n	800289c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e092      	b.n	800299a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d107      	bne.n	800288c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800287c:	4b4a      	ldr	r3, [pc, #296]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d109      	bne.n	800289c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e086      	b.n	800299a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800288c:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e07e      	b.n	800299a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800289c:	4b42      	ldr	r3, [pc, #264]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f023 0203 	bic.w	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	493f      	ldr	r1, [pc, #252]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ae:	f7fe ff1d 	bl	80016ec <HAL_GetTick>
 80028b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b4:	e00a      	b.n	80028cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b6:	f7fe ff19 	bl	80016ec <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e066      	b.n	800299a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028cc:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 020c 	and.w	r2, r3, #12
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	429a      	cmp	r2, r3
 80028dc:	d1eb      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ea:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	492c      	ldr	r1, [pc, #176]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <HAL_RCC_ClockConfig+0x1b0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d210      	bcs.n	800292c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <HAL_RCC_ClockConfig+0x1b0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 0207 	bic.w	r2, r3, #7
 8002912:	4924      	ldr	r1, [pc, #144]	; (80029a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_RCC_ClockConfig+0x1b0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e036      	b.n	800299a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4918      	ldr	r1, [pc, #96]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4910      	ldr	r1, [pc, #64]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800296a:	f000 f825 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	490c      	ldr	r1, [pc, #48]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	5ccb      	ldrb	r3, [r1, r3]
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	fa22 f303 	lsr.w	r3, r2, r3
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fe5c 	bl	800164c <HAL_InitTick>
 8002994:	4603      	mov	r3, r0
 8002996:	72fb      	strb	r3, [r7, #11]

  return status;
 8002998:	7afb      	ldrb	r3, [r7, #11]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40022000 	.word	0x40022000
 80029a8:	40021000 	.word	0x40021000
 80029ac:	0800a648 	.word	0x0800a648
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000004 	.word	0x20000004

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c6:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d0:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x34>
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d121      	bne.n	8002a2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d11e      	bne.n	8002a2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029ec:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029f8:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	e005      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a08:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a14:	4a2b      	ldr	r2, [pc, #172]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10d      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d102      	bne.n	8002a36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a30:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	e004      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a3c:	4b23      	ldr	r3, [pc, #140]	; (8002acc <HAL_RCC_GetSysClockFreq+0x114>)
 8002a3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b0c      	cmp	r3, #12
 8002a44:	d134      	bne.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d003      	beq.n	8002a5e <HAL_RCC_GetSysClockFreq+0xa6>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d003      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0xac>
 8002a5c:	e005      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a60:	617b      	str	r3, [r7, #20]
      break;
 8002a62:	e005      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCC_GetSysClockFreq+0x114>)
 8002a66:	617b      	str	r3, [r7, #20]
      break;
 8002a68:	e002      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	617b      	str	r3, [r7, #20]
      break;
 8002a6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	0a1b      	lsrs	r3, r3, #8
 8002a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	fb02 f203 	mul.w	r2, r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	0e5b      	lsrs	r3, r3, #25
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3724      	adds	r7, #36	; 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	0800a660 	.word	0x0800a660
 8002ac8:	00f42400 	.word	0x00f42400
 8002acc:	007a1200 	.word	0x007a1200

08002ad0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000000 	.word	0x20000000

08002ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002aec:	f7ff fff0 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0a1b      	lsrs	r3, r3, #8
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4904      	ldr	r1, [pc, #16]	; (8002b10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	0800a658 	.word	0x0800a658

08002b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b18:	f7ff ffda 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	0adb      	lsrs	r3, r3, #11
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	4904      	ldr	r1, [pc, #16]	; (8002b3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b2a:	5ccb      	ldrb	r3, [r1, r3]
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	0800a658 	.word	0x0800a658

08002b40 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct  pointer to an RCC_OscInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
#if defined(RCC_HSI48_SUPPORT)
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI48;
#else
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	221f      	movs	r2, #31
 8002b4c:	601a      	str	r2, [r3, #0]
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
#endif /* RCC_HSI48_SUPPORT */

  /* Get the HSE configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8002b4e:	4b5e      	ldr	r3, [pc, #376]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b5a:	d104      	bne.n	8002b66 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	e00e      	b.n	8002b84 <HAL_RCC_GetOscConfig+0x44>
  }
  else if(READ_BIT(RCC->CR, RCC_CR_HSEON) == RCC_CR_HSEON)
 8002b66:	4b58      	ldr	r3, [pc, #352]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b72:	d104      	bne.n	8002b7e <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	e002      	b.n	8002b84 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	605a      	str	r2, [r3, #4]
  }

   /* Get the MSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_MSION) == RCC_CR_MSION)
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d103      	bne.n	8002b98 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	619a      	str	r2, [r3, #24]
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
  }

  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	621a      	str	r2, [r3, #32]

  /* Get the HSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_HSION) == RCC_CR_HSION)
 8002bb6:	4b44      	ldr	r3, [pc, #272]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc2:	d104      	bne.n	8002bce <HAL_RCC_GetOscConfig+0x8e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	e002      	b.n	8002bd4 <HAL_RCC_GetOscConfig+0x94>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos;
 8002bd4:	4b3c      	ldr	r3, [pc, #240]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	0e1b      	lsrs	r3, r3, #24
 8002bda:	f003 021f 	and.w	r2, r3, #31
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8002be2:	4b39      	ldr	r3, [pc, #228]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d103      	bne.n	8002bf8 <HAL_RCC_GetOscConfig+0xb8>
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS_RTC_ONLY;
    }
    else
#endif /* RCC_BDCR_LSESYSDIS */
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2205      	movs	r2, #5
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	e00d      	b.n	8002c14 <HAL_RCC_GetOscConfig+0xd4>
    }
  }
  else if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8002bf8:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d103      	bne.n	8002c0e <HAL_RCC_GetOscConfig+0xce>
      RCC_OscInitStruct->LSEState = RCC_LSE_ON_RTC_ONLY;
    }
    else
#endif /* RCC_BDCR_LSESYSDIS */
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e002      	b.n	8002c14 <HAL_RCC_GetOscConfig+0xd4>
    }
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 8002c14:	4b2c      	ldr	r3, [pc, #176]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d103      	bne.n	8002c2a <HAL_RCC_GetOscConfig+0xea>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	615a      	str	r2, [r3, #20]
 8002c28:	e002      	b.n	8002c30 <HAL_RCC_GetOscConfig+0xf0>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	615a      	str	r2, [r3, #20]
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
  }
#else
  RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_HSI48_SUPPORT */

  /* Get the PLL configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c42:	d103      	bne.n	8002c4c <HAL_RCC_GetOscConfig+0x10c>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28
 8002c4a:	e002      	b.n	8002c52 <HAL_RCC_GetOscConfig+0x112>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	629a      	str	r2, [r3, #40]	; 0x28
  }
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0203 	and.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002c6e:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	0d5b      	lsrs	r3, r3, #21
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	3301      	adds	r3, #1
 8002c88:	005a      	lsls	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLR = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	0e5b      	lsrs	r3, r3, #25
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	005a      	lsls	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
  RCC_OscInitStruct->PLL.PLLP = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#else
  if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_GetOscConfig+0x188>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_RCC_GetOscConfig+0x174>
  {
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV17;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2211      	movs	r2, #17
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38
  {
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
  }
#endif /* RCC_PLLP_DIV_2_31_SUPPORT */
#endif /* RCC_PLLP_SUPPORT */
}
 8002cb2:	e002      	b.n	8002cba <HAL_RCC_GetOscConfig+0x17a>
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000

08002ccc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	220f      	movs	r2, #15
 8002cda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_RCC_GetClockConfig+0x5c>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0203 	and.w	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <HAL_RCC_GetClockConfig+0x5c>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_RCC_GetClockConfig+0x5c>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_GetClockConfig+0x5c>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	08db      	lsrs	r3, r3, #3
 8002d06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d0e:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <HAL_RCC_GetClockConfig+0x60>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0207 	and.w	r2, r3, #7
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40022000 	.word	0x40022000

08002d30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d48:	f7ff f8de 	bl	8001f08 <HAL_PWREx_GetVoltageRange>
 8002d4c:	6178      	str	r0, [r7, #20]
 8002d4e:	e014      	b.n	8002d7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	4a24      	ldr	r2, [pc, #144]	; (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d5c:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d68:	f7ff f8ce 	bl	8001f08 <HAL_PWREx_GetVoltageRange>
 8002d6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d80:	d10b      	bne.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b80      	cmp	r3, #128	; 0x80
 8002d86:	d919      	bls.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2ba0      	cmp	r3, #160	; 0xa0
 8002d8c:	d902      	bls.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d8e:	2302      	movs	r3, #2
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	e013      	b.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d94:	2301      	movs	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e010      	b.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b80      	cmp	r3, #128	; 0x80
 8002d9e:	d902      	bls.n	8002da6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002da0:	2303      	movs	r3, #3
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	e00a      	b.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b80      	cmp	r3, #128	; 0x80
 8002daa:	d102      	bne.n	8002db2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dac:	2302      	movs	r3, #2
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	e004      	b.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b70      	cmp	r3, #112	; 0x70
 8002db6:	d101      	bne.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002db8:	2301      	movs	r3, #1
 8002dba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 0207 	bic.w	r2, r3, #7
 8002dc4:	4909      	ldr	r1, [pc, #36]	; (8002dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d001      	beq.n	8002dde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40022000 	.word	0x40022000

08002df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002df8:	2300      	movs	r3, #0
 8002dfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d041      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e14:	d02a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e1a:	d824      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e20:	d008      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e26:	d81e      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e30:	d010      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e32:	e018      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e34:	4b86      	ldr	r3, [pc, #536]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a85      	ldr	r2, [pc, #532]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e40:	e015      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fabb 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e52:	e00c      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3320      	adds	r3, #32
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fba6 	bl	80035ac <RCCEx_PLLSAI2_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e64:	e003      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	74fb      	strb	r3, [r7, #19]
      break;
 8002e6a:	e000      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e6e:	7cfb      	ldrb	r3, [r7, #19]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10b      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e74:	4b76      	ldr	r3, [pc, #472]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e82:	4973      	ldr	r1, [pc, #460]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e8a:	e001      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d041      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ea4:	d02a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ea6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eaa:	d824      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002eac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eb0:	d008      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002eb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eb6:	d81e      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ec0:	d010      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ec2:	e018      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ec4:	4b62      	ldr	r3, [pc, #392]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a61      	ldr	r2, [pc, #388]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ece:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ed0:	e015      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fa73 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ee2:	e00c      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3320      	adds	r3, #32
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fb5e 	bl	80035ac <RCCEx_PLLSAI2_Config>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ef4:	e003      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	74fb      	strb	r3, [r7, #19]
      break;
 8002efa:	e000      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f04:	4b52      	ldr	r3, [pc, #328]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f12:	494f      	ldr	r1, [pc, #316]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f1a:	e001      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80a0 	beq.w	800306e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f32:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f48:	4b41      	ldr	r3, [pc, #260]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	4a40      	ldr	r2, [pc, #256]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f52:	6593      	str	r3, [r2, #88]	; 0x58
 8002f54:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f60:	2301      	movs	r3, #1
 8002f62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f64:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a3a      	ldr	r2, [pc, #232]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f70:	f7fe fbbc 	bl	80016ec <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f76:	e009      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f78:	f7fe fbb8 	bl	80016ec <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d902      	bls.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	74fb      	strb	r3, [r7, #19]
        break;
 8002f8a:	e005      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f8c:	4b31      	ldr	r3, [pc, #196]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d15c      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01f      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d019      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fbc:	4b24      	ldr	r3, [pc, #144]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fc8:	4b21      	ldr	r3, [pc, #132]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	4a20      	ldr	r2, [pc, #128]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fe8:	4a19      	ldr	r2, [pc, #100]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fb77 	bl	80016ec <HAL_GetTick>
 8002ffe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003000:	e00b      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fe fb73 	bl	80016ec <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d902      	bls.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	74fb      	strb	r3, [r7, #19]
            break;
 8003018:	e006      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ec      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10c      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800303e:	4904      	ldr	r1, [pc, #16]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003046:	e009      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	74bb      	strb	r3, [r7, #18]
 800304c:	e006      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800305c:	7c7b      	ldrb	r3, [r7, #17]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d105      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003062:	4b9e      	ldr	r3, [pc, #632]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	4a9d      	ldr	r2, [pc, #628]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800307a:	4b98      	ldr	r3, [pc, #608]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003080:	f023 0203 	bic.w	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	4994      	ldr	r1, [pc, #592]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800309c:	4b8f      	ldr	r3, [pc, #572]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f023 020c 	bic.w	r2, r3, #12
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	498c      	ldr	r1, [pc, #560]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030be:	4b87      	ldr	r3, [pc, #540]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	4983      	ldr	r1, [pc, #524]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030e0:	4b7e      	ldr	r3, [pc, #504]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	497b      	ldr	r1, [pc, #492]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003102:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003110:	4972      	ldr	r1, [pc, #456]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003124:	4b6d      	ldr	r3, [pc, #436]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	496a      	ldr	r1, [pc, #424]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003146:	4b65      	ldr	r3, [pc, #404]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	4961      	ldr	r1, [pc, #388]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003168:	4b5c      	ldr	r3, [pc, #368]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003176:	4959      	ldr	r1, [pc, #356]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800318a:	4b54      	ldr	r3, [pc, #336]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003198:	4950      	ldr	r1, [pc, #320]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031ac:	4b4b      	ldr	r3, [pc, #300]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	4948      	ldr	r1, [pc, #288]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ce:	4b43      	ldr	r3, [pc, #268]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	493f      	ldr	r1, [pc, #252]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d028      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f0:	4b3a      	ldr	r3, [pc, #232]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031fe:	4937      	ldr	r1, [pc, #220]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800320a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800320e:	d106      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003210:	4b32      	ldr	r3, [pc, #200]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4a31      	ldr	r2, [pc, #196]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800321a:	60d3      	str	r3, [r2, #12]
 800321c:	e011      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003222:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003226:	d10c      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	2101      	movs	r1, #1
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f8c8 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003238:	7cfb      	ldrb	r3, [r7, #19]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d028      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	491f      	ldr	r1, [pc, #124]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800326c:	d106      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	4a1a      	ldr	r2, [pc, #104]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003278:	60d3      	str	r3, [r2, #12]
 800327a:	e011      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	2101      	movs	r1, #1
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f899 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d02b      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	4908      	ldr	r1, [pc, #32]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ca:	d109      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a02      	ldr	r2, [pc, #8]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032d6:	60d3      	str	r3, [r2, #12]
 80032d8:	e014      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032e8:	d10c      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2101      	movs	r1, #1
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 f867 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d02f      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003310:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331e:	4928      	ldr	r1, [pc, #160]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800332a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800332e:	d10d      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	2102      	movs	r1, #2
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f844 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d014      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	74bb      	strb	r3, [r7, #18]
 800334a:	e011      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003354:	d10c      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3320      	adds	r3, #32
 800335a:	2102      	movs	r1, #2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 f925 	bl	80035ac <RCCEx_PLLSAI2_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003366:	7cfb      	ldrb	r3, [r7, #19]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338a:	490d      	ldr	r1, [pc, #52]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800339e:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ae:	4904      	ldr	r1, [pc, #16]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000

080033c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033d2:	4b75      	ldr	r3, [pc, #468]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d018      	beq.n	8003410 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033de:	4b72      	ldr	r3, [pc, #456]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0203 	and.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d10d      	bne.n	800340a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
       ||
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033f6:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
       ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d047      	beq.n	800349a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	e044      	b.n	800349a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d018      	beq.n	800344a <RCCEx_PLLSAI1_Config+0x86>
 8003418:	2b03      	cmp	r3, #3
 800341a:	d825      	bhi.n	8003468 <RCCEx_PLLSAI1_Config+0xa4>
 800341c:	2b01      	cmp	r3, #1
 800341e:	d002      	beq.n	8003426 <RCCEx_PLLSAI1_Config+0x62>
 8003420:	2b02      	cmp	r3, #2
 8003422:	d009      	beq.n	8003438 <RCCEx_PLLSAI1_Config+0x74>
 8003424:	e020      	b.n	8003468 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003426:	4b60      	ldr	r3, [pc, #384]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11d      	bne.n	800346e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003436:	e01a      	b.n	800346e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003438:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d116      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003448:	e013      	b.n	8003472 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800344a:	4b57      	ldr	r3, [pc, #348]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003456:	4b54      	ldr	r3, [pc, #336]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003466:	e006      	b.n	8003476 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      break;
 800346c:	e004      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800346e:	bf00      	nop
 8003470:	e002      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003476:	bf00      	nop
    }

    if(status == HAL_OK)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10d      	bne.n	800349a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800347e:	4b4a      	ldr	r3, [pc, #296]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	430b      	orrs	r3, r1
 8003494:	4944      	ldr	r1, [pc, #272]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d17d      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034a0:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a40      	ldr	r2, [pc, #256]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7fe f91e 	bl	80016ec <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b2:	e009      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b4:	f7fe f91a 	bl	80016ec <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d902      	bls.n	80034c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	73fb      	strb	r3, [r7, #15]
        break;
 80034c6:	e005      	b.n	80034d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034c8:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1ef      	bne.n	80034b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d160      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d111      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e0:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6892      	ldr	r2, [r2, #8]
 80034f0:	0211      	lsls	r1, r2, #8
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	0912      	lsrs	r2, r2, #4
 80034f8:	0452      	lsls	r2, r2, #17
 80034fa:	430a      	orrs	r2, r1
 80034fc:	492a      	ldr	r1, [pc, #168]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	610b      	str	r3, [r1, #16]
 8003502:	e027      	b.n	8003554 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d112      	bne.n	8003530 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003512:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6892      	ldr	r2, [r2, #8]
 800351a:	0211      	lsls	r1, r2, #8
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6912      	ldr	r2, [r2, #16]
 8003520:	0852      	lsrs	r2, r2, #1
 8003522:	3a01      	subs	r2, #1
 8003524:	0552      	lsls	r2, r2, #21
 8003526:	430a      	orrs	r2, r1
 8003528:	491f      	ldr	r1, [pc, #124]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	610b      	str	r3, [r1, #16]
 800352e:	e011      	b.n	8003554 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6892      	ldr	r2, [r2, #8]
 8003540:	0211      	lsls	r1, r2, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6952      	ldr	r2, [r2, #20]
 8003546:	0852      	lsrs	r2, r2, #1
 8003548:	3a01      	subs	r2, #1
 800354a:	0652      	lsls	r2, r2, #25
 800354c:	430a      	orrs	r2, r1
 800354e:	4916      	ldr	r1, [pc, #88]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a13      	ldr	r2, [pc, #76]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800355e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fe f8c4 	bl	80016ec <HAL_GetTick>
 8003564:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003566:	e009      	b.n	800357c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003568:	f7fe f8c0 	bl	80016ec <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d902      	bls.n	800357c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	73fb      	strb	r3, [r7, #15]
          break;
 800357a:	e005      	b.n	8003588 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ef      	beq.n	8003568 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	4904      	ldr	r1, [pc, #16]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003598:	4313      	orrs	r3, r2
 800359a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000

080035ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ba:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d018      	beq.n	80035f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035c6:	4b67      	ldr	r3, [pc, #412]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0203 	and.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d10d      	bne.n	80035f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
       ||
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035de:	4b61      	ldr	r3, [pc, #388]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
       ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d047      	beq.n	8003682 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	e044      	b.n	8003682 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d018      	beq.n	8003632 <RCCEx_PLLSAI2_Config+0x86>
 8003600:	2b03      	cmp	r3, #3
 8003602:	d825      	bhi.n	8003650 <RCCEx_PLLSAI2_Config+0xa4>
 8003604:	2b01      	cmp	r3, #1
 8003606:	d002      	beq.n	800360e <RCCEx_PLLSAI2_Config+0x62>
 8003608:	2b02      	cmp	r3, #2
 800360a:	d009      	beq.n	8003620 <RCCEx_PLLSAI2_Config+0x74>
 800360c:	e020      	b.n	8003650 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800360e:	4b55      	ldr	r3, [pc, #340]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11d      	bne.n	8003656 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361e:	e01a      	b.n	8003656 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003628:	2b00      	cmp	r3, #0
 800362a:	d116      	bne.n	800365a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e013      	b.n	800365a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003632:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10f      	bne.n	800365e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800363e:	4b49      	ldr	r3, [pc, #292]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800364e:	e006      	b.n	800365e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      break;
 8003654:	e004      	b.n	8003660 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003656:	bf00      	nop
 8003658:	e002      	b.n	8003660 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800365e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10d      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003666:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	3b01      	subs	r3, #1
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	430b      	orrs	r3, r1
 800367c:	4939      	ldr	r1, [pc, #228]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d167      	bne.n	8003758 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003688:	4b36      	ldr	r3, [pc, #216]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a35      	ldr	r2, [pc, #212]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fe f82a 	bl	80016ec <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800369a:	e009      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800369c:	f7fe f826 	bl	80016ec <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d902      	bls.n	80036b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	73fb      	strb	r3, [r7, #15]
        break;
 80036ae:	e005      	b.n	80036bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036b0:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ef      	bne.n	800369c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d14a      	bne.n	8003758 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d111      	bne.n	80036ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6892      	ldr	r2, [r2, #8]
 80036d8:	0211      	lsls	r1, r2, #8
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68d2      	ldr	r2, [r2, #12]
 80036de:	0912      	lsrs	r2, r2, #4
 80036e0:	0452      	lsls	r2, r2, #17
 80036e2:	430a      	orrs	r2, r1
 80036e4:	491f      	ldr	r1, [pc, #124]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	614b      	str	r3, [r1, #20]
 80036ea:	e011      	b.n	8003710 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036ec:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6892      	ldr	r2, [r2, #8]
 80036fc:	0211      	lsls	r1, r2, #8
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6912      	ldr	r2, [r2, #16]
 8003702:	0852      	lsrs	r2, r2, #1
 8003704:	3a01      	subs	r2, #1
 8003706:	0652      	lsls	r2, r2, #25
 8003708:	430a      	orrs	r2, r1
 800370a:	4916      	ldr	r1, [pc, #88]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800370c:	4313      	orrs	r3, r2
 800370e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a13      	ldr	r2, [pc, #76]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fd ffe6 	bl	80016ec <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003722:	e009      	b.n	8003738 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003724:	f7fd ffe2 	bl	80016ec <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d902      	bls.n	8003738 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	73fb      	strb	r3, [r7, #15]
          break;
 8003736:	e005      	b.n	8003744 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ef      	beq.n	8003724 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	4904      	ldr	r1, [pc, #16]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003754:	4313      	orrs	r3, r2
 8003756:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000

08003768 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d06c      	beq.n	8003854 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fd fd64 	bl	800125c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	22ca      	movs	r2, #202	; 0xca
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2253      	movs	r2, #83	; 0x53
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fa49 	bl	8003c44 <RTC_EnterInitMode>
 80037b2:	4603      	mov	r3, r0
 80037b4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d14b      	bne.n	8003854 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80037ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ce:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6899      	ldr	r1, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68d2      	ldr	r2, [r2, #12]
 80037f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6919      	ldr	r1, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	041a      	lsls	r2, r3, #16
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fa4d 	bl	8003cac <RTC_ExitInitMode>
 8003812:	4603      	mov	r3, r0
 8003814:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d11b      	bne.n	8003854 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0203 	bic.w	r2, r2, #3
 800382a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800385e:	b590      	push	{r4, r7, lr}
 8003860:	b087      	sub	sp, #28
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_RTC_SetTime+0x1a>
 8003874:	2302      	movs	r3, #2
 8003876:	e08b      	b.n	8003990 <HAL_RTC_SetTime+0x132>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	22ca      	movs	r2, #202	; 0xca
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2253      	movs	r2, #83	; 0x53
 8003896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f9d3 	bl	8003c44 <RTC_EnterInitMode>
 800389e:	4603      	mov	r3, r0
 80038a0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80038a2:	7cfb      	ldrb	r3, [r7, #19]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d163      	bne.n	8003970 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d126      	bne.n	80038fc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2200      	movs	r2, #0
 80038c0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fa2e 	bl	8003d28 <RTC_ByteToBcd2>
 80038cc:	4603      	mov	r3, r0
 80038ce:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fa27 	bl	8003d28 <RTC_ByteToBcd2>
 80038da:	4603      	mov	r3, r0
 80038dc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038de:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	789b      	ldrb	r3, [r3, #2]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fa1f 	bl	8003d28 <RTC_ByteToBcd2>
 80038ea:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038ec:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	78db      	ldrb	r3, [r3, #3]
 80038f4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e018      	b.n	800392e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2200      	movs	r2, #0
 800390e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	785b      	ldrb	r3, [r3, #1]
 800391a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800391c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003922:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	78db      	ldrb	r3, [r3, #3]
 8003928:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003938:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800393c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800394c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6899      	ldr	r1, [r3, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f9a0 	bl	8003cac <RTC_ExitInitMode>
 800396c:	4603      	mov	r3, r0
 800396e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	22ff      	movs	r2, #255	; 0xff
 8003976:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800398e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003990:	4618      	mov	r0, r3
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	bd90      	pop	{r4, r7, pc}

08003998 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80039c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80039ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	0d9b      	lsrs	r3, r3, #22
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d11a      	bne.n	8003a46 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f9a7 	bl	8003d68 <RTC_Bcd2ToByte>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	785b      	ldrb	r3, [r3, #1]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f99e 	bl	8003d68 <RTC_Bcd2ToByte>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	789b      	ldrb	r3, [r3, #2]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 f995 	bl	8003d68 <RTC_Bcd2ToByte>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	461a      	mov	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_RTC_SetDate+0x1a>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e075      	b.n	8003b56 <HAL_RTC_SetDate+0x106>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2202      	movs	r2, #2
 8003a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10e      	bne.n	8003a9e <HAL_RTC_SetDate+0x4e>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	785b      	ldrb	r3, [r3, #1]
 8003a90:	f023 0310 	bic.w	r3, r3, #16
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	330a      	adds	r3, #10
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d11c      	bne.n	8003ade <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	78db      	ldrb	r3, [r3, #3]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 f93d 	bl	8003d28 <RTC_ByteToBcd2>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	785b      	ldrb	r3, [r3, #1]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f936 	bl	8003d28 <RTC_ByteToBcd2>
 8003abc:	4603      	mov	r3, r0
 8003abe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003ac0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	789b      	ldrb	r3, [r3, #2]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f92e 	bl	8003d28 <RTC_ByteToBcd2>
 8003acc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ace:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	e00e      	b.n	8003afc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	78db      	ldrb	r3, [r3, #3]
 8003ae2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003aea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003af0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	22ca      	movs	r2, #202	; 0xca
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2253      	movs	r2, #83	; 0x53
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f899 	bl	8003c44 <RTC_EnterInitMode>
 8003b12:	4603      	mov	r3, r0
 8003b14:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003b16:	7cfb      	ldrb	r3, [r7, #19]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b2a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f8bd 	bl	8003cac <RTC_ExitInitMode>
 8003b32:	4603      	mov	r3, r0
 8003b34:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	22ff      	movs	r2, #255	; 0xff
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd90      	pop	{r4, r7, pc}

08003b5e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b78:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	0b5b      	lsrs	r3, r3, #13
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d11a      	bne.n	8003bee <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	78db      	ldrb	r3, [r3, #3]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f8d3 	bl	8003d68 <RTC_Bcd2ToByte>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f8ca 	bl	8003d68 <RTC_Bcd2ToByte>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	789b      	ldrb	r3, [r3, #2]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 f8c1 	bl	8003d68 <RTC_Bcd2ToByte>
 8003be6:	4603      	mov	r3, r0
 8003be8:	461a      	mov	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c0e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003c10:	f7fd fd6c 	bl	80016ec <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c16:	e009      	b.n	8003c2c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c18:	f7fd fd68 	bl	80016ec <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c26:	d901      	bls.n	8003c2c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e007      	b.n	8003c3c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0ee      	beq.n	8003c18 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d120      	bne.n	8003ca0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c66:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003c68:	f7fd fd40 	bl	80016ec <HAL_GetTick>
 8003c6c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003c6e:	e00d      	b.n	8003c8c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003c70:	f7fd fd3c 	bl	80016ec <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c7e:	d905      	bls.n	8003c8c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2203      	movs	r2, #3
 8003c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <RTC_EnterInitMode+0x5c>
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d1e7      	bne.n	8003c70 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <RTC_ExitInitMode+0x78>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4a19      	ldr	r2, [pc, #100]	; (8003d24 <RTC_ExitInitMode+0x78>)
 8003cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003cc4:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <RTC_ExitInitMode+0x78>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10c      	bne.n	8003cea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff91 	bl	8003bf8 <HAL_RTC_WaitForSynchro>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01e      	beq.n	8003d1a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2203      	movs	r2, #3
 8003ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e017      	b.n	8003d1a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <RTC_ExitInitMode+0x78>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <RTC_ExitInitMode+0x78>)
 8003cf0:	f023 0320 	bic.w	r3, r3, #32
 8003cf4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ff7e 	bl	8003bf8 <HAL_RTC_WaitForSynchro>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2203      	movs	r2, #3
 8003d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <RTC_ExitInitMode+0x78>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <RTC_ExitInitMode+0x78>)
 8003d14:	f043 0320 	orr.w	r3, r3, #32
 8003d18:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40002800 	.word	0x40002800

08003d28 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003d3a:	e005      	b.n	8003d48 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003d42:	7afb      	ldrb	r3, [r7, #11]
 8003d44:	3b0a      	subs	r3, #10
 8003d46:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003d48:	7afb      	ldrb	r3, [r7, #11]
 8003d4a:	2b09      	cmp	r3, #9
 8003d4c:	d8f6      	bhi.n	8003d3c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	7afb      	ldrb	r3, [r7, #11]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	b2db      	uxtb	r3, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	0092      	lsls	r2, r2, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	b2db      	uxtb	r3, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3350      	adds	r3, #80	; 0x50
 8003dae:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	009a      	lsls	r2, r3, #2
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	4413      	add	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6013      	str	r3, [r2, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3350      	adds	r3, #80	; 0x50
 8003dde:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e095      	b.n	8003f38 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d108      	bne.n	8003e26 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e1c:	d009      	beq.n	8003e32 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	61da      	str	r2, [r3, #28]
 8003e24:	e005      	b.n	8003e32 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fd fa21 	bl	8001294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e68:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e72:	d902      	bls.n	8003e7a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	e002      	b.n	8003e80 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e7e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e88:	d007      	beq.n	8003e9a <HAL_SPI_Init+0xa0>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e92:	d002      	beq.n	8003e9a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	ea42 0103 	orr.w	r1, r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	f003 0204 	and.w	r2, r3, #4
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f16:	ea42 0103 	orr.w	r1, r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_SPI_Transmit+0x22>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e158      	b.n	8004214 <HAL_SPI_Transmit+0x2d4>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f6a:	f7fd fbbf 	bl	80016ec <HAL_GetTick>
 8003f6e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d002      	beq.n	8003f86 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
 8003f82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f84:	e13d      	b.n	8004202 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_SPI_Transmit+0x52>
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d102      	bne.n	8003f98 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f96:	e134      	b.n	8004202 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe2:	d10f      	bne.n	8004004 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004002:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d007      	beq.n	8004022 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004020:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800402a:	d94b      	bls.n	80040c4 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_SPI_Transmit+0xfa>
 8004034:	8afb      	ldrh	r3, [r7, #22]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d13e      	bne.n	80040b8 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	881a      	ldrh	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	1c9a      	adds	r2, r3, #2
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800405e:	e02b      	b.n	80040b8 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d112      	bne.n	8004094 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004092:	e011      	b.n	80040b8 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004094:	f7fd fb2a 	bl	80016ec <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d803      	bhi.n	80040ac <HAL_SPI_Transmit+0x16c>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040aa:	d102      	bne.n	80040b2 <HAL_SPI_Transmit+0x172>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040b6:	e0a4      	b.n	8004202 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1ce      	bne.n	8004060 <HAL_SPI_Transmit+0x120>
 80040c2:	e07c      	b.n	80041be <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_SPI_Transmit+0x192>
 80040cc:	8afb      	ldrh	r3, [r7, #22]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d170      	bne.n	80041b4 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d912      	bls.n	8004102 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	881a      	ldrh	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	1c9a      	adds	r2, r3, #2
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b02      	subs	r3, #2
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004100:	e058      	b.n	80041b4 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	7812      	ldrb	r2, [r2, #0]
 800410e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004128:	e044      	b.n	80041b4 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b02      	cmp	r3, #2
 8004136:	d12b      	bne.n	8004190 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d912      	bls.n	8004168 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	881a      	ldrh	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	1c9a      	adds	r2, r3, #2
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b02      	subs	r3, #2
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004166:	e025      	b.n	80041b4 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	7812      	ldrb	r2, [r2, #0]
 8004174:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800418e:	e011      	b.n	80041b4 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004190:	f7fd faac 	bl	80016ec <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d803      	bhi.n	80041a8 <HAL_SPI_Transmit+0x268>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a6:	d102      	bne.n	80041ae <HAL_SPI_Transmit+0x26e>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d102      	bne.n	80041b4 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041b2:	e026      	b.n	8004202 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1b5      	bne.n	800412a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	6839      	ldr	r1, [r7, #0]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fb58 	bl	8004878 <SPI_EndRxTxTransaction>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e000      	b.n	8004202 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004200:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004212:	7ffb      	ldrb	r3, [r7, #31]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3720      	adds	r7, #32
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800422a:	2301      	movs	r3, #1
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x26>
 800423e:	2302      	movs	r3, #2
 8004240:	e1fb      	b.n	800463a <HAL_SPI_TransmitReceive+0x41e>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800424a:	f7fd fa4f 	bl	80016ec <HAL_GetTick>
 800424e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004256:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004262:	887b      	ldrh	r3, [r7, #2]
 8004264:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004266:	7efb      	ldrb	r3, [r7, #27]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d00e      	beq.n	800428a <HAL_SPI_TransmitReceive+0x6e>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004272:	d106      	bne.n	8004282 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <HAL_SPI_TransmitReceive+0x66>
 800427c:	7efb      	ldrb	r3, [r7, #27]
 800427e:	2b04      	cmp	r3, #4
 8004280:	d003      	beq.n	800428a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004282:	2302      	movs	r3, #2
 8004284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004288:	e1cd      	b.n	8004626 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_SPI_TransmitReceive+0x80>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_SPI_TransmitReceive+0x80>
 8004296:	887b      	ldrh	r3, [r7, #2]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d103      	bne.n	80042a4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042a2:	e1c0      	b.n	8004626 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d003      	beq.n	80042b8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2205      	movs	r2, #5
 80042b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	887a      	ldrh	r2, [r7, #2]
 80042de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	887a      	ldrh	r2, [r7, #2]
 80042e4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042fa:	d802      	bhi.n	8004302 <HAL_SPI_TransmitReceive+0xe6>
 80042fc:	8a3b      	ldrh	r3, [r7, #16]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d908      	bls.n	8004314 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	e007      	b.n	8004324 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004322:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d007      	beq.n	8004342 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004340:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800434a:	d97c      	bls.n	8004446 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_SPI_TransmitReceive+0x13e>
 8004354:	8a7b      	ldrh	r3, [r7, #18]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d169      	bne.n	800442e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	881a      	ldrh	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	1c9a      	adds	r2, r3, #2
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800437e:	e056      	b.n	800442e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b02      	cmp	r3, #2
 800438c:	d11b      	bne.n	80043c6 <HAL_SPI_TransmitReceive+0x1aa>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d016      	beq.n	80043c6 <HAL_SPI_TransmitReceive+0x1aa>
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	2b01      	cmp	r3, #1
 800439c:	d113      	bne.n	80043c6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	881a      	ldrh	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	1c9a      	adds	r2, r3, #2
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d11c      	bne.n	800440e <HAL_SPI_TransmitReceive+0x1f2>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d016      	beq.n	800440e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	b292      	uxth	r2, r2
 80043ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	1c9a      	adds	r2, r3, #2
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800440a:	2301      	movs	r3, #1
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800440e:	f7fd f96d 	bl	80016ec <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441a:	429a      	cmp	r2, r3
 800441c:	d807      	bhi.n	800442e <HAL_SPI_TransmitReceive+0x212>
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004424:	d003      	beq.n	800442e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800442c:	e0fb      	b.n	8004626 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1a3      	bne.n	8004380 <HAL_SPI_TransmitReceive+0x164>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d19d      	bne.n	8004380 <HAL_SPI_TransmitReceive+0x164>
 8004444:	e0df      	b.n	8004606 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_SPI_TransmitReceive+0x23a>
 800444e:	8a7b      	ldrh	r3, [r7, #18]
 8004450:	2b01      	cmp	r3, #1
 8004452:	f040 80cb 	bne.w	80045ec <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	d912      	bls.n	8004486 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	881a      	ldrh	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	1c9a      	adds	r2, r3, #2
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b02      	subs	r3, #2
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004484:	e0b2      	b.n	80045ec <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	7812      	ldrb	r2, [r2, #0]
 8004492:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ac:	e09e      	b.n	80045ec <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d134      	bne.n	8004526 <HAL_SPI_TransmitReceive+0x30a>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d02f      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x30a>
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d12c      	bne.n	8004526 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d912      	bls.n	80044fc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	881a      	ldrh	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	1c9a      	adds	r2, r3, #2
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b02      	subs	r3, #2
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044fa:	e012      	b.n	8004522 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	7812      	ldrb	r2, [r2, #0]
 8004508:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d148      	bne.n	80045c6 <HAL_SPI_TransmitReceive+0x3aa>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d042      	beq.n	80045c6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d923      	bls.n	8004594 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	b292      	uxth	r2, r2
 8004558:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	1c9a      	adds	r2, r3, #2
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b02      	subs	r3, #2
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b01      	cmp	r3, #1
 8004580:	d81f      	bhi.n	80045c2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004590:	605a      	str	r2, [r3, #4]
 8004592:	e016      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f103 020c 	add.w	r2, r3, #12
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	7812      	ldrb	r2, [r2, #0]
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045c2:	2301      	movs	r3, #1
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045c6:	f7fd f891 	bl	80016ec <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d803      	bhi.n	80045de <HAL_SPI_TransmitReceive+0x3c2>
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045dc:	d102      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x3c8>
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d103      	bne.n	80045ec <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80045ea:	e01c      	b.n	8004626 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f47f af5b 	bne.w	80044ae <HAL_SPI_TransmitReceive+0x292>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	f47f af54 	bne.w	80044ae <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f934 	bl	8004878 <SPI_EndRxTxTransaction>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d006      	beq.n	8004624 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	661a      	str	r2, [r3, #96]	; 0x60
 8004622:	e000      	b.n	8004626 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004624:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004636:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800463a:	4618      	mov	r0, r3
 800463c:	3728      	adds	r7, #40	; 0x28
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004654:	f7fd f84a 	bl	80016ec <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	4413      	add	r3, r2
 8004662:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004664:	f7fd f842 	bl	80016ec <HAL_GetTick>
 8004668:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800466a:	4b39      	ldr	r3, [pc, #228]	; (8004750 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	015b      	lsls	r3, r3, #5
 8004670:	0d1b      	lsrs	r3, r3, #20
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	fb02 f303 	mul.w	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800467a:	e054      	b.n	8004726 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004682:	d050      	beq.n	8004726 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004684:	f7fd f832 	bl	80016ec <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	429a      	cmp	r2, r3
 8004692:	d902      	bls.n	800469a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d13d      	bne.n	8004716 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046b2:	d111      	bne.n	80046d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046bc:	d004      	beq.n	80046c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c6:	d107      	bne.n	80046d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e0:	d10f      	bne.n	8004702 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004700:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e017      	b.n	8004746 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	3b01      	subs	r3, #1
 8004724:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4013      	ands	r3, r2
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	429a      	cmp	r2, r3
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2300      	movne	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	429a      	cmp	r2, r3
 8004742:	d19b      	bne.n	800467c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3720      	adds	r7, #32
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000000 	.word	0x20000000

08004754 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004762:	f7fc ffc3 	bl	80016ec <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	4413      	add	r3, r2
 8004770:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004772:	f7fc ffbb 	bl	80016ec <HAL_GetTick>
 8004776:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004778:	4b3e      	ldr	r3, [pc, #248]	; (8004874 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	00da      	lsls	r2, r3, #3
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	0d1b      	lsrs	r3, r3, #20
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	fb02 f303 	mul.w	r3, r2, r3
 800478e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004790:	e062      	b.n	8004858 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004798:	d109      	bne.n	80047ae <SPI_WaitFifoStateUntilTimeout+0x5a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80047ac:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b4:	d050      	beq.n	8004858 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047b6:	f7fc ff99 	bl	80016ec <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d902      	bls.n	80047cc <SPI_WaitFifoStateUntilTimeout+0x78>
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d13d      	bne.n	8004848 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e4:	d111      	bne.n	800480a <SPI_WaitFifoStateUntilTimeout+0xb6>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ee:	d004      	beq.n	80047fa <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f8:	d107      	bne.n	800480a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004808:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004812:	d10f      	bne.n	8004834 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004832:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e010      	b.n	800486a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	3b01      	subs	r3, #1
 8004856:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4013      	ands	r3, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d194      	bne.n	8004792 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000000 	.word	0x20000000

08004878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2200      	movs	r2, #0
 800488c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7ff ff5f 	bl	8004754 <SPI_WaitFifoStateUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a0:	f043 0220 	orr.w	r2, r3, #32
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e027      	b.n	80048fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	2180      	movs	r1, #128	; 0x80
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff fec4 	bl	8004644 <SPI_WaitFlagStateUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e014      	b.n	80048fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2200      	movs	r2, #0
 80048da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7ff ff38 	bl	8004754 <SPI_WaitFifoStateUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e000      	b.n	80048fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e040      	b.n	8004998 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fc fcf6 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	; 0x24
 8004930:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f8c0 	bl	8004ac8 <UART_SetConfig>
 8004948:	4603      	mov	r3, r0
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e022      	b.n	8004998 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fb3e 	bl	8004fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800496e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800497e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fbc5 	bl	8005120 <UART_CheckIdleState>
 8004996:	4603      	mov	r3, r0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	; 0x28
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	f040 8082 	bne.w	8004abe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_UART_Transmit+0x26>
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e07a      	b.n	8004ac0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_UART_Transmit+0x38>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e073      	b.n	8004ac0 <HAL_UART_Transmit+0x120>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2221      	movs	r2, #33	; 0x21
 80049ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ee:	f7fc fe7d 	bl	80016ec <HAL_GetTick>
 80049f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0c:	d108      	bne.n	8004a20 <HAL_UART_Transmit+0x80>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	e003      	b.n	8004a28 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a30:	e02d      	b.n	8004a8e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2180      	movs	r1, #128	; 0x80
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fbb8 	bl	80051b2 <UART_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e039      	b.n	8004ac0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10b      	bne.n	8004a6a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	881a      	ldrh	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	3302      	adds	r3, #2
 8004a66:	61bb      	str	r3, [r7, #24]
 8004a68:	e008      	b.n	8004a7c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	781a      	ldrb	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	b292      	uxth	r2, r2
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1cb      	bne.n	8004a32 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2140      	movs	r1, #64	; 0x40
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fb84 	bl	80051b2 <UART_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e005      	b.n	8004ac0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e000      	b.n	8004ac0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
  }
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3720      	adds	r7, #32
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac8:	b5b0      	push	{r4, r5, r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4bad      	ldr	r3, [pc, #692]	; (8004da8 <UART_SetConfig+0x2e0>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	69f9      	ldr	r1, [r7, #28]
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4aa2      	ldr	r2, [pc, #648]	; (8004dac <UART_SetConfig+0x2e4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a99      	ldr	r2, [pc, #612]	; (8004db0 <UART_SetConfig+0x2e8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d121      	bne.n	8004b92 <UART_SetConfig+0xca>
 8004b4e:	4b99      	ldr	r3, [pc, #612]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d817      	bhi.n	8004b8c <UART_SetConfig+0xc4>
 8004b5c:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <UART_SetConfig+0x9c>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b75 	.word	0x08004b75
 8004b68:	08004b81 	.word	0x08004b81
 8004b6c:	08004b7b 	.word	0x08004b7b
 8004b70:	08004b87 	.word	0x08004b87
 8004b74:	2301      	movs	r3, #1
 8004b76:	76fb      	strb	r3, [r7, #27]
 8004b78:	e0e7      	b.n	8004d4a <UART_SetConfig+0x282>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	76fb      	strb	r3, [r7, #27]
 8004b7e:	e0e4      	b.n	8004d4a <UART_SetConfig+0x282>
 8004b80:	2304      	movs	r3, #4
 8004b82:	76fb      	strb	r3, [r7, #27]
 8004b84:	e0e1      	b.n	8004d4a <UART_SetConfig+0x282>
 8004b86:	2308      	movs	r3, #8
 8004b88:	76fb      	strb	r3, [r7, #27]
 8004b8a:	e0de      	b.n	8004d4a <UART_SetConfig+0x282>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	76fb      	strb	r3, [r7, #27]
 8004b90:	e0db      	b.n	8004d4a <UART_SetConfig+0x282>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a88      	ldr	r2, [pc, #544]	; (8004db8 <UART_SetConfig+0x2f0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d132      	bne.n	8004c02 <UART_SetConfig+0x13a>
 8004b9c:	4b85      	ldr	r3, [pc, #532]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d828      	bhi.n	8004bfc <UART_SetConfig+0x134>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0xe8>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004be5 	.word	0x08004be5
 8004bb4:	08004bfd 	.word	0x08004bfd
 8004bb8:	08004bfd 	.word	0x08004bfd
 8004bbc:	08004bfd 	.word	0x08004bfd
 8004bc0:	08004bf1 	.word	0x08004bf1
 8004bc4:	08004bfd 	.word	0x08004bfd
 8004bc8:	08004bfd 	.word	0x08004bfd
 8004bcc:	08004bfd 	.word	0x08004bfd
 8004bd0:	08004beb 	.word	0x08004beb
 8004bd4:	08004bfd 	.word	0x08004bfd
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004bfd 	.word	0x08004bfd
 8004be0:	08004bf7 	.word	0x08004bf7
 8004be4:	2300      	movs	r3, #0
 8004be6:	76fb      	strb	r3, [r7, #27]
 8004be8:	e0af      	b.n	8004d4a <UART_SetConfig+0x282>
 8004bea:	2302      	movs	r3, #2
 8004bec:	76fb      	strb	r3, [r7, #27]
 8004bee:	e0ac      	b.n	8004d4a <UART_SetConfig+0x282>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	76fb      	strb	r3, [r7, #27]
 8004bf4:	e0a9      	b.n	8004d4a <UART_SetConfig+0x282>
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	76fb      	strb	r3, [r7, #27]
 8004bfa:	e0a6      	b.n	8004d4a <UART_SetConfig+0x282>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	76fb      	strb	r3, [r7, #27]
 8004c00:	e0a3      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a6d      	ldr	r2, [pc, #436]	; (8004dbc <UART_SetConfig+0x2f4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d120      	bne.n	8004c4e <UART_SetConfig+0x186>
 8004c0c:	4b69      	ldr	r3, [pc, #420]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c16:	2b30      	cmp	r3, #48	; 0x30
 8004c18:	d013      	beq.n	8004c42 <UART_SetConfig+0x17a>
 8004c1a:	2b30      	cmp	r3, #48	; 0x30
 8004c1c:	d814      	bhi.n	8004c48 <UART_SetConfig+0x180>
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d009      	beq.n	8004c36 <UART_SetConfig+0x16e>
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d810      	bhi.n	8004c48 <UART_SetConfig+0x180>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <UART_SetConfig+0x168>
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d006      	beq.n	8004c3c <UART_SetConfig+0x174>
 8004c2e:	e00b      	b.n	8004c48 <UART_SetConfig+0x180>
 8004c30:	2300      	movs	r3, #0
 8004c32:	76fb      	strb	r3, [r7, #27]
 8004c34:	e089      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c36:	2302      	movs	r3, #2
 8004c38:	76fb      	strb	r3, [r7, #27]
 8004c3a:	e086      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	76fb      	strb	r3, [r7, #27]
 8004c40:	e083      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c42:	2308      	movs	r3, #8
 8004c44:	76fb      	strb	r3, [r7, #27]
 8004c46:	e080      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c48:	2310      	movs	r3, #16
 8004c4a:	76fb      	strb	r3, [r7, #27]
 8004c4c:	e07d      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a5b      	ldr	r2, [pc, #364]	; (8004dc0 <UART_SetConfig+0x2f8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d120      	bne.n	8004c9a <UART_SetConfig+0x1d2>
 8004c58:	4b56      	ldr	r3, [pc, #344]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c62:	2bc0      	cmp	r3, #192	; 0xc0
 8004c64:	d013      	beq.n	8004c8e <UART_SetConfig+0x1c6>
 8004c66:	2bc0      	cmp	r3, #192	; 0xc0
 8004c68:	d814      	bhi.n	8004c94 <UART_SetConfig+0x1cc>
 8004c6a:	2b80      	cmp	r3, #128	; 0x80
 8004c6c:	d009      	beq.n	8004c82 <UART_SetConfig+0x1ba>
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	d810      	bhi.n	8004c94 <UART_SetConfig+0x1cc>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <UART_SetConfig+0x1b4>
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	d006      	beq.n	8004c88 <UART_SetConfig+0x1c0>
 8004c7a:	e00b      	b.n	8004c94 <UART_SetConfig+0x1cc>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	76fb      	strb	r3, [r7, #27]
 8004c80:	e063      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c82:	2302      	movs	r3, #2
 8004c84:	76fb      	strb	r3, [r7, #27]
 8004c86:	e060      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	76fb      	strb	r3, [r7, #27]
 8004c8c:	e05d      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c8e:	2308      	movs	r3, #8
 8004c90:	76fb      	strb	r3, [r7, #27]
 8004c92:	e05a      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c94:	2310      	movs	r3, #16
 8004c96:	76fb      	strb	r3, [r7, #27]
 8004c98:	e057      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a49      	ldr	r2, [pc, #292]	; (8004dc4 <UART_SetConfig+0x2fc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d125      	bne.n	8004cf0 <UART_SetConfig+0x228>
 8004ca4:	4b43      	ldr	r3, [pc, #268]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb2:	d017      	beq.n	8004ce4 <UART_SetConfig+0x21c>
 8004cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb8:	d817      	bhi.n	8004cea <UART_SetConfig+0x222>
 8004cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cbe:	d00b      	beq.n	8004cd8 <UART_SetConfig+0x210>
 8004cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc4:	d811      	bhi.n	8004cea <UART_SetConfig+0x222>
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <UART_SetConfig+0x20a>
 8004cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cce:	d006      	beq.n	8004cde <UART_SetConfig+0x216>
 8004cd0:	e00b      	b.n	8004cea <UART_SetConfig+0x222>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	76fb      	strb	r3, [r7, #27]
 8004cd6:	e038      	b.n	8004d4a <UART_SetConfig+0x282>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	76fb      	strb	r3, [r7, #27]
 8004cdc:	e035      	b.n	8004d4a <UART_SetConfig+0x282>
 8004cde:	2304      	movs	r3, #4
 8004ce0:	76fb      	strb	r3, [r7, #27]
 8004ce2:	e032      	b.n	8004d4a <UART_SetConfig+0x282>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	76fb      	strb	r3, [r7, #27]
 8004ce8:	e02f      	b.n	8004d4a <UART_SetConfig+0x282>
 8004cea:	2310      	movs	r3, #16
 8004cec:	76fb      	strb	r3, [r7, #27]
 8004cee:	e02c      	b.n	8004d4a <UART_SetConfig+0x282>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2d      	ldr	r2, [pc, #180]	; (8004dac <UART_SetConfig+0x2e4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d125      	bne.n	8004d46 <UART_SetConfig+0x27e>
 8004cfa:	4b2e      	ldr	r3, [pc, #184]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d08:	d017      	beq.n	8004d3a <UART_SetConfig+0x272>
 8004d0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d0e:	d817      	bhi.n	8004d40 <UART_SetConfig+0x278>
 8004d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d14:	d00b      	beq.n	8004d2e <UART_SetConfig+0x266>
 8004d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1a:	d811      	bhi.n	8004d40 <UART_SetConfig+0x278>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <UART_SetConfig+0x260>
 8004d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d24:	d006      	beq.n	8004d34 <UART_SetConfig+0x26c>
 8004d26:	e00b      	b.n	8004d40 <UART_SetConfig+0x278>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	76fb      	strb	r3, [r7, #27]
 8004d2c:	e00d      	b.n	8004d4a <UART_SetConfig+0x282>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	76fb      	strb	r3, [r7, #27]
 8004d32:	e00a      	b.n	8004d4a <UART_SetConfig+0x282>
 8004d34:	2304      	movs	r3, #4
 8004d36:	76fb      	strb	r3, [r7, #27]
 8004d38:	e007      	b.n	8004d4a <UART_SetConfig+0x282>
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	76fb      	strb	r3, [r7, #27]
 8004d3e:	e004      	b.n	8004d4a <UART_SetConfig+0x282>
 8004d40:	2310      	movs	r3, #16
 8004d42:	76fb      	strb	r3, [r7, #27]
 8004d44:	e001      	b.n	8004d4a <UART_SetConfig+0x282>
 8004d46:	2310      	movs	r3, #16
 8004d48:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a17      	ldr	r2, [pc, #92]	; (8004dac <UART_SetConfig+0x2e4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	f040 8087 	bne.w	8004e64 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d56:	7efb      	ldrb	r3, [r7, #27]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d837      	bhi.n	8004dcc <UART_SetConfig+0x304>
 8004d5c:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <UART_SetConfig+0x29c>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004d89 	.word	0x08004d89
 8004d68:	08004dcd 	.word	0x08004dcd
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004dcd 	.word	0x08004dcd
 8004d74:	08004d97 	.word	0x08004d97
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004dcd 	.word	0x08004dcd
 8004d80:	08004dcd 	.word	0x08004dcd
 8004d84:	08004d9f 	.word	0x08004d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d88:	f7fd feae 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8004d8c:	6178      	str	r0, [r7, #20]
        break;
 8004d8e:	e022      	b.n	8004dd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d90:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <UART_SetConfig+0x300>)
 8004d92:	617b      	str	r3, [r7, #20]
        break;
 8004d94:	e01f      	b.n	8004dd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d96:	f7fd fe0f 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8004d9a:	6178      	str	r0, [r7, #20]
        break;
 8004d9c:	e01b      	b.n	8004dd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da2:	617b      	str	r3, [r7, #20]
        break;
 8004da4:	e017      	b.n	8004dd6 <UART_SetConfig+0x30e>
 8004da6:	bf00      	nop
 8004da8:	efff69f3 	.word	0xefff69f3
 8004dac:	40008000 	.word	0x40008000
 8004db0:	40013800 	.word	0x40013800
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40004400 	.word	0x40004400
 8004dbc:	40004800 	.word	0x40004800
 8004dc0:	40004c00 	.word	0x40004c00
 8004dc4:	40005000 	.word	0x40005000
 8004dc8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	76bb      	strb	r3, [r7, #26]
        break;
 8004dd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80f1 	beq.w	8004fc0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d305      	bcc.n	8004dfa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d902      	bls.n	8004e00 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	76bb      	strb	r3, [r7, #26]
 8004dfe:	e0df      	b.n	8004fc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f04f 0100 	mov.w	r1, #0
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	020b      	lsls	r3, r1, #8
 8004e12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e16:	0202      	lsls	r2, r0, #8
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	6849      	ldr	r1, [r1, #4]
 8004e1c:	0849      	lsrs	r1, r1, #1
 8004e1e:	4608      	mov	r0, r1
 8004e20:	f04f 0100 	mov.w	r1, #0
 8004e24:	1814      	adds	r4, r2, r0
 8004e26:	eb43 0501 	adc.w	r5, r3, r1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	4620      	mov	r0, r4
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7fb fd28 	bl	800088c <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4613      	mov	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4a:	d308      	bcc.n	8004e5e <UART_SetConfig+0x396>
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e52:	d204      	bcs.n	8004e5e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	60da      	str	r2, [r3, #12]
 8004e5c:	e0b0      	b.n	8004fc0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	76bb      	strb	r3, [r7, #26]
 8004e62:	e0ad      	b.n	8004fc0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6c:	d15c      	bne.n	8004f28 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004e6e:	7efb      	ldrb	r3, [r7, #27]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d828      	bhi.n	8004ec6 <UART_SetConfig+0x3fe>
 8004e74:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <UART_SetConfig+0x3b4>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004ea1 	.word	0x08004ea1
 8004e80:	08004ea9 	.word	0x08004ea9
 8004e84:	08004eb1 	.word	0x08004eb1
 8004e88:	08004ec7 	.word	0x08004ec7
 8004e8c:	08004eb7 	.word	0x08004eb7
 8004e90:	08004ec7 	.word	0x08004ec7
 8004e94:	08004ec7 	.word	0x08004ec7
 8004e98:	08004ec7 	.word	0x08004ec7
 8004e9c:	08004ebf 	.word	0x08004ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7fd fe22 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8004ea4:	6178      	str	r0, [r7, #20]
        break;
 8004ea6:	e013      	b.n	8004ed0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea8:	f7fd fe34 	bl	8002b14 <HAL_RCC_GetPCLK2Freq>
 8004eac:	6178      	str	r0, [r7, #20]
        break;
 8004eae:	e00f      	b.n	8004ed0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb0:	4b49      	ldr	r3, [pc, #292]	; (8004fd8 <UART_SetConfig+0x510>)
 8004eb2:	617b      	str	r3, [r7, #20]
        break;
 8004eb4:	e00c      	b.n	8004ed0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb6:	f7fd fd7f 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8004eba:	6178      	str	r0, [r7, #20]
        break;
 8004ebc:	e008      	b.n	8004ed0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec2:	617b      	str	r3, [r7, #20]
        break;
 8004ec4:	e004      	b.n	8004ed0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	76bb      	strb	r3, [r7, #26]
        break;
 8004ece:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d074      	beq.n	8004fc0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	005a      	lsls	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	085b      	lsrs	r3, r3, #1
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b0f      	cmp	r3, #15
 8004ef2:	d916      	bls.n	8004f22 <UART_SetConfig+0x45a>
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efa:	d212      	bcs.n	8004f22 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f023 030f 	bic.w	r3, r3, #15
 8004f04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	89fb      	ldrh	r3, [r7, #14]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	89fa      	ldrh	r2, [r7, #14]
 8004f1e:	60da      	str	r2, [r3, #12]
 8004f20:	e04e      	b.n	8004fc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	76bb      	strb	r3, [r7, #26]
 8004f26:	e04b      	b.n	8004fc0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f28:	7efb      	ldrb	r3, [r7, #27]
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d827      	bhi.n	8004f7e <UART_SetConfig+0x4b6>
 8004f2e:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <UART_SetConfig+0x46c>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004f59 	.word	0x08004f59
 8004f38:	08004f61 	.word	0x08004f61
 8004f3c:	08004f69 	.word	0x08004f69
 8004f40:	08004f7f 	.word	0x08004f7f
 8004f44:	08004f6f 	.word	0x08004f6f
 8004f48:	08004f7f 	.word	0x08004f7f
 8004f4c:	08004f7f 	.word	0x08004f7f
 8004f50:	08004f7f 	.word	0x08004f7f
 8004f54:	08004f77 	.word	0x08004f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f58:	f7fd fdc6 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8004f5c:	6178      	str	r0, [r7, #20]
        break;
 8004f5e:	e013      	b.n	8004f88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f60:	f7fd fdd8 	bl	8002b14 <HAL_RCC_GetPCLK2Freq>
 8004f64:	6178      	str	r0, [r7, #20]
        break;
 8004f66:	e00f      	b.n	8004f88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f68:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <UART_SetConfig+0x510>)
 8004f6a:	617b      	str	r3, [r7, #20]
        break;
 8004f6c:	e00c      	b.n	8004f88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6e:	f7fd fd23 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8004f72:	6178      	str	r0, [r7, #20]
        break;
 8004f74:	e008      	b.n	8004f88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7a:	617b      	str	r3, [r7, #20]
        break;
 8004f7c:	e004      	b.n	8004f88 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	76bb      	strb	r3, [r7, #26]
        break;
 8004f86:	bf00      	nop
    }

    if (pclk != 0U)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d018      	beq.n	8004fc0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	085a      	lsrs	r2, r3, #1
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	441a      	add	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	d908      	bls.n	8004fbc <UART_SetConfig+0x4f4>
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb0:	d204      	bcs.n	8004fbc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	e001      	b.n	8004fc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fcc:	7ebb      	ldrb	r3, [r7, #26]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	00f42400 	.word	0x00f42400

08004fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01a      	beq.n	80050f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050da:	d10a      	bne.n	80050f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af02      	add	r7, sp, #8
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005130:	f7fc fadc 	bl	80016ec <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b08      	cmp	r3, #8
 8005142:	d10e      	bne.n	8005162 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f82d 	bl	80051b2 <UART_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e023      	b.n	80051aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b04      	cmp	r3, #4
 800516e:	d10e      	bne.n	800518e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f817 	bl	80051b2 <UART_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e00d      	b.n	80051aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	4613      	mov	r3, r2
 80051c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c2:	e05e      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ca:	d05a      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051cc:	f7fc fa8e 	bl	80016ec <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d302      	bcc.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d11b      	bne.n	800521a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0201 	bic.w	r2, r2, #1
 8005200:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2220      	movs	r2, #32
 8005206:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e043      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d02c      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005236:	d124      	bne.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005240:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005250:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e00f      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4013      	ands	r3, r2
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	429a      	cmp	r2, r3
 8005290:	bf0c      	ite	eq
 8005292:	2301      	moveq	r3, #1
 8005294:	2300      	movne	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	429a      	cmp	r2, r3
 800529e:	d091      	beq.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <low_power_enter_stop>:
#include "low_power.h"

error_code_t low_power_enter_stop (void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	; 0x30
 80052b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

    /* Set all GPIO in analog state to reduce power consumption,
       except GPIOC to keep user button interrupt enabled */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b2:	4b5d      	ldr	r3, [pc, #372]	; (8005428 <low_power_enter_stop+0x17c>)
 80052b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b6:	4a5c      	ldr	r2, [pc, #368]	; (8005428 <low_power_enter_stop+0x17c>)
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052be:	4b5a      	ldr	r3, [pc, #360]	; (8005428 <low_power_enter_stop+0x17c>)
 80052c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ca:	4b57      	ldr	r3, [pc, #348]	; (8005428 <low_power_enter_stop+0x17c>)
 80052cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ce:	4a56      	ldr	r2, [pc, #344]	; (8005428 <low_power_enter_stop+0x17c>)
 80052d0:	f043 0302 	orr.w	r3, r3, #2
 80052d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052d6:	4b54      	ldr	r3, [pc, #336]	; (8005428 <low_power_enter_stop+0x17c>)
 80052d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052e2:	4b51      	ldr	r3, [pc, #324]	; (8005428 <low_power_enter_stop+0x17c>)
 80052e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e6:	4a50      	ldr	r2, [pc, #320]	; (8005428 <low_power_enter_stop+0x17c>)
 80052e8:	f043 0308 	orr.w	r3, r3, #8
 80052ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052ee:	4b4e      	ldr	r3, [pc, #312]	; (8005428 <low_power_enter_stop+0x17c>)
 80052f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052fa:	4b4b      	ldr	r3, [pc, #300]	; (8005428 <low_power_enter_stop+0x17c>)
 80052fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fe:	4a4a      	ldr	r2, [pc, #296]	; (8005428 <low_power_enter_stop+0x17c>)
 8005300:	f043 0310 	orr.w	r3, r3, #16
 8005304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005306:	4b48      	ldr	r3, [pc, #288]	; (8005428 <low_power_enter_stop+0x17c>)
 8005308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005312:	4b45      	ldr	r3, [pc, #276]	; (8005428 <low_power_enter_stop+0x17c>)
 8005314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005316:	4a44      	ldr	r2, [pc, #272]	; (8005428 <low_power_enter_stop+0x17c>)
 8005318:	f043 0320 	orr.w	r3, r3, #32
 800531c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800531e:	4b42      	ldr	r3, [pc, #264]	; (8005428 <low_power_enter_stop+0x17c>)
 8005320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800532a:	4b3f      	ldr	r3, [pc, #252]	; (8005428 <low_power_enter_stop+0x17c>)
 800532c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532e:	4a3e      	ldr	r2, [pc, #248]	; (8005428 <low_power_enter_stop+0x17c>)
 8005330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005336:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <low_power_enter_stop+0x17c>)
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	607b      	str	r3, [r7, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005342:	4b39      	ldr	r3, [pc, #228]	; (8005428 <low_power_enter_stop+0x17c>)
 8005344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005346:	4a38      	ldr	r2, [pc, #224]	; (8005428 <low_power_enter_stop+0x17c>)
 8005348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800534e:	4b36      	ldr	r3, [pc, #216]	; (8005428 <low_power_enter_stop+0x17c>)
 8005350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800535a:	2303      	movs	r3, #3
 800535c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800535e:	2303      	movs	r3, #3
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005362:	2300      	movs	r3, #0
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_All;
 8005366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800536a:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800536c:	f107 031c 	add.w	r3, r7, #28
 8005370:	4619      	mov	r1, r3
 8005372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005376:	f7fc facf 	bl	8001918 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800537a:	f107 031c 	add.w	r3, r7, #28
 800537e:	4619      	mov	r1, r3
 8005380:	482a      	ldr	r0, [pc, #168]	; (800542c <low_power_enter_stop+0x180>)
 8005382:	f7fc fac9 	bl	8001918 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005386:	f107 031c 	add.w	r3, r7, #28
 800538a:	4619      	mov	r1, r3
 800538c:	4828      	ldr	r0, [pc, #160]	; (8005430 <low_power_enter_stop+0x184>)
 800538e:	f7fc fac3 	bl	8001918 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005392:	f107 031c 	add.w	r3, r7, #28
 8005396:	4619      	mov	r1, r3
 8005398:	4826      	ldr	r0, [pc, #152]	; (8005434 <low_power_enter_stop+0x188>)
 800539a:	f7fc fabd 	bl	8001918 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800539e:	f107 031c 	add.w	r3, r7, #28
 80053a2:	4619      	mov	r1, r3
 80053a4:	4824      	ldr	r0, [pc, #144]	; (8005438 <low_power_enter_stop+0x18c>)
 80053a6:	f7fc fab7 	bl	8001918 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053aa:	f107 031c 	add.w	r3, r7, #28
 80053ae:	4619      	mov	r1, r3
 80053b0:	4822      	ldr	r0, [pc, #136]	; (800543c <low_power_enter_stop+0x190>)
 80053b2:	f7fc fab1 	bl	8001918 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80053b6:	f107 031c 	add.w	r3, r7, #28
 80053ba:	4619      	mov	r1, r3
 80053bc:	4820      	ldr	r0, [pc, #128]	; (8005440 <low_power_enter_stop+0x194>)
 80053be:	f7fc faab 	bl	8001918 <HAL_GPIO_Init>

    __HAL_RCC_GPIOA_CLK_DISABLE();
 80053c2:	4b19      	ldr	r3, [pc, #100]	; (8005428 <low_power_enter_stop+0x17c>)
 80053c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c6:	4a18      	ldr	r2, [pc, #96]	; (8005428 <low_power_enter_stop+0x17c>)
 80053c8:	f023 0301 	bic.w	r3, r3, #1
 80053cc:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_GPIOB_CLK_DISABLE();
 80053ce:	4b16      	ldr	r3, [pc, #88]	; (8005428 <low_power_enter_stop+0x17c>)
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	4a15      	ldr	r2, [pc, #84]	; (8005428 <low_power_enter_stop+0x17c>)
 80053d4:	f023 0302 	bic.w	r3, r3, #2
 80053d8:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_DISABLE();
 80053da:	4b13      	ldr	r3, [pc, #76]	; (8005428 <low_power_enter_stop+0x17c>)
 80053dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053de:	4a12      	ldr	r2, [pc, #72]	; (8005428 <low_power_enter_stop+0x17c>)
 80053e0:	f023 0308 	bic.w	r3, r3, #8
 80053e4:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_GPIOE_CLK_DISABLE();
 80053e6:	4b10      	ldr	r3, [pc, #64]	; (8005428 <low_power_enter_stop+0x17c>)
 80053e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ea:	4a0f      	ldr	r2, [pc, #60]	; (8005428 <low_power_enter_stop+0x17c>)
 80053ec:	f023 0310 	bic.w	r3, r3, #16
 80053f0:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_GPIOF_CLK_DISABLE();
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <low_power_enter_stop+0x17c>)
 80053f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f6:	4a0c      	ldr	r2, [pc, #48]	; (8005428 <low_power_enter_stop+0x17c>)
 80053f8:	f023 0320 	bic.w	r3, r3, #32
 80053fc:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_GPIOG_CLK_DISABLE();
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <low_power_enter_stop+0x17c>)
 8005400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005402:	4a09      	ldr	r2, [pc, #36]	; (8005428 <low_power_enter_stop+0x17c>)
 8005404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005408:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_GPIOH_CLK_DISABLE();
 800540a:	4b07      	ldr	r3, [pc, #28]	; (8005428 <low_power_enter_stop+0x17c>)
 800540c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540e:	4a06      	ldr	r2, [pc, #24]	; (8005428 <low_power_enter_stop+0x17c>)
 8005410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005414:	64d3      	str	r3, [r2, #76]	; 0x4c

	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8005416:	2001      	movs	r0, #1
 8005418:	f7fc fdda 	bl	8001fd0 <HAL_PWREx_EnterSTOP2Mode>
	return E_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3730      	adds	r7, #48	; 0x30
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000
 800542c:	48000400 	.word	0x48000400
 8005430:	48000c00 	.word	0x48000c00
 8005434:	48001000 	.word	0x48001000
 8005438:	48001400 	.word	0x48001400
 800543c:	48001800 	.word	0x48001800
 8005440:	48001c00 	.word	0x48001c00

08005444 <low_power_exit_stop>:

error_code_t low_power_exit_stop (void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b09a      	sub	sp, #104	; 0x68
 8005448:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800544a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	605a      	str	r2, [r3, #4]
 8005454:	609a      	str	r2, [r3, #8]
 8005456:	60da      	str	r2, [r3, #12]
 8005458:	611a      	str	r2, [r3, #16]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800545a:	f107 030c 	add.w	r3, r7, #12
 800545e:	2244      	movs	r2, #68	; 0x44
 8005460:	2100      	movs	r1, #0
 8005462:	4618      	mov	r0, r3
 8005464:	f004 fb03 	bl	8009a6e <memset>
	uint32_t pFLatency = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	60bb      	str	r3, [r7, #8]
	error_code_t retval = E_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005472:	4b21      	ldr	r3, [pc, #132]	; (80054f8 <low_power_exit_stop+0xb4>)
 8005474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005476:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <low_power_exit_stop+0xb4>)
 8005478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547c:	6593      	str	r3, [r2, #88]	; 0x58
 800547e:	4b1e      	ldr	r3, [pc, #120]	; (80054f8 <low_power_exit_stop+0xb4>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	687b      	ldr	r3, [r7, #4]

	/* Get the Oscillators configuration according to the internal RCC registers */
	HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 800548a:	f107 030c 	add.w	r3, r7, #12
 800548e:	4618      	mov	r0, r3
 8005490:	f7fd fb56 	bl	8002b40 <HAL_RCC_GetOscConfig>

	/* Enable PLL */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005498:	2302      	movs	r3, #2
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800549c:	f107 030c 	add.w	r3, r7, #12
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fc fdc1 	bl	8002028 <HAL_RCC_OscConfig>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <low_power_exit_stop+0x70>
	{
		retval = E_HAL;
 80054ac:	2303      	movs	r3, #3
 80054ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		goto out;
 80054b2:	e01a      	b.n	80054ea <low_power_exit_stop+0xa6>
	}

	/* Get the Clocks configuration according to the internal RCC registers */
	HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, &pFLatency);
 80054b4:	f107 0208 	add.w	r2, r7, #8
 80054b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054bc:	4611      	mov	r1, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fd fc04 	bl	8002ccc <HAL_RCC_GetClockConfig>

	/* Select PLL as system clock source and keep HCLK, PCLK1 and PCLK2 clocks dividers as before */
	RCC_ClkInitStruct.ClockType     = RCC_CLOCKTYPE_SYSCLK;
 80054c4:	2301      	movs	r3, #1
 80054c6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.SYSCLKSource  = RCC_SYSCLKSOURCE_PLLCLK;
 80054c8:	2303      	movs	r3, #3
 80054ca:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, pFLatency) != HAL_OK)
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054d2:	4611      	mov	r1, r2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fd f98d 	bl	80027f4 <HAL_RCC_ClockConfig>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <low_power_exit_stop+0xa4>
	{
		retval = E_HAL;
 80054e0:	2303      	movs	r3, #3
 80054e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		goto out;
 80054e6:	e000      	b.n	80054ea <low_power_exit_stop+0xa6>
	}

out:
 80054e8:	bf00      	nop
	return retval;
 80054ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3768      	adds	r7, #104	; 0x68
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000

080054fc <sd_mount>:

static FATFS fs;
static FIL fil;

error_code_t sd_mount (void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
	FRESULT fres;
	uint8_t retval = E_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	71fb      	strb	r3, [r7, #7]

	fres = f_mount(&fs, "", 0);
 8005506:	2200      	movs	r2, #0
 8005508:	490c      	ldr	r1, [pc, #48]	; (800553c <sd_mount+0x40>)
 800550a:	480d      	ldr	r0, [pc, #52]	; (8005540 <sd_mount+0x44>)
 800550c:	f003 f85c 	bl	80085c8 <f_mount>
 8005510:	4603      	mov	r3, r0
 8005512:	71bb      	strb	r3, [r7, #6]
	if (fres != FR_OK)
 8005514:	79bb      	ldrb	r3, [r7, #6]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <sd_mount+0x2e>
	{
		reptar_printf("f_mount error (%i)\r\n", fres);
 800551a:	79bb      	ldrb	r3, [r7, #6]
 800551c:	4619      	mov	r1, r3
 800551e:	4809      	ldr	r0, [pc, #36]	; (8005544 <sd_mount+0x48>)
 8005520:	f7fb fd88 	bl	8001034 <reptar_printf>
		retval = E_FS;
 8005524:	2304      	movs	r3, #4
 8005526:	71fb      	strb	r3, [r7, #7]
		goto out;
 8005528:	e002      	b.n	8005530 <sd_mount+0x34>
	}
	else
	{
		reptar_printf("Successfully mounted file system\r\n");
 800552a:	4807      	ldr	r0, [pc, #28]	; (8005548 <sd_mount+0x4c>)
 800552c:	f7fb fd82 	bl	8001034 <reptar_printf>
	}

out:
	return retval;
 8005530:	79fb      	ldrb	r3, [r7, #7]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	0800a4d8 	.word	0x0800a4d8
 8005540:	200001a4 	.word	0x200001a4
 8005544:	0800a4dc 	.word	0x0800a4dc
 8005548:	0800a4f4 	.word	0x0800a4f4

0800554c <sd_unmount>:

error_code_t sd_unmount (void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
	FRESULT fres;
	uint8_t retval = E_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	71fb      	strb	r3, [r7, #7]

	fres = f_mount(NULL, "", 1);
 8005556:	2201      	movs	r2, #1
 8005558:	490c      	ldr	r1, [pc, #48]	; (800558c <sd_unmount+0x40>)
 800555a:	2000      	movs	r0, #0
 800555c:	f003 f834 	bl	80085c8 <f_mount>
 8005560:	4603      	mov	r3, r0
 8005562:	71bb      	strb	r3, [r7, #6]

	if (fres != FR_OK)
 8005564:	79bb      	ldrb	r3, [r7, #6]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <sd_unmount+0x2e>
	{
		reptar_printf("f_mount error (%i)\r\n", fres);
 800556a:	79bb      	ldrb	r3, [r7, #6]
 800556c:	4619      	mov	r1, r3
 800556e:	4808      	ldr	r0, [pc, #32]	; (8005590 <sd_unmount+0x44>)
 8005570:	f7fb fd60 	bl	8001034 <reptar_printf>
		retval = E_FS;
 8005574:	2304      	movs	r3, #4
 8005576:	71fb      	strb	r3, [r7, #7]
		goto out;
 8005578:	e002      	b.n	8005580 <sd_unmount+0x34>
	}
	else
	{
		reptar_printf("Successfully unmounted file system\r\n");
 800557a:	4806      	ldr	r0, [pc, #24]	; (8005594 <sd_unmount+0x48>)
 800557c:	f7fb fd5a 	bl	8001034 <reptar_printf>
	}

out:
	return retval;
 8005580:	79fb      	ldrb	r3, [r7, #7]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	0800a4d8 	.word	0x0800a4d8
 8005590:	0800a4dc 	.word	0x0800a4dc
 8005594:	0800a518 	.word	0x0800a518

08005598 <sd_get_free>:

error_code_t sd_get_free (uint32_t *totalSpace, uint32_t *freeSpace)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
    FRESULT fres;
    FATFS *pfs;
    DWORD fre_clust;
    uint8_t retval = E_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	75fb      	strb	r3, [r7, #23]

    fres = f_getfree("", &fre_clust, &pfs);
 80055a6:	f107 0210 	add.w	r2, r7, #16
 80055aa:	f107 030c 	add.w	r3, r7, #12
 80055ae:	4619      	mov	r1, r3
 80055b0:	4828      	ldr	r0, [pc, #160]	; (8005654 <sd_get_free+0xbc>)
 80055b2:	f003 fdb6 	bl	8009122 <f_getfree>
 80055b6:	4603      	mov	r3, r0
 80055b8:	75bb      	strb	r3, [r7, #22]

    if (fres != FR_OK)
 80055ba:	7dbb      	ldrb	r3, [r7, #22]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <sd_get_free+0x38>
    {
        reptar_printf("f_getfree error (%i)\r\n", fres);
 80055c0:	7dbb      	ldrb	r3, [r7, #22]
 80055c2:	4619      	mov	r1, r3
 80055c4:	4824      	ldr	r0, [pc, #144]	; (8005658 <sd_get_free+0xc0>)
 80055c6:	f7fb fd35 	bl	8001034 <reptar_printf>
        retval = E_FS;
 80055ca:	2304      	movs	r3, #4
 80055cc:	75fb      	strb	r3, [r7, #23]
        goto out;
 80055ce:	e03b      	b.n	8005648 <sd_get_free+0xb0>
    }

    *totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	3b02      	subs	r3, #2
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	8952      	ldrh	r2, [r2, #10]
 80055da:	fb02 f303 	mul.w	r3, r2, r3
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fb f8ba 	bl	8000758 <__aeabi_ui2d>
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	4b1c      	ldr	r3, [pc, #112]	; (800565c <sd_get_free+0xc4>)
 80055ea:	f7fa fe49 	bl	8000280 <__aeabi_dmul>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4610      	mov	r0, r2
 80055f4:	4619      	mov	r1, r3
 80055f6:	f7fb f929 	bl	800084c <__aeabi_d2uiz>
 80055fa:	4602      	mov	r2, r0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]
    *freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	895b      	ldrh	r3, [r3, #10]
 8005604:	461a      	mov	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	fb03 f302 	mul.w	r3, r3, r2
 800560c:	4618      	mov	r0, r3
 800560e:	f7fb f8a3 	bl	8000758 <__aeabi_ui2d>
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <sd_get_free+0xc4>)
 8005618:	f7fa fe32 	bl	8000280 <__aeabi_dmul>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	f7fb f912 	bl	800084c <__aeabi_d2uiz>
 8005628:	4602      	mov	r2, r0
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	601a      	str	r2, [r3, #0]

    /* free space is less than 1kb */
    if(*freeSpace < 1)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d107      	bne.n	8005646 <sd_get_free+0xae>
    {
        reptar_printf("Not enough free space on SD card (%i)\r\n", fres);
 8005636:	7dbb      	ldrb	r3, [r7, #22]
 8005638:	4619      	mov	r1, r3
 800563a:	4809      	ldr	r0, [pc, #36]	; (8005660 <sd_get_free+0xc8>)
 800563c:	f7fb fcfa 	bl	8001034 <reptar_printf>
        retval = E_FS;
 8005640:	2304      	movs	r3, #4
 8005642:	75fb      	strb	r3, [r7, #23]
        goto out;
 8005644:	e000      	b.n	8005648 <sd_get_free+0xb0>
    }

out:
 8005646:	bf00      	nop
    return retval;
 8005648:	7dfb      	ldrb	r3, [r7, #23]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	0800a4d8 	.word	0x0800a4d8
 8005658:	0800a540 	.word	0x0800a540
 800565c:	3fe00000 	.word	0x3fe00000
 8005660:	0800a558 	.word	0x0800a558

08005664 <sd_open_file>:

error_code_t sd_open_file (char *fn, BYTE mode)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
    FRESULT fres;
    uint8_t retval = E_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	73fb      	strb	r3, [r7, #15]

    fres = f_open(&fil, fn, mode);
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	461a      	mov	r2, r3
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	480c      	ldr	r0, [pc, #48]	; (80056ac <sd_open_file+0x48>)
 800567c:	f002 ffea 	bl	8008654 <f_open>
 8005680:	4603      	mov	r3, r0
 8005682:	73bb      	strb	r3, [r7, #14]

    if (fres != FR_OK)
 8005684:	7bbb      	ldrb	r3, [r7, #14]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d007      	beq.n	800569a <sd_open_file+0x36>
    {
        reptar_printf("f_open error (%i)\r\n", fres);
 800568a:	7bbb      	ldrb	r3, [r7, #14]
 800568c:	4619      	mov	r1, r3
 800568e:	4808      	ldr	r0, [pc, #32]	; (80056b0 <sd_open_file+0x4c>)
 8005690:	f7fb fcd0 	bl	8001034 <reptar_printf>
        retval = E_FS;
 8005694:	2304      	movs	r3, #4
 8005696:	73fb      	strb	r3, [r7, #15]
        goto out;
 8005698:	e002      	b.n	80056a0 <sd_open_file+0x3c>
    }
    else
    {
        reptar_printf("Successfully opened file system\r\n");
 800569a:	4806      	ldr	r0, [pc, #24]	; (80056b4 <sd_open_file+0x50>)
 800569c:	f7fb fcca 	bl	8001034 <reptar_printf>
    }

out:
    return retval;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	200011dc 	.word	0x200011dc
 80056b0:	0800a580 	.word	0x0800a580
 80056b4:	0800a594 	.word	0x0800a594

080056b8 <sd_close_file>:

error_code_t sd_close_file (void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
    FRESULT fres;
    uint8_t retval = E_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	71fb      	strb	r3, [r7, #7]

    fres = f_close(&fil);
 80056c2:	480c      	ldr	r0, [pc, #48]	; (80056f4 <sd_close_file+0x3c>)
 80056c4:	f003 fd03 	bl	80090ce <f_close>
 80056c8:	4603      	mov	r3, r0
 80056ca:	71bb      	strb	r3, [r7, #6]

    if (fres != FR_OK)
 80056cc:	79bb      	ldrb	r3, [r7, #6]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <sd_close_file+0x2a>
    {
        reptar_printf("f_close error (%i)\r\n", fres);
 80056d2:	79bb      	ldrb	r3, [r7, #6]
 80056d4:	4619      	mov	r1, r3
 80056d6:	4808      	ldr	r0, [pc, #32]	; (80056f8 <sd_close_file+0x40>)
 80056d8:	f7fb fcac 	bl	8001034 <reptar_printf>
        retval = E_FS;
 80056dc:	2304      	movs	r3, #4
 80056de:	71fb      	strb	r3, [r7, #7]
        goto out;
 80056e0:	e002      	b.n	80056e8 <sd_close_file+0x30>
    }
    else
    {
        reptar_printf("Successfully closed file\r\n");
 80056e2:	4806      	ldr	r0, [pc, #24]	; (80056fc <sd_close_file+0x44>)
 80056e4:	f7fb fca6 	bl	8001034 <reptar_printf>
    }

out:
    return retval;
 80056e8:	79fb      	ldrb	r3, [r7, #7]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	200011dc 	.word	0x200011dc
 80056f8:	0800a5b8 	.word	0x0800a5b8
 80056fc:	0800a5d0 	.word	0x0800a5d0

08005700 <sd_puts>:

error_code_t sd_puts (char* input)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
    uint8_t retval = E_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	73fb      	strb	r3, [r7, #15]

    if (f_puts(input, &fil) < 1)
 800570c:	4909      	ldr	r1, [pc, #36]	; (8005734 <sd_puts+0x34>)
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f003 fe70 	bl	80093f4 <f_puts>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	dc05      	bgt.n	8005726 <sd_puts+0x26>
    {
        reptar_printf("f_puts error \r\n");
 800571a:	4807      	ldr	r0, [pc, #28]	; (8005738 <sd_puts+0x38>)
 800571c:	f7fb fc8a 	bl	8001034 <reptar_printf>
        retval = E_FS;
 8005720:	2304      	movs	r3, #4
 8005722:	73fb      	strb	r3, [r7, #15]
        goto out;
 8005724:	e000      	b.n	8005728 <sd_puts+0x28>
    }

out:
 8005726:	bf00      	nop
    return retval;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	200011dc 	.word	0x200011dc
 8005738:	0800a5ec 	.word	0x0800a5ec

0800573c <sd_test_print>:

void sd_test_print (void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b09a      	sub	sp, #104	; 0x68
 8005740:	af00      	add	r7, sp, #0
    char buffer[100];

    while(f_gets(buffer, sizeof(buffer), &fil))
 8005742:	e00a      	b.n	800575a <sd_test_print+0x1e>
    {
        reptar_printf("%s", buffer);
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	4619      	mov	r1, r3
 8005748:	480b      	ldr	r0, [pc, #44]	; (8005778 <sd_test_print+0x3c>)
 800574a:	f7fb fc73 	bl	8001034 <reptar_printf>
        fflush(stdout);
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <sd_test_print+0x40>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4618      	mov	r0, r3
 8005756:	f004 f85b 	bl	8009810 <fflush>
    while(f_gets(buffer, sizeof(buffer), &fil))
 800575a:	1d3b      	adds	r3, r7, #4
 800575c:	4a08      	ldr	r2, [pc, #32]	; (8005780 <sd_test_print+0x44>)
 800575e:	2164      	movs	r1, #100	; 0x64
 8005760:	4618      	mov	r0, r3
 8005762:	f003 fd93 	bl	800928c <f_gets>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1eb      	bne.n	8005744 <sd_test_print+0x8>
    }
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	3768      	adds	r7, #104	; 0x68
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	0800a5fc 	.word	0x0800a5fc
 800577c:	20000020 	.word	0x20000020
 8005780:	200011dc 	.word	0x200011dc

08005784 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005788:	4904      	ldr	r1, [pc, #16]	; (800579c <MX_FATFS_Init+0x18>)
 800578a:	4805      	ldr	r0, [pc, #20]	; (80057a0 <MX_FATFS_Init+0x1c>)
 800578c:	f003 fea2 	bl	80094d4 <FATFS_LinkDriver>
 8005790:	4603      	mov	r3, r0
 8005792:	461a      	mov	r2, r3
 8005794:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <MX_FATFS_Init+0x20>)
 8005796:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005798:	bf00      	nop
 800579a:	bd80      	pop	{r7, pc}
 800579c:	2000262c 	.word	0x2000262c
 80057a0:	2000000c 	.word	0x2000000c
 80057a4:	20002630 	.word	0x20002630

080057a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80057ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <SELECT>:
static volatile DSTATUS Stat = STA_NOINIT;  /* Disk Status */
static uint8_t CardType;                    /* Type 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;               /* Power flag */

static void SELECT(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_ST_PORT, SD_CS_ST_PIN, GPIO_PIN_RESET);
 80057bc:	2200      	movs	r2, #0
 80057be:	2140      	movs	r1, #64	; 0x40
 80057c0:	4803      	ldr	r0, [pc, #12]	; (80057d0 <SELECT+0x18>)
 80057c2:	f7fc fa53 	bl	8001c6c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80057c6:	2001      	movs	r0, #1
 80057c8:	f7fb ff9c 	bl	8001704 <HAL_Delay>
}
 80057cc:	bf00      	nop
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	48000400 	.word	0x48000400

080057d4 <DESELECT>:

static void DESELECT(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_ST_PORT, SD_CS_ST_PIN, GPIO_PIN_SET);
 80057d8:	2201      	movs	r2, #1
 80057da:	2140      	movs	r1, #64	; 0x40
 80057dc:	4803      	ldr	r0, [pc, #12]	; (80057ec <DESELECT+0x18>)
 80057de:	f7fc fa45 	bl	8001c6c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80057e2:	2001      	movs	r0, #1
 80057e4:	f7fb ff8e 	bl	8001704 <HAL_Delay>
}
 80057e8:	bf00      	nop
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	48000400 	.word	0x48000400

080057f0 <SPI_Transmit_Byte>:

static void SPI_Transmit_Byte(uint8_t data)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	71fb      	strb	r3, [r7, #7]
    while(!__HAL_SPI_GET_FLAG(&SD_SPI_HANDLE, SPI_FLAG_TXE));
 80057fa:	bf00      	nop
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <SPI_Transmit_Byte+0x30>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b02      	cmp	r3, #2
 8005808:	d1f8      	bne.n	80057fc <SPI_Transmit_Byte+0xc>
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, SPI_TIMEOUT);
 800580a:	1df9      	adds	r1, r7, #7
 800580c:	2364      	movs	r3, #100	; 0x64
 800580e:	2201      	movs	r2, #1
 8005810:	4803      	ldr	r0, [pc, #12]	; (8005820 <SPI_Transmit_Byte+0x30>)
 8005812:	f7fe fb95 	bl	8003f40 <HAL_SPI_Transmit>
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20002540 	.word	0x20002540

08005824 <SPI_Transmit_Buf>:

static void SPI_Transmit_Buf(uint8_t *buf, uint16_t len)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	807b      	strh	r3, [r7, #2]
    while(!__HAL_SPI_GET_FLAG(&SD_SPI_HANDLE, SPI_FLAG_TXE));
 8005830:	bf00      	nop
 8005832:	4b08      	ldr	r3, [pc, #32]	; (8005854 <SPI_Transmit_Buf+0x30>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b02      	cmp	r3, #2
 800583e:	d1f8      	bne.n	8005832 <SPI_Transmit_Buf+0xe>
    HAL_SPI_Transmit(&SD_SPI_HANDLE, buf, len, SPI_TIMEOUT);
 8005840:	887a      	ldrh	r2, [r7, #2]
 8005842:	2364      	movs	r3, #100	; 0x64
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4803      	ldr	r0, [pc, #12]	; (8005854 <SPI_Transmit_Buf+0x30>)
 8005848:	f7fe fb7a 	bl	8003f40 <HAL_SPI_Transmit>
}
 800584c:	bf00      	nop
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20002540 	.word	0x20002540

08005858 <SPI_Receive_Byte>:

static uint8_t SPI_Receive_Byte(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af02      	add	r7, sp, #8
    uint8_t buf, data;
    buf = 0xFF;
 800585e:	23ff      	movs	r3, #255	; 0xff
 8005860:	71fb      	strb	r3, [r7, #7]

    while(!__HAL_SPI_GET_FLAG(&SD_SPI_HANDLE, SPI_FLAG_TXE));
 8005862:	bf00      	nop
 8005864:	4b09      	ldr	r3, [pc, #36]	; (800588c <SPI_Receive_Byte+0x34>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b02      	cmp	r3, #2
 8005870:	d1f8      	bne.n	8005864 <SPI_Receive_Byte+0xc>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &buf, &data, 1, SPI_TIMEOUT);
 8005872:	1dba      	adds	r2, r7, #6
 8005874:	1df9      	adds	r1, r7, #7
 8005876:	2364      	movs	r3, #100	; 0x64
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	2301      	movs	r3, #1
 800587c:	4803      	ldr	r0, [pc, #12]	; (800588c <SPI_Receive_Byte+0x34>)
 800587e:	f7fe fccd 	bl	800421c <HAL_SPI_TransmitReceive>

    return data;
 8005882:	79bb      	ldrb	r3, [r7, #6]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20002540 	.word	0x20002540

08005890 <SPI_Receive_Byte_Pointer>:

static void SPI_Receive_Byte_Pointer(uint8_t *buff)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
    *buff = SPI_Receive_Byte();
 8005898:	f7ff ffde 	bl	8005858 <SPI_Receive_Byte>
 800589c:	4603      	mov	r3, r0
 800589e:	461a      	mov	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	701a      	strb	r2, [r3, #0]
}
 80058a4:	bf00      	nop
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <SD_ReadyWait>:

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
    uint8_t res;

    /* timeout 500ms */
    Timer2 = 500;
 80058b2:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <SD_ReadyWait+0x30>)
 80058b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80058b8:	801a      	strh	r2, [r3, #0]

    /* if SD goes ready, receives 0xFF */
    do {
        res = SPI_Receive_Byte();
 80058ba:	f7ff ffcd 	bl	8005858 <SPI_Receive_Byte>
 80058be:	4603      	mov	r3, r0
 80058c0:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	2bff      	cmp	r3, #255	; 0xff
 80058c6:	d003      	beq.n	80058d0 <SD_ReadyWait+0x24>
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <SD_ReadyWait+0x30>)
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f4      	bne.n	80058ba <SD_ReadyWait+0xe>

    return res;
 80058d0:	79fb      	ldrb	r3, [r7, #7]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	2000469c 	.word	0x2000469c

080058e0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF;
 80058e6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80058ea:	60fb      	str	r3, [r7, #12]

    /* transmit bytes to wake up */
    DESELECT();
 80058ec:	f7ff ff72 	bl	80057d4 <DESELECT>
    for(int i = 0; i < 10; i++)
 80058f0:	2300      	movs	r3, #0
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	e005      	b.n	8005902 <SD_PowerOn+0x22>
    {
        SPI_Transmit_Byte(0xFF);
 80058f6:	20ff      	movs	r0, #255	; 0xff
 80058f8:	f7ff ff7a 	bl	80057f0 <SPI_Transmit_Byte>
    for(int i = 0; i < 10; i++)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	3301      	adds	r3, #1
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b09      	cmp	r3, #9
 8005906:	ddf6      	ble.n	80058f6 <SD_PowerOn+0x16>
    }

    /* slave select */
    SELECT();
 8005908:	f7ff ff56 	bl	80057b8 <SELECT>

    /* make idle state */
    args[0] = CMD0;     /* CMD0:GO_IDLE_STATE */
 800590c:	2340      	movs	r3, #64	; 0x40
 800590e:	703b      	strb	r3, [r7, #0]
    args[1] = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	707b      	strb	r3, [r7, #1]
    args[2] = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95;     /* CRC */
 8005920:	2395      	movs	r3, #149	; 0x95
 8005922:	717b      	strb	r3, [r7, #5]

    SPI_Transmit_Buf(args, sizeof(args));
 8005924:	463b      	mov	r3, r7
 8005926:	2106      	movs	r1, #6
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff ff7b 	bl	8005824 <SPI_Transmit_Buf>

    /* wait response */
    while ((SPI_Receive_Byte() != 0x01) && cnt)
 800592e:	e002      	b.n	8005936 <SD_PowerOn+0x56>
    {
        cnt--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3b01      	subs	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
    while ((SPI_Receive_Byte() != 0x01) && cnt)
 8005936:	f7ff ff8f 	bl	8005858 <SPI_Receive_Byte>
 800593a:	4603      	mov	r3, r0
 800593c:	2b01      	cmp	r3, #1
 800593e:	d002      	beq.n	8005946 <SD_PowerOn+0x66>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f4      	bne.n	8005930 <SD_PowerOn+0x50>
    }

    DESELECT();
 8005946:	f7ff ff45 	bl	80057d4 <DESELECT>
    SPI_Transmit_Byte(0XFF);
 800594a:	20ff      	movs	r0, #255	; 0xff
 800594c:	f7ff ff50 	bl	80057f0 <SPI_Transmit_Byte>

    PowerFlag = 1;
 8005950:	4b03      	ldr	r3, [pc, #12]	; (8005960 <SD_PowerOn+0x80>)
 8005952:	2201      	movs	r2, #1
 8005954:	701a      	strb	r2, [r3, #0]
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	2000220d 	.word	0x2000220d

08005964 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8005968:	4b03      	ldr	r3, [pc, #12]	; (8005978 <SD_PowerOff+0x14>)
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
}
 800596e:	bf00      	nop
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	2000220d 	.word	0x2000220d

0800597c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
    return PowerFlag;
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <SD_CheckPower+0x14>)
 8005982:	781b      	ldrb	r3, [r3, #0]
}
 8005984:	4618      	mov	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	2000220d 	.word	0x2000220d

08005994 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* timeout 200ms */
    Timer1 = 200;
 800599e:	4b13      	ldr	r3, [pc, #76]	; (80059ec <SD_RxDataBlock+0x58>)
 80059a0:	22c8      	movs	r2, #200	; 0xc8
 80059a2:	801a      	strh	r2, [r3, #0]

    /* loop until receive a response or timeout */
    do {
        token = SPI_Receive_Byte();
 80059a4:	f7ff ff58 	bl	8005858 <SPI_Receive_Byte>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && Timer1);
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2bff      	cmp	r3, #255	; 0xff
 80059b0:	d103      	bne.n	80059ba <SD_RxDataBlock+0x26>
 80059b2:	4b0e      	ldr	r3, [pc, #56]	; (80059ec <SD_RxDataBlock+0x58>)
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1f4      	bne.n	80059a4 <SD_RxDataBlock+0x10>

    /* invalid response */
    if(token != 0xFE) return false;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2bfe      	cmp	r3, #254	; 0xfe
 80059be:	d001      	beq.n	80059c4 <SD_RxDataBlock+0x30>
 80059c0:	2300      	movs	r3, #0
 80059c2:	e00f      	b.n	80059e4 <SD_RxDataBlock+0x50>

    /* receive data */
    do {
        SPI_Receive_Byte_Pointer(buff++);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff ff60 	bl	8005890 <SPI_Receive_Byte_Pointer>
    } while(len--);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	1e5a      	subs	r2, r3, #1
 80059d4:	603a      	str	r2, [r7, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f4      	bne.n	80059c4 <SD_RxDataBlock+0x30>

    /* discard CRC */
    SPI_Receive_Byte();
 80059da:	f7ff ff3d 	bl	8005858 <SPI_Receive_Byte>
    SPI_Receive_Byte();
 80059de:	f7ff ff3b 	bl	8005858 <SPI_Receive_Byte>

    return true;
 80059e2:	2301      	movs	r3, #1
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	2000469e 	.word	0x2000469e

080059f0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	70fb      	strb	r3, [r7, #3]
    uint8_t resp;
    uint8_t i = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	73bb      	strb	r3, [r7, #14]

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF) return false;
 8005a00:	f7ff ff54 	bl	80058ac <SD_ReadyWait>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2bff      	cmp	r3, #255	; 0xff
 8005a08:	d001      	beq.n	8005a0e <SD_TxDataBlock+0x1e>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e02f      	b.n	8005a6e <SD_TxDataBlock+0x7e>

    /* transmit token */
    SPI_Transmit_Byte(token);
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff feed 	bl	80057f0 <SPI_Transmit_Byte>

    /* if it's not STOP token, transmit data */
    if (token != 0xFD)
 8005a16:	78fb      	ldrb	r3, [r7, #3]
 8005a18:	2bfd      	cmp	r3, #253	; 0xfd
 8005a1a:	d020      	beq.n	8005a5e <SD_TxDataBlock+0x6e>
    {
        SPI_Transmit_Buf((uint8_t*)buff, 512);
 8005a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff feff 	bl	8005824 <SPI_Transmit_Buf>

        /* discard CRC */
        SPI_Receive_Byte();
 8005a26:	f7ff ff17 	bl	8005858 <SPI_Receive_Byte>
        SPI_Receive_Byte();
 8005a2a:	f7ff ff15 	bl	8005858 <SPI_Receive_Byte>

        /* receive response */
        while (i <= 64)
 8005a2e:	e00b      	b.n	8005a48 <SD_TxDataBlock+0x58>
        {
            resp = SPI_Receive_Byte();
 8005a30:	f7ff ff12 	bl	8005858 <SPI_Receive_Byte>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]

            /* transmit 0x05 accepted */
            if ((resp & 0x1F) == 0x05) break;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	d006      	beq.n	8005a50 <SD_TxDataBlock+0x60>
            i++;
 8005a42:	7bbb      	ldrb	r3, [r7, #14]
 8005a44:	3301      	adds	r3, #1
 8005a46:	73bb      	strb	r3, [r7, #14]
        while (i <= 64)
 8005a48:	7bbb      	ldrb	r3, [r7, #14]
 8005a4a:	2b40      	cmp	r3, #64	; 0x40
 8005a4c:	d9f0      	bls.n	8005a30 <SD_TxDataBlock+0x40>
 8005a4e:	e000      	b.n	8005a52 <SD_TxDataBlock+0x62>
            if ((resp & 0x1F) == 0x05) break;
 8005a50:	bf00      	nop
        }

        /* recv buffer clear */
        while (SPI_Receive_Byte() == 0);
 8005a52:	bf00      	nop
 8005a54:	f7ff ff00 	bl	8005858 <SPI_Receive_Byte>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0fa      	beq.n	8005a54 <SD_TxDataBlock+0x64>
    }

    /* transmit 0x05 accepted */
    if ((resp & 0x1F) == 0x05) return true;
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	f003 031f 	and.w	r3, r3, #31
 8005a64:	2b05      	cmp	r3, #5
 8005a66:	d101      	bne.n	8005a6c <SD_TxDataBlock+0x7c>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <SD_TxDataBlock+0x7e>

    return false;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	6039      	str	r1, [r7, #0]
 8005a80:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF) return 0xFF;
 8005a82:	f7ff ff13 	bl	80058ac <SD_ReadyWait>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2bff      	cmp	r3, #255	; 0xff
 8005a8a:	d001      	beq.n	8005a90 <SD_SendCmd+0x1a>
 8005a8c:	23ff      	movs	r3, #255	; 0xff
 8005a8e:	e042      	b.n	8005b16 <SD_SendCmd+0xa0>

    /* transmit command */
    SPI_Transmit_Byte(cmd);                    /* Command */
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff feac 	bl	80057f0 <SPI_Transmit_Byte>
    SPI_Transmit_Byte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	0e1b      	lsrs	r3, r3, #24
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff fea6 	bl	80057f0 <SPI_Transmit_Byte>
    SPI_Transmit_Byte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	0c1b      	lsrs	r3, r3, #16
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff fea0 	bl	80057f0 <SPI_Transmit_Byte>
    SPI_Transmit_Byte((uint8_t)(arg >> 8));    /* Argument[15..8] */
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fe9a 	bl	80057f0 <SPI_Transmit_Byte>
    SPI_Transmit_Byte((uint8_t)arg);           /* Argument[7..0] */
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff fe95 	bl	80057f0 <SPI_Transmit_Byte>

    /* prepare CRC */
    if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d102      	bne.n	8005ad2 <SD_SendCmd+0x5c>
 8005acc:	2395      	movs	r3, #149	; 0x95
 8005ace:	73fb      	strb	r3, [r7, #15]
 8005ad0:	e007      	b.n	8005ae2 <SD_SendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87;    /* CRC for CMD8(0x1AA) */
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	2b48      	cmp	r3, #72	; 0x48
 8005ad6:	d102      	bne.n	8005ade <SD_SendCmd+0x68>
 8005ad8:	2387      	movs	r3, #135	; 0x87
 8005ada:	73fb      	strb	r3, [r7, #15]
 8005adc:	e001      	b.n	8005ae2 <SD_SendCmd+0x6c>
    else crc = 1;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]

    /* transmit CRC */
    SPI_Transmit_Byte(crc);
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fe83 	bl	80057f0 <SPI_Transmit_Byte>

    /* Skip a stuff byte when STOP_TRANSMISSION */
    if (cmd == CMD12) SPI_Receive_Byte();
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	2b4c      	cmp	r3, #76	; 0x4c
 8005aee:	d101      	bne.n	8005af4 <SD_SendCmd+0x7e>
 8005af0:	f7ff feb2 	bl	8005858 <SPI_Receive_Byte>

    /* receive response */
    uint8_t n = 10;
 8005af4:	230a      	movs	r3, #10
 8005af6:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_Receive_Byte();
 8005af8:	f7ff feae 	bl	8005858 <SPI_Receive_Byte>
 8005afc:	4603      	mov	r3, r0
 8005afe:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);
 8005b00:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	da05      	bge.n	8005b14 <SD_SendCmd+0x9e>
 8005b08:	7bbb      	ldrb	r3, [r7, #14]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	73bb      	strb	r3, [r7, #14]
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1f1      	bne.n	8005af8 <SD_SendCmd+0x82>

    return res;
 8005b14:	7b7b      	ldrb	r3, [r7, #13]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <SD_initialize>:

/* initialize SD */
DSTATUS SD_initialize(BYTE drv)
{
 8005b20:	b590      	push	{r4, r7, lr}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    /* single drive, drv should be 0 */
    if(drv) return STA_NOINIT;
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <SD_initialize+0x14>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0d1      	b.n	8005cd8 <SD_initialize+0x1b8>

    /* no disk */
    if(Stat & STA_NODISK) return Stat;
 8005b34:	4b6a      	ldr	r3, [pc, #424]	; (8005ce0 <SD_initialize+0x1c0>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <SD_initialize+0x2a>
 8005b42:	4b67      	ldr	r3, [pc, #412]	; (8005ce0 <SD_initialize+0x1c0>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	e0c6      	b.n	8005cd8 <SD_initialize+0x1b8>

    /* power on */
    SD_PowerOn();
 8005b4a:	f7ff fec9 	bl	80058e0 <SD_PowerOn>

    /* slave select */
    SELECT();
 8005b4e:	f7ff fe33 	bl	80057b8 <SELECT>

    /* check disk type */
    type = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	73bb      	strb	r3, [r7, #14]

    /* send GO_IDLE_STATE command */
    if (SD_SendCmd(CMD0, 0) == 1)
 8005b56:	2100      	movs	r1, #0
 8005b58:	2040      	movs	r0, #64	; 0x40
 8005b5a:	f7ff ff8c 	bl	8005a76 <SD_SendCmd>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	f040 80a1 	bne.w	8005ca8 <SD_initialize+0x188>
    {
        /* timeout 1 sec */
        Timer1 = 1000;
 8005b66:	4b5f      	ldr	r3, [pc, #380]	; (8005ce4 <SD_initialize+0x1c4>)
 8005b68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b6c:	801a      	strh	r2, [r3, #0]

        /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
        if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8005b6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b72:	2048      	movs	r0, #72	; 0x48
 8005b74:	f7ff ff7f 	bl	8005a76 <SD_SendCmd>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d155      	bne.n	8005c2a <SD_initialize+0x10a>
        {
            /* operation condition register */
            for (n = 0; n < 4; n++)
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]
 8005b82:	e00c      	b.n	8005b9e <SD_initialize+0x7e>
            {
                ocr[n] = SPI_Receive_Byte();
 8005b84:	7bfc      	ldrb	r4, [r7, #15]
 8005b86:	f7ff fe67 	bl	8005858 <SPI_Receive_Byte>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f107 0310 	add.w	r3, r7, #16
 8005b92:	4423      	add	r3, r4
 8005b94:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d9ef      	bls.n	8005b84 <SD_initialize+0x64>
            }

            /* voltage range 2.7-3.6V */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8005ba4:	7abb      	ldrb	r3, [r7, #10]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d17e      	bne.n	8005ca8 <SD_initialize+0x188>
 8005baa:	7afb      	ldrb	r3, [r7, #11]
 8005bac:	2baa      	cmp	r3, #170	; 0xaa
 8005bae:	d17b      	bne.n	8005ca8 <SD_initialize+0x188>
            {
                /* ACMD41 with HCS bit */
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	2077      	movs	r0, #119	; 0x77
 8005bb4:	f7ff ff5f 	bl	8005a76 <SD_SendCmd>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d807      	bhi.n	8005bce <SD_initialize+0xae>
 8005bbe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005bc2:	2069      	movs	r0, #105	; 0x69
 8005bc4:	f7ff ff57 	bl	8005a76 <SD_SendCmd>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d004      	beq.n	8005bd8 <SD_initialize+0xb8>
                } while (Timer1);
 8005bce:	4b45      	ldr	r3, [pc, #276]	; (8005ce4 <SD_initialize+0x1c4>)
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1ec      	bne.n	8005bb0 <SD_initialize+0x90>
 8005bd6:	e000      	b.n	8005bda <SD_initialize+0xba>
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005bd8:	bf00      	nop

                /* READ_OCR */
                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8005bda:	4b42      	ldr	r3, [pc, #264]	; (8005ce4 <SD_initialize+0x1c4>)
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d062      	beq.n	8005ca8 <SD_initialize+0x188>
 8005be2:	2100      	movs	r1, #0
 8005be4:	207a      	movs	r0, #122	; 0x7a
 8005be6:	f7ff ff46 	bl	8005a76 <SD_SendCmd>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d15b      	bne.n	8005ca8 <SD_initialize+0x188>
                {
                    /* Check CCS bit */
                    for (n = 0; n < 4; n++)
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	73fb      	strb	r3, [r7, #15]
 8005bf4:	e00c      	b.n	8005c10 <SD_initialize+0xf0>
                    {
                        ocr[n] = SPI_Receive_Byte();
 8005bf6:	7bfc      	ldrb	r4, [r7, #15]
 8005bf8:	f7ff fe2e 	bl	8005858 <SPI_Receive_Byte>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f107 0310 	add.w	r3, r7, #16
 8005c04:	4423      	add	r3, r4
 8005c06:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	73fb      	strb	r3, [r7, #15]
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d9ef      	bls.n	8005bf6 <SD_initialize+0xd6>
                    }

                    /* SDv2 (HC or SC) */
                    type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8005c16:	7a3b      	ldrb	r3, [r7, #8]
 8005c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <SD_initialize+0x104>
 8005c20:	230c      	movs	r3, #12
 8005c22:	e000      	b.n	8005c26 <SD_initialize+0x106>
 8005c24:	2304      	movs	r3, #4
 8005c26:	73bb      	strb	r3, [r7, #14]
 8005c28:	e03e      	b.n	8005ca8 <SD_initialize+0x188>
            }
        }
        else
        {
            /* SDC V1 or MMC */
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	2077      	movs	r0, #119	; 0x77
 8005c2e:	f7ff ff22 	bl	8005a76 <SD_SendCmd>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d808      	bhi.n	8005c4a <SD_initialize+0x12a>
 8005c38:	2100      	movs	r1, #0
 8005c3a:	2069      	movs	r0, #105	; 0x69
 8005c3c:	f7ff ff1b 	bl	8005a76 <SD_SendCmd>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d801      	bhi.n	8005c4a <SD_initialize+0x12a>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e000      	b.n	8005c4c <SD_initialize+0x12c>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	73bb      	strb	r3, [r7, #14]

            do
            {
                if (type == CT_SD1)
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d10e      	bne.n	8005c72 <SD_initialize+0x152>
                {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8005c54:	2100      	movs	r1, #0
 8005c56:	2077      	movs	r0, #119	; 0x77
 8005c58:	f7ff ff0d 	bl	8005a76 <SD_SendCmd>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d80e      	bhi.n	8005c80 <SD_initialize+0x160>
 8005c62:	2100      	movs	r1, #0
 8005c64:	2069      	movs	r0, #105	; 0x69
 8005c66:	f7ff ff06 	bl	8005a76 <SD_SendCmd>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d107      	bne.n	8005c80 <SD_initialize+0x160>
 8005c70:	e00c      	b.n	8005c8c <SD_initialize+0x16c>
                }
                else
                {
                    if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005c72:	2100      	movs	r1, #0
 8005c74:	2041      	movs	r0, #65	; 0x41
 8005c76:	f7ff fefe 	bl	8005a76 <SD_SendCmd>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d004      	beq.n	8005c8a <SD_initialize+0x16a>
                }

            } while (Timer1);
 8005c80:	4b18      	ldr	r3, [pc, #96]	; (8005ce4 <SD_initialize+0x1c4>)
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e2      	bne.n	8005c4e <SD_initialize+0x12e>
 8005c88:	e000      	b.n	8005c8c <SD_initialize+0x16c>
                    if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005c8a:	bf00      	nop

            /* SET_BLOCKLEN */
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8005c8c:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <SD_initialize+0x1c4>)
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d007      	beq.n	8005ca4 <SD_initialize+0x184>
 8005c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c98:	2050      	movs	r0, #80	; 0x50
 8005c9a:	f7ff feec 	bl	8005a76 <SD_SendCmd>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <SD_initialize+0x188>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;
 8005ca8:	4a0f      	ldr	r2, [pc, #60]	; (8005ce8 <SD_initialize+0x1c8>)
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
 8005cac:	7013      	strb	r3, [r2, #0]

    /* Idle */
    DESELECT();
 8005cae:	f7ff fd91 	bl	80057d4 <DESELECT>
    SPI_Receive_Byte();
 8005cb2:	f7ff fdd1 	bl	8005858 <SPI_Receive_Byte>

    /* Clear STA_NOINIT */
    if (type)
 8005cb6:	7bbb      	ldrb	r3, [r7, #14]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <SD_initialize+0x1ae>
    {
        Stat &= ~STA_NOINIT;
 8005cbc:	4b08      	ldr	r3, [pc, #32]	; (8005ce0 <SD_initialize+0x1c0>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <SD_initialize+0x1c0>)
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	e001      	b.n	8005cd2 <SD_initialize+0x1b2>
    }
    else
    {
        /* Initialization failed */
        SD_PowerOff();
 8005cce:	f7ff fe49 	bl	8005964 <SD_PowerOff>
    }

    return Stat;
 8005cd2:	4b03      	ldr	r3, [pc, #12]	; (8005ce0 <SD_initialize+0x1c0>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	b2db      	uxtb	r3, r3
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd90      	pop	{r4, r7, pc}
 8005ce0:	20000009 	.word	0x20000009
 8005ce4:	2000469e 	.word	0x2000469e
 8005ce8:	2000220c 	.word	0x2000220c

08005cec <SD_status>:

/* return disk status */
DSTATUS SD_status(BYTE drv)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <SD_status+0x14>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e002      	b.n	8005d06 <SD_status+0x1a>
    return Stat;
 8005d00:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <SD_status+0x28>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	b2db      	uxtb	r3, r3
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000009 	.word	0x20000009

08005d18 <SD_read>:

/* read sector */
DRESULT SD_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count) return RES_PARERR;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <SD_read+0x1c>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <SD_read+0x20>
 8005d34:	2304      	movs	r3, #4
 8005d36:	e054      	b.n	8005de2 <SD_read+0xca>

    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005d38:	4b2c      	ldr	r3, [pc, #176]	; (8005dec <SD_read+0xd4>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <SD_read+0x32>
 8005d46:	2303      	movs	r3, #3
 8005d48:	e04b      	b.n	8005de2 <SD_read+0xca>

    /* convert to byte address */
    if (!(CardType & CT_SD2)) sector *= 512;
 8005d4a:	4b29      	ldr	r3, [pc, #164]	; (8005df0 <SD_read+0xd8>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <SD_read+0x44>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	025b      	lsls	r3, r3, #9
 8005d5a:	607b      	str	r3, [r7, #4]

    SELECT();
 8005d5c:	f7ff fd2c 	bl	80057b8 <SELECT>

    if (count == 1)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d111      	bne.n	8005d8a <SD_read+0x72>
    {
        /* READ_SINGLE_BLOCK */
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	2051      	movs	r0, #81	; 0x51
 8005d6a:	f7ff fe84 	bl	8005a76 <SD_SendCmd>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d12c      	bne.n	8005dce <SD_read+0xb6>
 8005d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d78:	68b8      	ldr	r0, [r7, #8]
 8005d7a:	f7ff fe0b 	bl	8005994 <SD_RxDataBlock>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d024      	beq.n	8005dce <SD_read+0xb6>
 8005d84:	2300      	movs	r3, #0
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	e021      	b.n	8005dce <SD_read+0xb6>
    }
    else
    {
        /* READ_MULTIPLE_BLOCK */
        if (SD_SendCmd(CMD18, sector) == 0)
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	2052      	movs	r0, #82	; 0x52
 8005d8e:	f7ff fe72 	bl	8005a76 <SD_SendCmd>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11a      	bne.n	8005dce <SD_read+0xb6>
        {
            do {
                if (!SD_RxDataBlock(buff, 512)) break;
 8005d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d9c:	68b8      	ldr	r0, [r7, #8]
 8005d9e:	f7ff fdf9 	bl	8005994 <SD_RxDataBlock>
 8005da2:	4603      	mov	r3, r0
 8005da4:	f083 0301 	eor.w	r3, r3, #1
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <SD_read+0xac>
                buff += 512;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005db4:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1ea      	bne.n	8005d98 <SD_read+0x80>
 8005dc2:	e000      	b.n	8005dc6 <SD_read+0xae>
                if (!SD_RxDataBlock(buff, 512)) break;
 8005dc4:	bf00      	nop

            /* STOP_TRANSMISSION */
            SD_SendCmd(CMD12, 0);
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	204c      	movs	r0, #76	; 0x4c
 8005dca:	f7ff fe54 	bl	8005a76 <SD_SendCmd>
        }
    }

    /* Idle */
    DESELECT();
 8005dce:	f7ff fd01 	bl	80057d4 <DESELECT>
    SPI_Receive_Byte();
 8005dd2:	f7ff fd41 	bl	8005858 <SPI_Receive_Byte>

    return count ? RES_ERROR : RES_OK;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bf14      	ite	ne
 8005ddc:	2301      	movne	r3, #1
 8005dde:	2300      	moveq	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20000009 	.word	0x20000009
 8005df0:	2000220c 	.word	0x2000220c

08005df4 <SD_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count) return RES_PARERR;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d102      	bne.n	8005e10 <SD_write+0x1c>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <SD_write+0x20>
 8005e10:	2304      	movs	r3, #4
 8005e12:	e071      	b.n	8005ef8 <SD_write+0x104>

    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005e14:	4b3a      	ldr	r3, [pc, #232]	; (8005f00 <SD_write+0x10c>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <SD_write+0x32>
 8005e22:	2303      	movs	r3, #3
 8005e24:	e068      	b.n	8005ef8 <SD_write+0x104>

    /* write protection */
    if (Stat & STA_PROTECT) return RES_WRPRT;
 8005e26:	4b36      	ldr	r3, [pc, #216]	; (8005f00 <SD_write+0x10c>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <SD_write+0x44>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e05f      	b.n	8005ef8 <SD_write+0x104>

    /* convert to byte address */
    if (!(CardType & CT_SD2)) sector *= 512;
 8005e38:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <SD_write+0x110>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <SD_write+0x56>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	025b      	lsls	r3, r3, #9
 8005e48:	607b      	str	r3, [r7, #4]

    SELECT();
 8005e4a:	f7ff fcb5 	bl	80057b8 <SELECT>

    if (count == 1)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d110      	bne.n	8005e76 <SD_write+0x82>
    {
        /* WRITE_BLOCK */
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	2058      	movs	r0, #88	; 0x58
 8005e58:	f7ff fe0d 	bl	8005a76 <SD_SendCmd>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d140      	bne.n	8005ee4 <SD_write+0xf0>
 8005e62:	21fe      	movs	r1, #254	; 0xfe
 8005e64:	68b8      	ldr	r0, [r7, #8]
 8005e66:	f7ff fdc3 	bl	80059f0 <SD_TxDataBlock>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d039      	beq.n	8005ee4 <SD_write+0xf0>
            count = 0;
 8005e70:	2300      	movs	r3, #0
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	e036      	b.n	8005ee4 <SD_write+0xf0>
    }
    else
    {
        /* WRITE_MULTIPLE_BLOCK */
        if (CardType & CT_SD1)
 8005e76:	4b23      	ldr	r3, [pc, #140]	; (8005f04 <SD_write+0x110>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d007      	beq.n	8005e92 <SD_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 8005e82:	2100      	movs	r1, #0
 8005e84:	2077      	movs	r0, #119	; 0x77
 8005e86:	f7ff fdf6 	bl	8005a76 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	2057      	movs	r0, #87	; 0x57
 8005e8e:	f7ff fdf2 	bl	8005a76 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	2059      	movs	r0, #89	; 0x59
 8005e96:	f7ff fdee 	bl	8005a76 <SD_SendCmd>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d121      	bne.n	8005ee4 <SD_write+0xf0>
        {
            do {
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005ea0:	21fc      	movs	r1, #252	; 0xfc
 8005ea2:	68b8      	ldr	r0, [r7, #8]
 8005ea4:	f7ff fda4 	bl	80059f0 <SD_TxDataBlock>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f083 0301 	eor.w	r3, r3, #1
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <SD_write+0xd6>
                buff += 512;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005eba:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	603b      	str	r3, [r7, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1eb      	bne.n	8005ea0 <SD_write+0xac>
 8005ec8:	e000      	b.n	8005ecc <SD_write+0xd8>
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005eca:	bf00      	nop

            /* STOP_TRAN token */
            if(!SD_TxDataBlock(0, 0xFD))
 8005ecc:	21fd      	movs	r1, #253	; 0xfd
 8005ece:	2000      	movs	r0, #0
 8005ed0:	f7ff fd8e 	bl	80059f0 <SD_TxDataBlock>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f083 0301 	eor.w	r3, r3, #1
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <SD_write+0xf0>
            {
                count = 1;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	603b      	str	r3, [r7, #0]
            }
        }
    }

    /* Idle */
    DESELECT();
 8005ee4:	f7ff fc76 	bl	80057d4 <DESELECT>
    SPI_Receive_Byte();
 8005ee8:	f7ff fcb6 	bl	8005858 <SPI_Receive_Byte>

    return count ? RES_ERROR : RES_OK;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	bf14      	ite	ne
 8005ef2:	2301      	movne	r3, #1
 8005ef4:	2300      	moveq	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20000009 	.word	0x20000009
 8005f04:	2000220c 	.word	0x2000220c

08005f08 <SD_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8005f08:	b590      	push	{r4, r7, lr}
 8005f0a:	b08b      	sub	sp, #44	; 0x2c
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	603a      	str	r2, [r7, #0]
 8005f12:	71fb      	strb	r3, [r7, #7]
 8005f14:	460b      	mov	r3, r1
 8005f16:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    uint8_t n, csd[16], *ptr = buff;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	623b      	str	r3, [r7, #32]
    WORD csize;

    /* pdrv should be 0 */
    if (drv) return RES_PARERR;
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <SD_ioctl+0x1e>
 8005f22:	2304      	movs	r3, #4
 8005f24:	e115      	b.n	8006152 <SD_ioctl+0x24a>
    res = RES_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (ctrl == CTRL_POWER)
 8005f2c:	79bb      	ldrb	r3, [r7, #6]
 8005f2e:	2b05      	cmp	r3, #5
 8005f30:	d124      	bne.n	8005f7c <SD_ioctl+0x74>
    {
        switch (*ptr)
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d012      	beq.n	8005f60 <SD_ioctl+0x58>
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	dc1a      	bgt.n	8005f74 <SD_ioctl+0x6c>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <SD_ioctl+0x40>
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d006      	beq.n	8005f54 <SD_ioctl+0x4c>
 8005f46:	e015      	b.n	8005f74 <SD_ioctl+0x6c>
        {
        case 0:
            SD_PowerOff();      /* Power Off */
 8005f48:	f7ff fd0c 	bl	8005964 <SD_PowerOff>
            res = RES_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8005f52:	e0fc      	b.n	800614e <SD_ioctl+0x246>
        case 1:
            SD_PowerOn();       /* Power On */
 8005f54:	f7ff fcc4 	bl	80058e0 <SD_PowerOn>
            res = RES_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8005f5e:	e0f6      	b.n	800614e <SD_ioctl+0x246>
        case 2:
            *(ptr + 1) = SD_CheckPower();
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	1c5c      	adds	r4, r3, #1
 8005f64:	f7ff fd0a 	bl	800597c <SD_CheckPower>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	7023      	strb	r3, [r4, #0]
            res = RES_OK;       /* Power Check */
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8005f72:	e0ec      	b.n	800614e <SD_ioctl+0x246>
        default:
            res = RES_PARERR;
 8005f74:	2304      	movs	r3, #4
 8005f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f7a:	e0e8      	b.n	800614e <SD_ioctl+0x246>
        }
    }
    else
    {
        /* no disk */
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005f7c:	4b77      	ldr	r3, [pc, #476]	; (800615c <SD_ioctl+0x254>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <SD_ioctl+0x86>
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e0e1      	b.n	8006152 <SD_ioctl+0x24a>

        SELECT();
 8005f8e:	f7ff fc13 	bl	80057b8 <SELECT>

        switch (ctrl)
 8005f92:	79bb      	ldrb	r3, [r7, #6]
 8005f94:	2b0d      	cmp	r3, #13
 8005f96:	f200 80cb 	bhi.w	8006130 <SD_ioctl+0x228>
 8005f9a:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <SD_ioctl+0x98>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	0800609b 	.word	0x0800609b
 8005fa4:	08005fd9 	.word	0x08005fd9
 8005fa8:	0800608b 	.word	0x0800608b
 8005fac:	08006131 	.word	0x08006131
 8005fb0:	08006131 	.word	0x08006131
 8005fb4:	08006131 	.word	0x08006131
 8005fb8:	08006131 	.word	0x08006131
 8005fbc:	08006131 	.word	0x08006131
 8005fc0:	08006131 	.word	0x08006131
 8005fc4:	08006131 	.word	0x08006131
 8005fc8:	08006131 	.word	0x08006131
 8005fcc:	080060ad 	.word	0x080060ad
 8005fd0:	080060d1 	.word	0x080060d1
 8005fd4:	080060f5 	.word	0x080060f5
        {
        case GET_SECTOR_COUNT:
            /* SEND_CSD */
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8005fd8:	2100      	movs	r1, #0
 8005fda:	2049      	movs	r0, #73	; 0x49
 8005fdc:	f7ff fd4b 	bl	8005a76 <SD_SendCmd>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f040 80a8 	bne.w	8006138 <SD_ioctl+0x230>
 8005fe8:	f107 030c 	add.w	r3, r7, #12
 8005fec:	2110      	movs	r1, #16
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff fcd0 	bl	8005994 <SD_RxDataBlock>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 809e 	beq.w	8006138 <SD_ioctl+0x230>
            {
                if ((csd[0] >> 6) == 1)
 8005ffc:	7b3b      	ldrb	r3, [r7, #12]
 8005ffe:	099b      	lsrs	r3, r3, #6
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d10e      	bne.n	8006024 <SD_ioctl+0x11c>
                {
                    /* SDC V2 */
                    csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8006006:	7d7b      	ldrb	r3, [r7, #21]
 8006008:	b29a      	uxth	r2, r3
 800600a:	7d3b      	ldrb	r3, [r7, #20]
 800600c:	b29b      	uxth	r3, r3
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	b29b      	uxth	r3, r3
 8006012:	4413      	add	r3, r2
 8006014:	b29b      	uxth	r3, r3
 8006016:	3301      	adds	r3, #1
 8006018:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*) buff = (DWORD) csize << 10;
 800601a:	8bfb      	ldrh	r3, [r7, #30]
 800601c:	029a      	lsls	r2, r3, #10
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e02e      	b.n	8006082 <SD_ioctl+0x17a>
                }
                else
                {
                    /* MMC or SDC V1 */
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006024:	7c7b      	ldrb	r3, [r7, #17]
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	b2da      	uxtb	r2, r3
 800602c:	7dbb      	ldrb	r3, [r7, #22]
 800602e:	09db      	lsrs	r3, r3, #7
 8006030:	b2db      	uxtb	r3, r3
 8006032:	4413      	add	r3, r2
 8006034:	b2da      	uxtb	r2, r3
 8006036:	7d7b      	ldrb	r3, [r7, #21]
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f003 0306 	and.w	r3, r3, #6
 8006040:	b2db      	uxtb	r3, r3
 8006042:	4413      	add	r3, r2
 8006044:	b2db      	uxtb	r3, r3
 8006046:	3302      	adds	r3, #2
 8006048:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800604c:	7d3b      	ldrb	r3, [r7, #20]
 800604e:	099b      	lsrs	r3, r3, #6
 8006050:	b2db      	uxtb	r3, r3
 8006052:	b29a      	uxth	r2, r3
 8006054:	7cfb      	ldrb	r3, [r7, #19]
 8006056:	b29b      	uxth	r3, r3
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	b29b      	uxth	r3, r3
 800605c:	4413      	add	r3, r2
 800605e:	b29a      	uxth	r2, r3
 8006060:	7cbb      	ldrb	r3, [r7, #18]
 8006062:	029b      	lsls	r3, r3, #10
 8006064:	b29b      	uxth	r3, r3
 8006066:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800606a:	b29b      	uxth	r3, r3
 800606c:	4413      	add	r3, r2
 800606e:	b29b      	uxth	r3, r3
 8006070:	3301      	adds	r3, #1
 8006072:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*) buff = (DWORD) csize << (n - 9);
 8006074:	8bfa      	ldrh	r2, [r7, #30]
 8006076:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800607a:	3b09      	subs	r3, #9
 800607c:	409a      	lsls	r2, r3
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8006088:	e056      	b.n	8006138 <SD_ioctl+0x230>
        case GET_SECTOR_SIZE:
            *(WORD*) buff = 512;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006090:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8006098:	e055      	b.n	8006146 <SD_ioctl+0x23e>
        case CTRL_SYNC:
            if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800609a:	f7ff fc07 	bl	80058ac <SD_ReadyWait>
 800609e:	4603      	mov	r3, r0
 80060a0:	2bff      	cmp	r3, #255	; 0xff
 80060a2:	d14b      	bne.n	800613c <SD_ioctl+0x234>
 80060a4:	2300      	movs	r3, #0
 80060a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80060aa:	e047      	b.n	800613c <SD_ioctl+0x234>
        case MMC_GET_CSD:
            /* SEND_CSD */
            if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80060ac:	2100      	movs	r1, #0
 80060ae:	2049      	movs	r0, #73	; 0x49
 80060b0:	f7ff fce1 	bl	8005a76 <SD_SendCmd>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d142      	bne.n	8006140 <SD_ioctl+0x238>
 80060ba:	2110      	movs	r1, #16
 80060bc:	6a38      	ldr	r0, [r7, #32]
 80060be:	f7ff fc69 	bl	8005994 <SD_RxDataBlock>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d03b      	beq.n	8006140 <SD_ioctl+0x238>
 80060c8:	2300      	movs	r3, #0
 80060ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80060ce:	e037      	b.n	8006140 <SD_ioctl+0x238>
        case MMC_GET_CID:
            /* SEND_CID */
            if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80060d0:	2100      	movs	r1, #0
 80060d2:	204a      	movs	r0, #74	; 0x4a
 80060d4:	f7ff fccf 	bl	8005a76 <SD_SendCmd>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d132      	bne.n	8006144 <SD_ioctl+0x23c>
 80060de:	2110      	movs	r1, #16
 80060e0:	6a38      	ldr	r0, [r7, #32]
 80060e2:	f7ff fc57 	bl	8005994 <SD_RxDataBlock>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d02b      	beq.n	8006144 <SD_ioctl+0x23c>
 80060ec:	2300      	movs	r3, #0
 80060ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80060f2:	e027      	b.n	8006144 <SD_ioctl+0x23c>
        case MMC_GET_OCR:
            /* READ_OCR */
            if (SD_SendCmd(CMD58, 0) == 0)
 80060f4:	2100      	movs	r1, #0
 80060f6:	207a      	movs	r0, #122	; 0x7a
 80060f8:	f7ff fcbd 	bl	8005a76 <SD_SendCmd>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d116      	bne.n	8006130 <SD_ioctl+0x228>
            {
                for (n = 0; n < 4; n++)
 8006102:	2300      	movs	r3, #0
 8006104:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006108:	e00b      	b.n	8006122 <SD_ioctl+0x21a>
                {
                    *ptr++ = SPI_Receive_Byte();
 800610a:	6a3c      	ldr	r4, [r7, #32]
 800610c:	1c63      	adds	r3, r4, #1
 800610e:	623b      	str	r3, [r7, #32]
 8006110:	f7ff fba2 	bl	8005858 <SPI_Receive_Byte>
 8006114:	4603      	mov	r3, r0
 8006116:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 8006118:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800611c:	3301      	adds	r3, #1
 800611e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006122:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006126:	2b03      	cmp	r3, #3
 8006128:	d9ef      	bls.n	800610a <SD_ioctl+0x202>
                }
                res = RES_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        default:
            res = RES_PARERR;
 8006130:	2304      	movs	r3, #4
 8006132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006136:	e006      	b.n	8006146 <SD_ioctl+0x23e>
            break;
 8006138:	bf00      	nop
 800613a:	e004      	b.n	8006146 <SD_ioctl+0x23e>
            break;
 800613c:	bf00      	nop
 800613e:	e002      	b.n	8006146 <SD_ioctl+0x23e>
            break;
 8006140:	bf00      	nop
 8006142:	e000      	b.n	8006146 <SD_ioctl+0x23e>
            break;
 8006144:	bf00      	nop
        }

        DESELECT();
 8006146:	f7ff fb45 	bl	80057d4 <DESELECT>
        SPI_Receive_Byte();
 800614a:	f7ff fb85 	bl	8005858 <SPI_Receive_Byte>
    }

    return res;
 800614e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006152:	4618      	mov	r0, r3
 8006154:	372c      	adds	r7, #44	; 0x2c
 8006156:	46bd      	mov	sp, r7
 8006158:	bd90      	pop	{r4, r7, pc}
 800615a:	bf00      	nop
 800615c:	20000009 	.word	0x20000009

08006160 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
		return SD_initialize(pdrv);
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fcd7 	bl	8005b20 <SD_initialize>
 8006172:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
		return SD_status(pdrv);
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fdaf 	bl	8005cec <SD_status>
 800618e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    	return SD_read(pdrv, buff, sector, count);
 80061a8:	7bf8      	ldrb	r0, [r7, #15]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	f7ff fdb2 	bl	8005d18 <SD_read>
 80061b4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b084      	sub	sp, #16
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
 80061ca:	4603      	mov	r3, r0
 80061cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    	return SD_write(pdrv, buff, sector, count);
 80061ce:	7bf8      	ldrb	r0, [r7, #15]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	f7ff fe0d 	bl	8005df4 <SD_write>
 80061da:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	603a      	str	r2, [r7, #0]
 80061ee:	71fb      	strb	r3, [r7, #7]
 80061f0:	460b      	mov	r3, r1
 80061f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    	return SD_ioctl(pdrv, cmd, buff);
 80061f4:	79b9      	ldrb	r1, [r7, #6]
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff fe84 	bl	8005f08 <SD_ioctl>
 8006200:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	4a08      	ldr	r2, [pc, #32]	; (800623c <disk_status+0x30>)
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	79fa      	ldrb	r2, [r7, #7]
 8006224:	4905      	ldr	r1, [pc, #20]	; (800623c <disk_status+0x30>)
 8006226:	440a      	add	r2, r1
 8006228:	7a12      	ldrb	r2, [r2, #8]
 800622a:	4610      	mov	r0, r2
 800622c:	4798      	blx	r3
 800622e:	4603      	mov	r3, r0
 8006230:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	20002438 	.word	0x20002438

08006240 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	4603      	mov	r3, r0
 8006248:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	4a0d      	ldr	r2, [pc, #52]	; (8006288 <disk_initialize+0x48>)
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d111      	bne.n	800627c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	4a0b      	ldr	r2, [pc, #44]	; (8006288 <disk_initialize+0x48>)
 800625c:	2101      	movs	r1, #1
 800625e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	4a09      	ldr	r2, [pc, #36]	; (8006288 <disk_initialize+0x48>)
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	79fa      	ldrb	r2, [r7, #7]
 800626e:	4906      	ldr	r1, [pc, #24]	; (8006288 <disk_initialize+0x48>)
 8006270:	440a      	add	r2, r1
 8006272:	7a12      	ldrb	r2, [r2, #8]
 8006274:	4610      	mov	r0, r2
 8006276:	4798      	blx	r3
 8006278:	4603      	mov	r3, r0
 800627a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20002438 	.word	0x20002438

0800628c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800628c:	b590      	push	{r4, r7, lr}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	4a0a      	ldr	r2, [pc, #40]	; (80062c8 <disk_read+0x3c>)
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	689c      	ldr	r4, [r3, #8]
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	4a07      	ldr	r2, [pc, #28]	; (80062c8 <disk_read+0x3c>)
 80062ac:	4413      	add	r3, r2
 80062ae:	7a18      	ldrb	r0, [r3, #8]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	47a0      	blx	r4
 80062b8:	4603      	mov	r3, r0
 80062ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20002438 	.word	0x20002438

080062cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	4a0a      	ldr	r2, [pc, #40]	; (8006308 <disk_write+0x3c>)
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	68dc      	ldr	r4, [r3, #12]
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	4a07      	ldr	r2, [pc, #28]	; (8006308 <disk_write+0x3c>)
 80062ec:	4413      	add	r3, r2
 80062ee:	7a18      	ldrb	r0, [r3, #8]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	47a0      	blx	r4
 80062f8:	4603      	mov	r3, r0
 80062fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	bd90      	pop	{r4, r7, pc}
 8006306:	bf00      	nop
 8006308:	20002438 	.word	0x20002438

0800630c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	603a      	str	r2, [r7, #0]
 8006316:	71fb      	strb	r3, [r7, #7]
 8006318:	460b      	mov	r3, r1
 800631a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	4a09      	ldr	r2, [pc, #36]	; (8006344 <disk_ioctl+0x38>)
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	79fa      	ldrb	r2, [r7, #7]
 800632a:	4906      	ldr	r1, [pc, #24]	; (8006344 <disk_ioctl+0x38>)
 800632c:	440a      	add	r2, r1
 800632e:	7a10      	ldrb	r0, [r2, #8]
 8006330:	79b9      	ldrb	r1, [r7, #6]
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	4798      	blx	r3
 8006336:	4603      	mov	r3, r0
 8006338:	73fb      	strb	r3, [r7, #15]
  return res;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20002438 	.word	0x20002438

08006348 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3301      	adds	r3, #1
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006358:	89fb      	ldrh	r3, [r7, #14]
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	b21a      	sxth	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	b21b      	sxth	r3, r3
 8006364:	4313      	orrs	r3, r2
 8006366:	b21b      	sxth	r3, r3
 8006368:	81fb      	strh	r3, [r7, #14]
	return rv;
 800636a:	89fb      	ldrh	r3, [r7, #14]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3303      	adds	r3, #3
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	3202      	adds	r2, #2
 8006390:	7812      	ldrb	r2, [r2, #0]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	3201      	adds	r2, #1
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
	return rv;
 80063b0:	68fb      	ldr	r3, [r7, #12]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	887a      	ldrh	r2, [r7, #2]
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	887b      	ldrh	r3, [r7, #2]
 80063d8:	0a1b      	lsrs	r3, r3, #8
 80063da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	887a      	ldrh	r2, [r7, #2]
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	0a1b      	lsrs	r3, r3, #8
 800640e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	607a      	str	r2, [r7, #4]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	0a1b      	lsrs	r3, r3, #8
 8006432:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00d      	beq.n	8006482 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	1c53      	adds	r3, r2, #1
 800646a:	613b      	str	r3, [r7, #16]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	1c59      	adds	r1, r3, #1
 8006470:	6179      	str	r1, [r7, #20]
 8006472:	7812      	ldrb	r2, [r2, #0]
 8006474:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3b01      	subs	r3, #1
 800647a:	607b      	str	r3, [r7, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f1      	bne.n	8006466 <mem_cpy+0x1a>
	}
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800648e:	b480      	push	{r7}
 8006490:	b087      	sub	sp, #28
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	617a      	str	r2, [r7, #20]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f3      	bne.n	800649e <mem_set+0x10>
}
 80064b6:	bf00      	nop
 80064b8:	bf00      	nop
 80064ba:	371c      	adds	r7, #28
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80064c4:	b480      	push	{r7}
 80064c6:	b089      	sub	sp, #36	; 0x24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	61fa      	str	r2, [r7, #28]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	4619      	mov	r1, r3
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	61ba      	str	r2, [r7, #24]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	1acb      	subs	r3, r1, r3
 80064f0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	607b      	str	r3, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <mem_cmp+0x40>
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0eb      	beq.n	80064dc <mem_cmp+0x18>

	return r;
 8006504:	697b      	ldr	r3, [r7, #20]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3724      	adds	r7, #36	; 0x24
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800651c:	e002      	b.n	8006524 <chk_chr+0x12>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3301      	adds	r3, #1
 8006522:	607b      	str	r3, [r7, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <chk_chr+0x26>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	4293      	cmp	r3, r2
 8006536:	d1f2      	bne.n	800651e <chk_chr+0xc>
	return *str;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	781b      	ldrb	r3, [r3, #0]
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006552:	2300      	movs	r3, #0
 8006554:	60bb      	str	r3, [r7, #8]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	e029      	b.n	80065b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800655c:	4a27      	ldr	r2, [pc, #156]	; (80065fc <chk_lock+0xb4>)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	4413      	add	r3, r2
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01d      	beq.n	80065a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800656a:	4a24      	ldr	r2, [pc, #144]	; (80065fc <chk_lock+0xb4>)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	4413      	add	r3, r2
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d116      	bne.n	80065aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800657c:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <chk_lock+0xb4>)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	4413      	add	r3, r2
 8006584:	3304      	adds	r3, #4
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800658c:	429a      	cmp	r2, r3
 800658e:	d10c      	bne.n	80065aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006590:	4a1a      	ldr	r2, [pc, #104]	; (80065fc <chk_lock+0xb4>)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	4413      	add	r3, r2
 8006598:	3308      	adds	r3, #8
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d102      	bne.n	80065aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80065a4:	e007      	b.n	80065b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80065a6:	2301      	movs	r3, #1
 80065a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3301      	adds	r3, #1
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d9d2      	bls.n	800655c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d109      	bne.n	80065d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d102      	bne.n	80065c8 <chk_lock+0x80>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d101      	bne.n	80065cc <chk_lock+0x84>
 80065c8:	2300      	movs	r3, #0
 80065ca:	e010      	b.n	80065ee <chk_lock+0xa6>
 80065cc:	2312      	movs	r3, #18
 80065ce:	e00e      	b.n	80065ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d108      	bne.n	80065e8 <chk_lock+0xa0>
 80065d6:	4a09      	ldr	r2, [pc, #36]	; (80065fc <chk_lock+0xb4>)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	4413      	add	r3, r2
 80065de:	330c      	adds	r3, #12
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e6:	d101      	bne.n	80065ec <chk_lock+0xa4>
 80065e8:	2310      	movs	r3, #16
 80065ea:	e000      	b.n	80065ee <chk_lock+0xa6>
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	20002218 	.word	0x20002218

08006600 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006606:	2300      	movs	r3, #0
 8006608:	607b      	str	r3, [r7, #4]
 800660a:	e002      	b.n	8006612 <enq_lock+0x12>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3301      	adds	r3, #1
 8006610:	607b      	str	r3, [r7, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d806      	bhi.n	8006626 <enq_lock+0x26>
 8006618:	4a09      	ldr	r2, [pc, #36]	; (8006640 <enq_lock+0x40>)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	4413      	add	r3, r2
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f2      	bne.n	800660c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b02      	cmp	r3, #2
 800662a:	bf14      	ite	ne
 800662c:	2301      	movne	r3, #1
 800662e:	2300      	moveq	r3, #0
 8006630:	b2db      	uxtb	r3, r3
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	20002218 	.word	0x20002218

08006644 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e01f      	b.n	8006694 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006654:	4a41      	ldr	r2, [pc, #260]	; (800675c <inc_lock+0x118>)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	4413      	add	r3, r2
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d113      	bne.n	800668e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006666:	4a3d      	ldr	r2, [pc, #244]	; (800675c <inc_lock+0x118>)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	4413      	add	r3, r2
 800666e:	3304      	adds	r3, #4
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006676:	429a      	cmp	r2, r3
 8006678:	d109      	bne.n	800668e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800667a:	4a38      	ldr	r2, [pc, #224]	; (800675c <inc_lock+0x118>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	4413      	add	r3, r2
 8006682:	3308      	adds	r3, #8
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800668a:	429a      	cmp	r2, r3
 800668c:	d006      	beq.n	800669c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3301      	adds	r3, #1
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d9dc      	bls.n	8006654 <inc_lock+0x10>
 800669a:	e000      	b.n	800669e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800669c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d132      	bne.n	800670a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	e002      	b.n	80066b0 <inc_lock+0x6c>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3301      	adds	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d806      	bhi.n	80066c4 <inc_lock+0x80>
 80066b6:	4a29      	ldr	r2, [pc, #164]	; (800675c <inc_lock+0x118>)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	4413      	add	r3, r2
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1f2      	bne.n	80066aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d101      	bne.n	80066ce <inc_lock+0x8a>
 80066ca:	2300      	movs	r3, #0
 80066cc:	e040      	b.n	8006750 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	4922      	ldr	r1, [pc, #136]	; (800675c <inc_lock+0x118>)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	440b      	add	r3, r1
 80066da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	491e      	ldr	r1, [pc, #120]	; (800675c <inc_lock+0x118>)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	440b      	add	r3, r1
 80066e8:	3304      	adds	r3, #4
 80066ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695a      	ldr	r2, [r3, #20]
 80066f0:	491a      	ldr	r1, [pc, #104]	; (800675c <inc_lock+0x118>)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	440b      	add	r3, r1
 80066f8:	3308      	adds	r3, #8
 80066fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80066fc:	4a17      	ldr	r2, [pc, #92]	; (800675c <inc_lock+0x118>)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	4413      	add	r3, r2
 8006704:	330c      	adds	r3, #12
 8006706:	2200      	movs	r2, #0
 8006708:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <inc_lock+0xe0>
 8006710:	4a12      	ldr	r2, [pc, #72]	; (800675c <inc_lock+0x118>)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	4413      	add	r3, r2
 8006718:	330c      	adds	r3, #12
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <inc_lock+0xe0>
 8006720:	2300      	movs	r3, #0
 8006722:	e015      	b.n	8006750 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d108      	bne.n	800673c <inc_lock+0xf8>
 800672a:	4a0c      	ldr	r2, [pc, #48]	; (800675c <inc_lock+0x118>)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	4413      	add	r3, r2
 8006732:	330c      	adds	r3, #12
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	e001      	b.n	8006740 <inc_lock+0xfc>
 800673c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006740:	4906      	ldr	r1, [pc, #24]	; (800675c <inc_lock+0x118>)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	440b      	add	r3, r1
 8006748:	330c      	adds	r3, #12
 800674a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	20002218 	.word	0x20002218

08006760 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3b01      	subs	r3, #1
 800676c:	607b      	str	r3, [r7, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d825      	bhi.n	80067c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006774:	4a17      	ldr	r2, [pc, #92]	; (80067d4 <dec_lock+0x74>)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	4413      	add	r3, r2
 800677c:	330c      	adds	r3, #12
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006782:	89fb      	ldrh	r3, [r7, #14]
 8006784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006788:	d101      	bne.n	800678e <dec_lock+0x2e>
 800678a:	2300      	movs	r3, #0
 800678c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800678e:	89fb      	ldrh	r3, [r7, #14]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <dec_lock+0x3a>
 8006794:	89fb      	ldrh	r3, [r7, #14]
 8006796:	3b01      	subs	r3, #1
 8006798:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800679a:	4a0e      	ldr	r2, [pc, #56]	; (80067d4 <dec_lock+0x74>)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	4413      	add	r3, r2
 80067a2:	330c      	adds	r3, #12
 80067a4:	89fa      	ldrh	r2, [r7, #14]
 80067a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80067a8:	89fb      	ldrh	r3, [r7, #14]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d105      	bne.n	80067ba <dec_lock+0x5a>
 80067ae:	4a09      	ldr	r2, [pc, #36]	; (80067d4 <dec_lock+0x74>)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	4413      	add	r3, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	737b      	strb	r3, [r7, #13]
 80067be:	e001      	b.n	80067c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80067c0:	2302      	movs	r3, #2
 80067c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80067c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20002218 	.word	0x20002218

080067d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	e010      	b.n	8006808 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80067e6:	4a0d      	ldr	r2, [pc, #52]	; (800681c <clear_lock+0x44>)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	4413      	add	r3, r2
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d105      	bne.n	8006802 <clear_lock+0x2a>
 80067f6:	4a09      	ldr	r2, [pc, #36]	; (800681c <clear_lock+0x44>)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	4413      	add	r3, r2
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3301      	adds	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d9eb      	bls.n	80067e6 <clear_lock+0xe>
	}
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	20002218 	.word	0x20002218

08006820 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	78db      	ldrb	r3, [r3, #3]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d034      	beq.n	800689e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006838:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	7858      	ldrb	r0, [r3, #1]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006844:	2301      	movs	r3, #1
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	f7ff fd40 	bl	80062cc <disk_write>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006852:	2301      	movs	r3, #1
 8006854:	73fb      	strb	r3, [r7, #15]
 8006856:	e022      	b.n	800689e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	1ad2      	subs	r2, r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	429a      	cmp	r2, r3
 800686c:	d217      	bcs.n	800689e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	789b      	ldrb	r3, [r3, #2]
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	e010      	b.n	8006898 <sync_window+0x78>
					wsect += fs->fsize;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4413      	add	r3, r2
 800687e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7858      	ldrb	r0, [r3, #1]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800688a:	2301      	movs	r3, #1
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	f7ff fd1d 	bl	80062cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	3b01      	subs	r3, #1
 8006896:	613b      	str	r3, [r7, #16]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d8eb      	bhi.n	8006876 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800689e:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d01b      	beq.n	80068f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff ffad 	bl	8006820 <sync_window>
 80068c6:	4603      	mov	r3, r0
 80068c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d113      	bne.n	80068f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	7858      	ldrb	r0, [r3, #1]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068da:	2301      	movs	r3, #1
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	f7ff fcd5 	bl	800628c <disk_read>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80068e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff ff87 	bl	8006820 <sync_window>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d159      	bne.n	80069d0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b03      	cmp	r3, #3
 8006922:	d149      	bne.n	80069b8 <sync_fs+0xb4>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	791b      	ldrb	r3, [r3, #4]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d145      	bne.n	80069b8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	899b      	ldrh	r3, [r3, #12]
 8006936:	461a      	mov	r2, r3
 8006938:	2100      	movs	r1, #0
 800693a:	f7ff fda8 	bl	800648e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3338      	adds	r3, #56	; 0x38
 8006942:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006946:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff fd37 	bl	80063be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3338      	adds	r3, #56	; 0x38
 8006954:	4921      	ldr	r1, [pc, #132]	; (80069dc <sync_fs+0xd8>)
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fd4c 	bl	80063f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3338      	adds	r3, #56	; 0x38
 8006960:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006964:	491e      	ldr	r1, [pc, #120]	; (80069e0 <sync_fs+0xdc>)
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff fd44 	bl	80063f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3338      	adds	r3, #56	; 0x38
 8006970:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	4619      	mov	r1, r3
 800697a:	4610      	mov	r0, r2
 800697c:	f7ff fd3a 	bl	80063f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3338      	adds	r3, #56	; 0x38
 8006984:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f7ff fd30 	bl	80063f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	7858      	ldrb	r0, [r3, #1]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ac:	2301      	movs	r3, #1
 80069ae:	f7ff fc8d 	bl	80062cc <disk_write>
			fs->fsi_flag = 0;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	2200      	movs	r2, #0
 80069be:	2100      	movs	r1, #0
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7ff fca3 	bl	800630c <disk_ioctl>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <sync_fs+0xcc>
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	41615252 	.word	0x41615252
 80069e0:	61417272 	.word	0x61417272

080069e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	3b02      	subs	r3, #2
 80069f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	3b02      	subs	r3, #2
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d301      	bcc.n	8006a04 <clust2sect+0x20>
 8006a00:	2300      	movs	r3, #0
 8006a02:	e008      	b.n	8006a16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	895b      	ldrh	r3, [r3, #10]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	fb03 f202 	mul.w	r2, r3, r2
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	4413      	add	r3, r2
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b086      	sub	sp, #24
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d904      	bls.n	8006a42 <get_fat+0x20>
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006a42:	2301      	movs	r3, #1
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e0bb      	b.n	8006bc0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	f000 8083 	beq.w	8006b5e <get_fat+0x13c>
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	f300 80a7 	bgt.w	8006bac <get_fat+0x18a>
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d002      	beq.n	8006a68 <get_fat+0x46>
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d056      	beq.n	8006b14 <get_fat+0xf2>
 8006a66:	e0a1      	b.n	8006bac <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	899b      	ldrh	r3, [r3, #12]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a86:	4413      	add	r3, r2
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6938      	ldr	r0, [r7, #16]
 8006a8c:	f7ff ff0c 	bl	80068a8 <move_window>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f040 808d 	bne.w	8006bb2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	60fa      	str	r2, [r7, #12]
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	8992      	ldrh	r2, [r2, #12]
 8006aa2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aa6:	fb02 f201 	mul.w	r2, r2, r1
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ab4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	899b      	ldrh	r3, [r3, #12]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ac6:	4413      	add	r3, r2
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6938      	ldr	r0, [r7, #16]
 8006acc:	f7ff feec 	bl	80068a8 <move_window>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d16f      	bne.n	8006bb6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	899b      	ldrh	r3, [r3, #12]
 8006ada:	461a      	mov	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ae2:	fb02 f201 	mul.w	r2, r2, r1
 8006ae6:	1a9b      	subs	r3, r3, r2
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4413      	add	r3, r2
 8006aec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	461a      	mov	r2, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <get_fat+0xe8>
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	091b      	lsrs	r3, r3, #4
 8006b08:	e002      	b.n	8006b10 <get_fat+0xee>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b10:	617b      	str	r3, [r7, #20]
			break;
 8006b12:	e055      	b.n	8006bc0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	899b      	ldrh	r3, [r3, #12]
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	4619      	mov	r1, r3
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b28:	4413      	add	r3, r2
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6938      	ldr	r0, [r7, #16]
 8006b2e:	f7ff febb 	bl	80068a8 <move_window>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d140      	bne.n	8006bba <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	8992      	ldrh	r2, [r2, #12]
 8006b46:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b4a:	fb02 f200 	mul.w	r2, r2, r0
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	440b      	add	r3, r1
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fbf8 	bl	8006348 <ld_word>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	617b      	str	r3, [r7, #20]
			break;
 8006b5c:	e030      	b.n	8006bc0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	899b      	ldrh	r3, [r3, #12]
 8006b66:	089b      	lsrs	r3, r3, #2
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b72:	4413      	add	r3, r2
 8006b74:	4619      	mov	r1, r3
 8006b76:	6938      	ldr	r0, [r7, #16]
 8006b78:	f7ff fe96 	bl	80068a8 <move_window>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d11d      	bne.n	8006bbe <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	8992      	ldrh	r2, [r2, #12]
 8006b90:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b94:	fb02 f200 	mul.w	r2, r2, r0
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	440b      	add	r3, r1
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff fbeb 	bl	8006378 <ld_dword>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ba8:	617b      	str	r3, [r7, #20]
			break;
 8006baa:	e009      	b.n	8006bc0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006bac:	2301      	movs	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e006      	b.n	8006bc0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bb2:	bf00      	nop
 8006bb4:	e004      	b.n	8006bc0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bb6:	bf00      	nop
 8006bb8:	e002      	b.n	8006bc0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bba:	bf00      	nop
 8006bbc:	e000      	b.n	8006bc0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bbe:	bf00      	nop
		}
	}

	return val;
 8006bc0:	697b      	ldr	r3, [r7, #20]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006bca:	b590      	push	{r4, r7, lr}
 8006bcc:	b089      	sub	sp, #36	; 0x24
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	f240 8102 	bls.w	8006de6 <put_fat+0x21c>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	f080 80fc 	bcs.w	8006de6 <put_fat+0x21c>
		switch (fs->fs_type) {
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	f000 80b6 	beq.w	8006d64 <put_fat+0x19a>
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	f300 80fd 	bgt.w	8006df8 <put_fat+0x22e>
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d003      	beq.n	8006c0a <put_fat+0x40>
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	f000 8083 	beq.w	8006d0e <put_fat+0x144>
 8006c08:	e0f6      	b.n	8006df8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	4413      	add	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	899b      	ldrh	r3, [r3, #12]
 8006c20:	4619      	mov	r1, r3
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c28:	4413      	add	r3, r2
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f7ff fe3b 	bl	80068a8 <move_window>
 8006c32:	4603      	mov	r3, r0
 8006c34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c36:	7ffb      	ldrb	r3, [r7, #31]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f040 80d6 	bne.w	8006dea <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	61ba      	str	r2, [r7, #24]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	8992      	ldrh	r2, [r2, #12]
 8006c4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c52:	fb02 f200 	mul.w	r2, r2, r0
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	440b      	add	r3, r1
 8006c5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00d      	beq.n	8006c82 <put_fat+0xb8>
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	b25b      	sxtb	r3, r3
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	b25a      	sxtb	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	b25b      	sxtb	r3, r3
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	e001      	b.n	8006c86 <put_fat+0xbc>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	899b      	ldrh	r3, [r3, #12]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ca0:	4413      	add	r3, r2
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff fdff 	bl	80068a8 <move_window>
 8006caa:	4603      	mov	r3, r0
 8006cac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cae:	7ffb      	ldrb	r3, [r7, #31]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 809c 	bne.w	8006dee <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	899b      	ldrh	r3, [r3, #12]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cc8:	fb02 f200 	mul.w	r2, r2, r0
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	440b      	add	r3, r1
 8006cd0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <put_fat+0x11a>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	091b      	lsrs	r3, r3, #4
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	e00e      	b.n	8006d02 <put_fat+0x138>
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	b25b      	sxtb	r3, r3
 8006cea:	f023 030f 	bic.w	r3, r3, #15
 8006cee:	b25a      	sxtb	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	b25b      	sxtb	r3, r3
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	b25b      	sxtb	r3, r3
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	b25b      	sxtb	r3, r3
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	70da      	strb	r2, [r3, #3]
			break;
 8006d0c:	e074      	b.n	8006df8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	899b      	ldrh	r3, [r3, #12]
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d22:	4413      	add	r3, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f7ff fdbe 	bl	80068a8 <move_window>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d30:	7ffb      	ldrb	r3, [r7, #31]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d15d      	bne.n	8006df2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	8992      	ldrh	r2, [r2, #12]
 8006d44:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d48:	fb02 f200 	mul.w	r2, r2, r0
 8006d4c:	1a9b      	subs	r3, r3, r2
 8006d4e:	440b      	add	r3, r1
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	b292      	uxth	r2, r2
 8006d54:	4611      	mov	r1, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fb31 	bl	80063be <st_word>
			fs->wflag = 1;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	70da      	strb	r2, [r3, #3]
			break;
 8006d62:	e049      	b.n	8006df8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	899b      	ldrh	r3, [r3, #12]
 8006d6c:	089b      	lsrs	r3, r3, #2
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	4619      	mov	r1, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d78:	4413      	add	r3, r2
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff fd93 	bl	80068a8 <move_window>
 8006d82:	4603      	mov	r3, r0
 8006d84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d86:	7ffb      	ldrb	r3, [r7, #31]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d134      	bne.n	8006df6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	8992      	ldrh	r2, [r2, #12]
 8006da0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006da4:	fb02 f200 	mul.w	r2, r2, r0
 8006da8:	1a9b      	subs	r3, r3, r2
 8006daa:	440b      	add	r3, r1
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff fae3 	bl	8006378 <ld_dword>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006db8:	4323      	orrs	r3, r4
 8006dba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	8992      	ldrh	r2, [r2, #12]
 8006dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dce:	fb02 f200 	mul.w	r2, r2, r0
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff fb0b 	bl	80063f4 <st_dword>
			fs->wflag = 1;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	70da      	strb	r2, [r3, #3]
			break;
 8006de4:	e008      	b.n	8006df8 <put_fat+0x22e>
		}
	}
 8006de6:	bf00      	nop
 8006de8:	e006      	b.n	8006df8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006dea:	bf00      	nop
 8006dec:	e004      	b.n	8006df8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006dee:	bf00      	nop
 8006df0:	e002      	b.n	8006df8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006df2:	bf00      	nop
 8006df4:	e000      	b.n	8006df8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006df6:	bf00      	nop
	return res;
 8006df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3724      	adds	r7, #36	; 0x24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd90      	pop	{r4, r7, pc}

08006e02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b088      	sub	sp, #32
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d904      	bls.n	8006e28 <remove_chain+0x26>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d301      	bcc.n	8006e2c <remove_chain+0x2a>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e04b      	b.n	8006ec4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00c      	beq.n	8006e4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	69b8      	ldr	r0, [r7, #24]
 8006e3a:	f7ff fec6 	bl	8006bca <put_fat>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006e42:	7ffb      	ldrb	r3, [r7, #31]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <remove_chain+0x4a>
 8006e48:	7ffb      	ldrb	r3, [r7, #31]
 8006e4a:	e03b      	b.n	8006ec4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff fde7 	bl	8006a22 <get_fat>
 8006e54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d031      	beq.n	8006ec0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <remove_chain+0x64>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e02e      	b.n	8006ec4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e6c:	d101      	bne.n	8006e72 <remove_chain+0x70>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e028      	b.n	8006ec4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006e72:	2200      	movs	r2, #0
 8006e74:	68b9      	ldr	r1, [r7, #8]
 8006e76:	69b8      	ldr	r0, [r7, #24]
 8006e78:	f7ff fea7 	bl	8006bca <put_fat>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006e80:	7ffb      	ldrb	r3, [r7, #31]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <remove_chain+0x88>
 8006e86:	7ffb      	ldrb	r3, [r7, #31]
 8006e88:	e01c      	b.n	8006ec4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	699a      	ldr	r2, [r3, #24]
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	3b02      	subs	r3, #2
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d20b      	bcs.n	8006eb0 <remove_chain+0xae>
			fs->free_clst++;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	791b      	ldrb	r3, [r3, #4]
 8006ea6:	f043 0301 	orr.w	r3, r3, #1
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d3c6      	bcc.n	8006e4c <remove_chain+0x4a>
 8006ebe:	e000      	b.n	8006ec2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006ec0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3720      	adds	r7, #32
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10d      	bne.n	8006efe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d004      	beq.n	8006ef8 <create_chain+0x2c>
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d31b      	bcc.n	8006f30 <create_chain+0x64>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	61bb      	str	r3, [r7, #24]
 8006efc:	e018      	b.n	8006f30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff fd8e 	bl	8006a22 <get_fat>
 8006f06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d801      	bhi.n	8006f12 <create_chain+0x46>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e070      	b.n	8006ff4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f18:	d101      	bne.n	8006f1e <create_chain+0x52>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	e06a      	b.n	8006ff4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d201      	bcs.n	8006f2c <create_chain+0x60>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	e063      	b.n	8006ff4 <create_chain+0x128>
		scl = clst;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	3301      	adds	r3, #1
 8006f38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d307      	bcc.n	8006f54 <create_chain+0x88>
				ncl = 2;
 8006f44:	2302      	movs	r3, #2
 8006f46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d901      	bls.n	8006f54 <create_chain+0x88>
 8006f50:	2300      	movs	r3, #0
 8006f52:	e04f      	b.n	8006ff4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006f54:	69f9      	ldr	r1, [r7, #28]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff fd63 	bl	8006a22 <get_fat>
 8006f5c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00e      	beq.n	8006f82 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d003      	beq.n	8006f72 <create_chain+0xa6>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f70:	d101      	bne.n	8006f76 <create_chain+0xaa>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	e03e      	b.n	8006ff4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d1da      	bne.n	8006f34 <create_chain+0x68>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e038      	b.n	8006ff4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006f82:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f88:	69f9      	ldr	r1, [r7, #28]
 8006f8a:	6938      	ldr	r0, [r7, #16]
 8006f8c:	f7ff fe1d 	bl	8006bca <put_fat>
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <create_chain+0xe2>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d006      	beq.n	8006fae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006fa0:	69fa      	ldr	r2, [r7, #28]
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6938      	ldr	r0, [r7, #16]
 8006fa6:	f7ff fe10 	bl	8006bca <put_fat>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d116      	bne.n	8006fe2 <create_chain+0x116>
		fs->last_clst = ncl;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	69fa      	ldr	r2, [r7, #28]
 8006fb8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	3b02      	subs	r3, #2
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d804      	bhi.n	8006fd2 <create_chain+0x106>
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	1e5a      	subs	r2, r3, #1
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	711a      	strb	r2, [r3, #4]
 8006fe0:	e007      	b.n	8006ff2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d102      	bne.n	8006fee <create_chain+0x122>
 8006fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fec:	e000      	b.n	8006ff0 <create_chain+0x124>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006ff2:	69fb      	ldr	r3, [r7, #28]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3720      	adds	r7, #32
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	3304      	adds	r3, #4
 8007012:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	899b      	ldrh	r3, [r3, #12]
 8007018:	461a      	mov	r2, r3
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	8952      	ldrh	r2, [r2, #10]
 8007024:	fbb3 f3f2 	udiv	r3, r3, r2
 8007028:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1d1a      	adds	r2, r3, #4
 800702e:	613a      	str	r2, [r7, #16]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <clmt_clust+0x42>
 800703a:	2300      	movs	r3, #0
 800703c:	e010      	b.n	8007060 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	429a      	cmp	r2, r3
 8007044:	d307      	bcc.n	8007056 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	3304      	adds	r3, #4
 8007052:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007054:	e7e9      	b.n	800702a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007056:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	4413      	add	r3, r2
}
 8007060:	4618      	mov	r0, r3
 8007062:	371c      	adds	r7, #28
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007082:	d204      	bcs.n	800708e <dir_sdi+0x22>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <dir_sdi+0x26>
		return FR_INT_ERR;
 800708e:	2302      	movs	r3, #2
 8007090:	e071      	b.n	8007176 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d106      	bne.n	80070b2 <dir_sdi+0x46>
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d902      	bls.n	80070b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10c      	bne.n	80070d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	8912      	ldrh	r2, [r2, #8]
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d301      	bcc.n	80070c8 <dir_sdi+0x5c>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e056      	b.n	8007176 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	61da      	str	r2, [r3, #28]
 80070d0:	e02d      	b.n	800712e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	895b      	ldrh	r3, [r3, #10]
 80070d6:	461a      	mov	r2, r3
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	899b      	ldrh	r3, [r3, #12]
 80070dc:	fb03 f302 	mul.w	r3, r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80070e2:	e019      	b.n	8007118 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6979      	ldr	r1, [r7, #20]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff fc9a 	bl	8006a22 <get_fat>
 80070ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f6:	d101      	bne.n	80070fc <dir_sdi+0x90>
 80070f8:	2301      	movs	r3, #1
 80070fa:	e03c      	b.n	8007176 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d904      	bls.n	800710c <dir_sdi+0xa0>
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	429a      	cmp	r2, r3
 800710a:	d301      	bcc.n	8007110 <dir_sdi+0xa4>
 800710c:	2302      	movs	r3, #2
 800710e:	e032      	b.n	8007176 <dir_sdi+0x10a>
			ofs -= csz;
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	429a      	cmp	r2, r3
 800711e:	d2e1      	bcs.n	80070e4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007120:	6979      	ldr	r1, [r7, #20]
 8007122:	6938      	ldr	r0, [r7, #16]
 8007124:	f7ff fc5e 	bl	80069e4 <clust2sect>
 8007128:	4602      	mov	r2, r0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <dir_sdi+0xd4>
 800713c:	2302      	movs	r3, #2
 800713e:	e01a      	b.n	8007176 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	69da      	ldr	r2, [r3, #28]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	899b      	ldrh	r3, [r3, #12]
 8007148:	4619      	mov	r1, r3
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007150:	441a      	add	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	899b      	ldrh	r3, [r3, #12]
 8007160:	461a      	mov	r2, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	fbb3 f0f2 	udiv	r0, r3, r2
 8007168:	fb02 f200 	mul.w	r2, r2, r0
 800716c:	1a9b      	subs	r3, r3, r2
 800716e:	18ca      	adds	r2, r1, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b086      	sub	sp, #24
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	3320      	adds	r3, #32
 8007194:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <dir_next+0x28>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071a4:	d301      	bcc.n	80071aa <dir_next+0x2c>
 80071a6:	2304      	movs	r3, #4
 80071a8:	e0bb      	b.n	8007322 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	899b      	ldrh	r3, [r3, #12]
 80071ae:	461a      	mov	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80071b6:	fb02 f201 	mul.w	r2, r2, r1
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 809d 	bne.w	80072fc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10b      	bne.n	80071ec <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	8912      	ldrh	r2, [r2, #8]
 80071dc:	4293      	cmp	r3, r2
 80071de:	f0c0 808d 	bcc.w	80072fc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	61da      	str	r2, [r3, #28]
 80071e8:	2304      	movs	r3, #4
 80071ea:	e09a      	b.n	8007322 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	899b      	ldrh	r3, [r3, #12]
 80071f0:	461a      	mov	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	8952      	ldrh	r2, [r2, #10]
 80071fc:	3a01      	subs	r2, #1
 80071fe:	4013      	ands	r3, r2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d17b      	bne.n	80072fc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	4619      	mov	r1, r3
 800720c:	4610      	mov	r0, r2
 800720e:	f7ff fc08 	bl	8006a22 <get_fat>
 8007212:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d801      	bhi.n	800721e <dir_next+0xa0>
 800721a:	2302      	movs	r3, #2
 800721c:	e081      	b.n	8007322 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007224:	d101      	bne.n	800722a <dir_next+0xac>
 8007226:	2301      	movs	r3, #1
 8007228:	e07b      	b.n	8007322 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	429a      	cmp	r2, r3
 8007232:	d359      	bcc.n	80072e8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d104      	bne.n	8007244 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	61da      	str	r2, [r3, #28]
 8007240:	2304      	movs	r3, #4
 8007242:	e06e      	b.n	8007322 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f7ff fe3d 	bl	8006ecc <create_chain>
 8007252:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <dir_next+0xe0>
 800725a:	2307      	movs	r3, #7
 800725c:	e061      	b.n	8007322 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <dir_next+0xea>
 8007264:	2302      	movs	r3, #2
 8007266:	e05c      	b.n	8007322 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800726e:	d101      	bne.n	8007274 <dir_next+0xf6>
 8007270:	2301      	movs	r3, #1
 8007272:	e056      	b.n	8007322 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f7ff fad3 	bl	8006820 <sync_window>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <dir_next+0x106>
 8007280:	2301      	movs	r3, #1
 8007282:	e04e      	b.n	8007322 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	899b      	ldrh	r3, [r3, #12]
 800728e:	461a      	mov	r2, r3
 8007290:	2100      	movs	r1, #0
 8007292:	f7ff f8fc 	bl	800648e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007296:	2300      	movs	r3, #0
 8007298:	613b      	str	r3, [r7, #16]
 800729a:	6979      	ldr	r1, [r7, #20]
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f7ff fba1 	bl	80069e4 <clust2sect>
 80072a2:	4602      	mov	r2, r0
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	635a      	str	r2, [r3, #52]	; 0x34
 80072a8:	e012      	b.n	80072d0 <dir_next+0x152>
						fs->wflag = 1;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f7ff fab5 	bl	8006820 <sync_window>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <dir_next+0x142>
 80072bc:	2301      	movs	r3, #1
 80072be:	e030      	b.n	8007322 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	3301      	adds	r3, #1
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	635a      	str	r2, [r3, #52]	; 0x34
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	895b      	ldrh	r3, [r3, #10]
 80072d4:	461a      	mov	r2, r3
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	4293      	cmp	r3, r2
 80072da:	d3e6      	bcc.n	80072aa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80072ee:	6979      	ldr	r1, [r7, #20]
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f7ff fb77 	bl	80069e4 <clust2sect>
 80072f6:	4602      	mov	r2, r0
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	899b      	ldrh	r3, [r3, #12]
 800730c:	461a      	mov	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	fbb3 f0f2 	udiv	r0, r3, r2
 8007314:	fb02 f200 	mul.w	r2, r2, r0
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	18ca      	adds	r2, r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b086      	sub	sp, #24
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800733a:	2100      	movs	r1, #0
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff fe95 	bl	800706c <dir_sdi>
 8007342:	4603      	mov	r3, r0
 8007344:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d12b      	bne.n	80073a4 <dir_alloc+0x7a>
		n = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	4619      	mov	r1, r3
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f7ff faa6 	bl	80068a8 <move_window>
 800735c:	4603      	mov	r3, r0
 800735e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d11d      	bne.n	80073a2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2be5      	cmp	r3, #229	; 0xe5
 800736e:	d004      	beq.n	800737a <dir_alloc+0x50>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d107      	bne.n	800738a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	3301      	adds	r3, #1
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d102      	bne.n	800738e <dir_alloc+0x64>
 8007388:	e00c      	b.n	80073a4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800738a:	2300      	movs	r3, #0
 800738c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800738e:	2101      	movs	r1, #1
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7ff fef4 	bl	800717e <dir_next>
 8007396:	4603      	mov	r3, r0
 8007398:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0d7      	beq.n	8007350 <dir_alloc+0x26>
 80073a0:	e000      	b.n	80073a4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80073a2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d101      	bne.n	80073ae <dir_alloc+0x84>
 80073aa:	2307      	movs	r3, #7
 80073ac:	75fb      	strb	r3, [r7, #23]
	return res;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	331a      	adds	r3, #26
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe ffbe 	bl	8006348 <ld_word>
 80073cc:	4603      	mov	r3, r0
 80073ce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d109      	bne.n	80073ec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	3314      	adds	r3, #20
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe ffb3 	bl	8006348 <ld_word>
 80073e2:	4603      	mov	r3, r0
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80073ec:	68fb      	ldr	r3, [r7, #12]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	331a      	adds	r3, #26
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	b292      	uxth	r2, r2
 800740a:	4611      	mov	r1, r2
 800740c:	4618      	mov	r0, r3
 800740e:	f7fe ffd6 	bl	80063be <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b03      	cmp	r3, #3
 8007418:	d109      	bne.n	800742e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f103 0214 	add.w	r2, r3, #20
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	0c1b      	lsrs	r3, r3, #16
 8007424:	b29b      	uxth	r3, r3
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f7fe ffc8 	bl	80063be <st_word>
	}
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007438:	b590      	push	{r4, r7, lr}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	331a      	adds	r3, #26
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe ff7e 	bl	8006348 <ld_word>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <cmp_lfn+0x1e>
 8007452:	2300      	movs	r3, #0
 8007454:	e059      	b.n	800750a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800745e:	1e5a      	subs	r2, r3, #1
 8007460:	4613      	mov	r3, r2
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800746c:	2301      	movs	r3, #1
 800746e:	81fb      	strh	r3, [r7, #14]
 8007470:	2300      	movs	r3, #0
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	e033      	b.n	80074de <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007476:	4a27      	ldr	r2, [pc, #156]	; (8007514 <cmp_lfn+0xdc>)
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	4413      	add	r3, r2
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	4413      	add	r3, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe ff5f 	bl	8006348 <ld_word>
 800748a:	4603      	mov	r3, r0
 800748c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800748e:	89fb      	ldrh	r3, [r7, #14]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d01a      	beq.n	80074ca <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2bfe      	cmp	r3, #254	; 0xfe
 8007498:	d812      	bhi.n	80074c0 <cmp_lfn+0x88>
 800749a:	89bb      	ldrh	r3, [r7, #12]
 800749c:	4618      	mov	r0, r3
 800749e:	f002 f865 	bl	800956c <ff_wtoupper>
 80074a2:	4603      	mov	r3, r0
 80074a4:	461c      	mov	r4, r3
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	617a      	str	r2, [r7, #20]
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f002 f859 	bl	800956c <ff_wtoupper>
 80074ba:	4603      	mov	r3, r0
 80074bc:	429c      	cmp	r4, r3
 80074be:	d001      	beq.n	80074c4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80074c0:	2300      	movs	r3, #0
 80074c2:	e022      	b.n	800750a <cmp_lfn+0xd2>
			}
			wc = uc;
 80074c4:	89bb      	ldrh	r3, [r7, #12]
 80074c6:	81fb      	strh	r3, [r7, #14]
 80074c8:	e006      	b.n	80074d8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80074ca:	89bb      	ldrh	r3, [r7, #12]
 80074cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d001      	beq.n	80074d8 <cmp_lfn+0xa0>
 80074d4:	2300      	movs	r3, #0
 80074d6:	e018      	b.n	800750a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	3301      	adds	r3, #1
 80074dc:	613b      	str	r3, [r7, #16]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b0c      	cmp	r3, #12
 80074e2:	d9c8      	bls.n	8007476 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <cmp_lfn+0xd0>
 80074f0:	89fb      	ldrh	r3, [r7, #14]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d008      	beq.n	8007508 <cmp_lfn+0xd0>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <cmp_lfn+0xd0>
 8007504:	2300      	movs	r3, #0
 8007506:	e000      	b.n	800750a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007508:	2301      	movs	r3, #1
}
 800750a:	4618      	mov	r0, r3
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	bd90      	pop	{r4, r7, pc}
 8007512:	bf00      	nop
 8007514:	0800a710 	.word	0x0800a710

08007518 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	4611      	mov	r1, r2
 8007524:	461a      	mov	r2, r3
 8007526:	460b      	mov	r3, r1
 8007528:	71fb      	strb	r3, [r7, #7]
 800752a:	4613      	mov	r3, r2
 800752c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	330d      	adds	r3, #13
 8007532:	79ba      	ldrb	r2, [r7, #6]
 8007534:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	330b      	adds	r3, #11
 800753a:	220f      	movs	r2, #15
 800753c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	330c      	adds	r3, #12
 8007542:	2200      	movs	r2, #0
 8007544:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	331a      	adds	r3, #26
 800754a:	2100      	movs	r1, #0
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe ff36 	bl	80063be <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	1e5a      	subs	r2, r3, #1
 8007556:	4613      	mov	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	82fb      	strh	r3, [r7, #22]
 8007566:	2300      	movs	r3, #0
 8007568:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800756a:	8afb      	ldrh	r3, [r7, #22]
 800756c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007570:	4293      	cmp	r3, r2
 8007572:	d007      	beq.n	8007584 <put_lfn+0x6c>
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	61fa      	str	r2, [r7, #28]
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007584:	4a17      	ldr	r2, [pc, #92]	; (80075e4 <put_lfn+0xcc>)
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	4413      	add	r3, r2
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	461a      	mov	r2, r3
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	4413      	add	r3, r2
 8007592:	8afa      	ldrh	r2, [r7, #22]
 8007594:	4611      	mov	r1, r2
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe ff11 	bl	80063be <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800759c:	8afb      	ldrh	r3, [r7, #22]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d102      	bne.n	80075a8 <put_lfn+0x90>
 80075a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075a6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	3301      	adds	r3, #1
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	2b0c      	cmp	r3, #12
 80075b2:	d9da      	bls.n	800756a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80075b4:	8afb      	ldrh	r3, [r7, #22]
 80075b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d006      	beq.n	80075cc <put_lfn+0xb4>
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d103      	bne.n	80075d4 <put_lfn+0xbc>
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	79fa      	ldrb	r2, [r7, #7]
 80075d8:	701a      	strb	r2, [r3, #0]
}
 80075da:	bf00      	nop
 80075dc:	3720      	adds	r7, #32
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	0800a710 	.word	0x0800a710

080075e8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08c      	sub	sp, #48	; 0x30
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80075f6:	220b      	movs	r2, #11
 80075f8:	68b9      	ldr	r1, [r7, #8]
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f7fe ff26 	bl	800644c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b05      	cmp	r3, #5
 8007604:	d92b      	bls.n	800765e <gen_numname+0x76>
		sr = seq;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800760a:	e022      	b.n	8007652 <gen_numname+0x6a>
			wc = *lfn++;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	607a      	str	r2, [r7, #4]
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007616:	2300      	movs	r3, #0
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28
 800761a:	e017      	b.n	800764c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	005a      	lsls	r2, r3, #1
 8007620:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	4413      	add	r3, r2
 8007628:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800762a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800762c:	085b      	lsrs	r3, r3, #1
 800762e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d005      	beq.n	8007646 <gen_numname+0x5e>
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007640:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007644:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	3301      	adds	r3, #1
 800764a:	62bb      	str	r3, [r7, #40]	; 0x28
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	2b0f      	cmp	r3, #15
 8007650:	d9e4      	bls.n	800761c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1d8      	bne.n	800760c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800765e:	2307      	movs	r3, #7
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	b2db      	uxtb	r3, r3
 800766c:	3330      	adds	r3, #48	; 0x30
 800766e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007676:	2b39      	cmp	r3, #57	; 0x39
 8007678:	d904      	bls.n	8007684 <gen_numname+0x9c>
 800767a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800767e:	3307      	adds	r3, #7
 8007680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	1e5a      	subs	r2, r3, #1
 8007688:	62ba      	str	r2, [r7, #40]	; 0x28
 800768a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800768e:	4413      	add	r3, r2
 8007690:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007694:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	091b      	lsrs	r3, r3, #4
 800769c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1de      	bne.n	8007662 <gen_numname+0x7a>
	ns[i] = '~';
 80076a4:	f107 0214 	add.w	r2, r7, #20
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	4413      	add	r3, r2
 80076ac:	227e      	movs	r2, #126	; 0x7e
 80076ae:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80076b0:	2300      	movs	r3, #0
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
 80076b4:	e002      	b.n	80076bc <gen_numname+0xd4>
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	3301      	adds	r3, #1
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
 80076bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d205      	bcs.n	80076d0 <gen_numname+0xe8>
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	4413      	add	r3, r2
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d1f2      	bne.n	80076b6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	2b07      	cmp	r3, #7
 80076d4:	d808      	bhi.n	80076e8 <gen_numname+0x100>
 80076d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	62ba      	str	r2, [r7, #40]	; 0x28
 80076dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80076e0:	4413      	add	r3, r2
 80076e2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80076e6:	e000      	b.n	80076ea <gen_numname+0x102>
 80076e8:	2120      	movs	r1, #32
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	627a      	str	r2, [r7, #36]	; 0x24
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4413      	add	r3, r2
 80076f4:	460a      	mov	r2, r1
 80076f6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	2b07      	cmp	r3, #7
 80076fc:	d9e8      	bls.n	80076d0 <gen_numname+0xe8>
}
 80076fe:	bf00      	nop
 8007700:	bf00      	nop
 8007702:	3730      	adds	r7, #48	; 0x30
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007714:	230b      	movs	r3, #11
 8007716:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	b2da      	uxtb	r2, r3
 800771c:	0852      	lsrs	r2, r2, #1
 800771e:	01db      	lsls	r3, r3, #7
 8007720:	4313      	orrs	r3, r2
 8007722:	b2da      	uxtb	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	1c59      	adds	r1, r3, #1
 8007728:	6079      	str	r1, [r7, #4]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	4413      	add	r3, r2
 800772e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	3b01      	subs	r3, #1
 8007734:	60bb      	str	r3, [r7, #8]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1ed      	bne.n	8007718 <sum_sfn+0x10>
	return sum;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b086      	sub	sp, #24
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007758:	2100      	movs	r1, #0
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7ff fc86 	bl	800706c <dir_sdi>
 8007760:	4603      	mov	r3, r0
 8007762:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <dir_find+0x24>
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	e0a9      	b.n	80078c2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800776e:	23ff      	movs	r3, #255	; 0xff
 8007770:	753b      	strb	r3, [r7, #20]
 8007772:	7d3b      	ldrb	r3, [r7, #20]
 8007774:	757b      	strb	r3, [r7, #21]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800777c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	4619      	mov	r1, r3
 8007784:	6938      	ldr	r0, [r7, #16]
 8007786:	f7ff f88f 	bl	80068a8 <move_window>
 800778a:	4603      	mov	r3, r0
 800778c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	2b00      	cmp	r3, #0
 8007792:	f040 8090 	bne.w	80078b6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800779e:	7dbb      	ldrb	r3, [r7, #22]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d102      	bne.n	80077aa <dir_find+0x60>
 80077a4:	2304      	movs	r3, #4
 80077a6:	75fb      	strb	r3, [r7, #23]
 80077a8:	e08a      	b.n	80078c0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	330b      	adds	r3, #11
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077b6:	73fb      	strb	r3, [r7, #15]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	7bfa      	ldrb	r2, [r7, #15]
 80077bc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80077be:	7dbb      	ldrb	r3, [r7, #22]
 80077c0:	2be5      	cmp	r3, #229	; 0xe5
 80077c2:	d007      	beq.n	80077d4 <dir_find+0x8a>
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <dir_find+0x98>
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	2b0f      	cmp	r3, #15
 80077d2:	d006      	beq.n	80077e2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80077d4:	23ff      	movs	r3, #255	; 0xff
 80077d6:	757b      	strb	r3, [r7, #21]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
 80077e0:	e05e      	b.n	80078a0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b0f      	cmp	r3, #15
 80077e6:	d136      	bne.n	8007856 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80077ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d154      	bne.n	80078a0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80077f6:	7dbb      	ldrb	r3, [r7, #22]
 80077f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00d      	beq.n	800781c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	7b5b      	ldrb	r3, [r3, #13]
 8007806:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007808:	7dbb      	ldrb	r3, [r7, #22]
 800780a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800780e:	75bb      	strb	r3, [r7, #22]
 8007810:	7dbb      	ldrb	r3, [r7, #22]
 8007812:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	695a      	ldr	r2, [r3, #20]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800781c:	7dba      	ldrb	r2, [r7, #22]
 800781e:	7d7b      	ldrb	r3, [r7, #21]
 8007820:	429a      	cmp	r2, r3
 8007822:	d115      	bne.n	8007850 <dir_find+0x106>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	330d      	adds	r3, #13
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	7d3a      	ldrb	r2, [r7, #20]
 800782e:	429a      	cmp	r2, r3
 8007830:	d10e      	bne.n	8007850 <dir_find+0x106>
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	691a      	ldr	r2, [r3, #16]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	4619      	mov	r1, r3
 800783c:	4610      	mov	r0, r2
 800783e:	f7ff fdfb 	bl	8007438 <cmp_lfn>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <dir_find+0x106>
 8007848:	7d7b      	ldrb	r3, [r7, #21]
 800784a:	3b01      	subs	r3, #1
 800784c:	b2db      	uxtb	r3, r3
 800784e:	e000      	b.n	8007852 <dir_find+0x108>
 8007850:	23ff      	movs	r3, #255	; 0xff
 8007852:	757b      	strb	r3, [r7, #21]
 8007854:	e024      	b.n	80078a0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007856:	7d7b      	ldrb	r3, [r7, #21]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d109      	bne.n	8007870 <dir_find+0x126>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff ff51 	bl	8007708 <sum_sfn>
 8007866:	4603      	mov	r3, r0
 8007868:	461a      	mov	r2, r3
 800786a:	7d3b      	ldrb	r3, [r7, #20]
 800786c:	4293      	cmp	r3, r2
 800786e:	d024      	beq.n	80078ba <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <dir_find+0x14a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a18      	ldr	r0, [r3, #32]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3324      	adds	r3, #36	; 0x24
 8007886:	220b      	movs	r2, #11
 8007888:	4619      	mov	r1, r3
 800788a:	f7fe fe1b 	bl	80064c4 <mem_cmp>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d014      	beq.n	80078be <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007894:	23ff      	movs	r3, #255	; 0xff
 8007896:	757b      	strb	r3, [r7, #21]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800789e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80078a0:	2100      	movs	r1, #0
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff fc6b 	bl	800717e <dir_next>
 80078a8:	4603      	mov	r3, r0
 80078aa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f43f af65 	beq.w	800777e <dir_find+0x34>
 80078b4:	e004      	b.n	80078c0 <dir_find+0x176>
		if (res != FR_OK) break;
 80078b6:	bf00      	nop
 80078b8:	e002      	b.n	80078c0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80078ba:	bf00      	nop
 80078bc:	e000      	b.n	80078c0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80078be:	bf00      	nop

	return res;
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08c      	sub	sp, #48	; 0x30
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <dir_register+0x20>
 80078e8:	2306      	movs	r3, #6
 80078ea:	e0e0      	b.n	8007aae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80078ec:	2300      	movs	r3, #0
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
 80078f0:	e002      	b.n	80078f8 <dir_register+0x2c>
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	3301      	adds	r3, #1
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	691a      	ldr	r2, [r3, #16]
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	4413      	add	r3, r2
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1f4      	bne.n	80078f2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800790e:	f107 030c 	add.w	r3, r7, #12
 8007912:	220c      	movs	r2, #12
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe fd99 	bl	800644c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800791a:	7dfb      	ldrb	r3, [r7, #23]
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d032      	beq.n	800798a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2240      	movs	r2, #64	; 0x40
 8007928:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800792c:	2301      	movs	r3, #1
 800792e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007930:	e016      	b.n	8007960 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	f107 010c 	add.w	r1, r7, #12
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	f7ff fe51 	bl	80075e8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff feff 	bl	800774a <dir_find>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	3301      	adds	r3, #1
 800795e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	2b63      	cmp	r3, #99	; 0x63
 8007964:	d9e5      	bls.n	8007932 <dir_register+0x66>
 8007966:	e000      	b.n	800796a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007968:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	2b64      	cmp	r3, #100	; 0x64
 800796e:	d101      	bne.n	8007974 <dir_register+0xa8>
 8007970:	2307      	movs	r3, #7
 8007972:	e09c      	b.n	8007aae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007974:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007978:	2b04      	cmp	r3, #4
 800797a:	d002      	beq.n	8007982 <dir_register+0xb6>
 800797c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007980:	e095      	b.n	8007aae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007982:	7dfa      	ldrb	r2, [r7, #23]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <dir_register+0xd8>
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	330c      	adds	r3, #12
 8007998:	4a47      	ldr	r2, [pc, #284]	; (8007ab8 <dir_register+0x1ec>)
 800799a:	fba2 2303 	umull	r2, r3, r2, r3
 800799e:	089b      	lsrs	r3, r3, #2
 80079a0:	3301      	adds	r3, #1
 80079a2:	e000      	b.n	80079a6 <dir_register+0xda>
 80079a4:	2301      	movs	r3, #1
 80079a6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80079a8:	6a39      	ldr	r1, [r7, #32]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff fcbd 	bl	800732a <dir_alloc>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80079b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d148      	bne.n	8007a50 <dir_register+0x184>
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	623b      	str	r3, [r7, #32]
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d042      	beq.n	8007a50 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	695a      	ldr	r2, [r3, #20]
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	015b      	lsls	r3, r3, #5
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7ff fb48 	bl	800706c <dir_sdi>
 80079dc:	4603      	mov	r3, r0
 80079de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80079e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d132      	bne.n	8007a50 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3324      	adds	r3, #36	; 0x24
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff fe8a 	bl	8007708 <sum_sfn>
 80079f4:	4603      	mov	r3, r0
 80079f6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	4619      	mov	r1, r3
 80079fe:	69f8      	ldr	r0, [r7, #28]
 8007a00:	f7fe ff52 	bl	80068a8 <move_window>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d11d      	bne.n	8007a4e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	6918      	ldr	r0, [r3, #16]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a19      	ldr	r1, [r3, #32]
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	7efb      	ldrb	r3, [r7, #27]
 8007a20:	f7ff fd7a 	bl	8007518 <put_lfn>
				fs->wflag = 1;
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	2201      	movs	r2, #1
 8007a28:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff fba6 	bl	800717e <dir_next>
 8007a32:	4603      	mov	r3, r0
 8007a34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007a38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d107      	bne.n	8007a50 <dir_register+0x184>
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	623b      	str	r3, [r7, #32]
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1d5      	bne.n	80079f8 <dir_register+0x12c>
 8007a4c:	e000      	b.n	8007a50 <dir_register+0x184>
				if (res != FR_OK) break;
 8007a4e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d128      	bne.n	8007aaa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	69f8      	ldr	r0, [r7, #28]
 8007a60:	f7fe ff22 	bl	80068a8 <move_window>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d11b      	bne.n	8007aaa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	2220      	movs	r2, #32
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fd07 	bl	800648e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a18      	ldr	r0, [r3, #32]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3324      	adds	r3, #36	; 0x24
 8007a88:	220b      	movs	r2, #11
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	f7fe fcde 	bl	800644c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	f002 0218 	and.w	r2, r2, #24
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3730      	adds	r7, #48	; 0x30
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	4ec4ec4f 	.word	0x4ec4ec4f

08007abc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08a      	sub	sp, #40	; 0x28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	617b      	str	r3, [r7, #20]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	61ba      	str	r2, [r7, #24]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007aea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aec:	2b1f      	cmp	r3, #31
 8007aee:	d940      	bls.n	8007b72 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007af0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007af2:	2b2f      	cmp	r3, #47	; 0x2f
 8007af4:	d006      	beq.n	8007b04 <create_name+0x48>
 8007af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007af8:	2b5c      	cmp	r3, #92	; 0x5c
 8007afa:	d110      	bne.n	8007b1e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007afc:	e002      	b.n	8007b04 <create_name+0x48>
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	3301      	adds	r3, #1
 8007b02:	61bb      	str	r3, [r7, #24]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	4413      	add	r3, r2
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b2f      	cmp	r3, #47	; 0x2f
 8007b0e:	d0f6      	beq.n	8007afe <create_name+0x42>
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	4413      	add	r3, r2
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b5c      	cmp	r3, #92	; 0x5c
 8007b1a:	d0f0      	beq.n	8007afe <create_name+0x42>
			break;
 8007b1c:	e02a      	b.n	8007b74 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2bfe      	cmp	r3, #254	; 0xfe
 8007b22:	d901      	bls.n	8007b28 <create_name+0x6c>
 8007b24:	2306      	movs	r3, #6
 8007b26:	e177      	b.n	8007e18 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007b28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007b2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b30:	2101      	movs	r1, #1
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 fcde 	bl	80094f4 <ff_convert>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007b3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <create_name+0x8a>
 8007b42:	2306      	movs	r3, #6
 8007b44:	e168      	b.n	8007e18 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007b46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b48:	2b7f      	cmp	r3, #127	; 0x7f
 8007b4a:	d809      	bhi.n	8007b60 <create_name+0xa4>
 8007b4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b4e:	4619      	mov	r1, r3
 8007b50:	48b3      	ldr	r0, [pc, #716]	; (8007e20 <create_name+0x364>)
 8007b52:	f7fe fcde 	bl	8006512 <chk_chr>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <create_name+0xa4>
 8007b5c:	2306      	movs	r3, #6
 8007b5e:	e15b      	b.n	8007e18 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	617a      	str	r2, [r7, #20]
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b6e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007b70:	e7b4      	b.n	8007adc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007b72:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	441a      	add	r2, r3
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b80:	2b1f      	cmp	r3, #31
 8007b82:	d801      	bhi.n	8007b88 <create_name+0xcc>
 8007b84:	2304      	movs	r3, #4
 8007b86:	e000      	b.n	8007b8a <create_name+0xce>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007b8e:	e011      	b.n	8007bb4 <create_name+0xf8>
		w = lfn[di - 1];
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b96:	3b01      	subs	r3, #1
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	d002      	beq.n	8007bae <create_name+0xf2>
 8007ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007baa:	2b2e      	cmp	r3, #46	; 0x2e
 8007bac:	d106      	bne.n	8007bbc <create_name+0x100>
		di--;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1ea      	bne.n	8007b90 <create_name+0xd4>
 8007bba:	e000      	b.n	8007bbe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007bbc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	005b      	lsls	r3, r3, #1
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <create_name+0x118>
 8007bd0:	2306      	movs	r3, #6
 8007bd2:	e121      	b.n	8007e18 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3324      	adds	r3, #36	; 0x24
 8007bd8:	220b      	movs	r2, #11
 8007bda:	2120      	movs	r1, #32
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe fc56 	bl	800648e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007be2:	2300      	movs	r3, #0
 8007be4:	61bb      	str	r3, [r7, #24]
 8007be6:	e002      	b.n	8007bee <create_name+0x132>
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	3301      	adds	r3, #1
 8007bec:	61bb      	str	r3, [r7, #24]
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	d0f5      	beq.n	8007be8 <create_name+0x12c>
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4413      	add	r3, r2
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	2b2e      	cmp	r3, #46	; 0x2e
 8007c08:	d0ee      	beq.n	8007be8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d009      	beq.n	8007c24 <create_name+0x168>
 8007c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c14:	f043 0303 	orr.w	r3, r3, #3
 8007c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007c1c:	e002      	b.n	8007c24 <create_name+0x168>
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d009      	beq.n	8007c3e <create_name+0x182>
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007c30:	3b01      	subs	r3, #1
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c3c:	d1ef      	bne.n	8007c1e <create_name+0x162>

	i = b = 0; ni = 8;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007c44:	2300      	movs	r3, #0
 8007c46:	623b      	str	r3, [r7, #32]
 8007c48:	2308      	movs	r3, #8
 8007c4a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	61ba      	str	r2, [r7, #24]
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4413      	add	r3, r2
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 8090 	beq.w	8007d84 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d006      	beq.n	8007c78 <create_name+0x1bc>
 8007c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007c6e:	d10a      	bne.n	8007c86 <create_name+0x1ca>
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d006      	beq.n	8007c86 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c7c:	f043 0303 	orr.w	r3, r3, #3
 8007c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c84:	e07d      	b.n	8007d82 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007c86:	6a3a      	ldr	r2, [r7, #32]
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d203      	bcs.n	8007c96 <create_name+0x1da>
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d123      	bne.n	8007cde <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	2b0b      	cmp	r3, #11
 8007c9a:	d106      	bne.n	8007caa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca0:	f043 0303 	orr.w	r3, r3, #3
 8007ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ca8:	e06f      	b.n	8007d8a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d005      	beq.n	8007cbe <create_name+0x202>
 8007cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cb6:	f043 0303 	orr.w	r3, r3, #3
 8007cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d860      	bhi.n	8007d88 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	61bb      	str	r3, [r7, #24]
 8007cca:	2308      	movs	r3, #8
 8007ccc:	623b      	str	r3, [r7, #32]
 8007cce:	230b      	movs	r3, #11
 8007cd0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007cd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007cdc:	e051      	b.n	8007d82 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ce2:	d914      	bls.n	8007d0e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007ce4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f001 fc03 	bl	80094f4 <ff_convert>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007cf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d004      	beq.n	8007d02 <create_name+0x246>
 8007cf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cfa:	3b80      	subs	r3, #128	; 0x80
 8007cfc:	4a49      	ldr	r2, [pc, #292]	; (8007e24 <create_name+0x368>)
 8007cfe:	5cd3      	ldrb	r3, [r2, r3]
 8007d00:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d06:	f043 0302 	orr.w	r3, r3, #2
 8007d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007d0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d007      	beq.n	8007d24 <create_name+0x268>
 8007d14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d16:	4619      	mov	r1, r3
 8007d18:	4843      	ldr	r0, [pc, #268]	; (8007e28 <create_name+0x36c>)
 8007d1a:	f7fe fbfa 	bl	8006512 <chk_chr>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d008      	beq.n	8007d36 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007d24:	235f      	movs	r3, #95	; 0x5f
 8007d26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d2c:	f043 0303 	orr.w	r3, r3, #3
 8007d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d34:	e01b      	b.n	8007d6e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007d36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d38:	2b40      	cmp	r3, #64	; 0x40
 8007d3a:	d909      	bls.n	8007d50 <create_name+0x294>
 8007d3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d3e:	2b5a      	cmp	r3, #90	; 0x5a
 8007d40:	d806      	bhi.n	8007d50 <create_name+0x294>
					b |= 2;
 8007d42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d46:	f043 0302 	orr.w	r3, r3, #2
 8007d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d4e:	e00e      	b.n	8007d6e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007d50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d52:	2b60      	cmp	r3, #96	; 0x60
 8007d54:	d90b      	bls.n	8007d6e <create_name+0x2b2>
 8007d56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d58:	2b7a      	cmp	r3, #122	; 0x7a
 8007d5a:	d808      	bhi.n	8007d6e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d60:	f043 0301 	orr.w	r3, r3, #1
 8007d64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d6a:	3b20      	subs	r3, #32
 8007d6c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	623a      	str	r2, [r7, #32]
 8007d74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d76:	b2d1      	uxtb	r1, r2
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	460a      	mov	r2, r1
 8007d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007d82:	e763      	b.n	8007c4c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007d84:	bf00      	nop
 8007d86:	e000      	b.n	8007d8a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007d88:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d90:	2be5      	cmp	r3, #229	; 0xe5
 8007d92:	d103      	bne.n	8007d9c <create_name+0x2e0>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2205      	movs	r2, #5
 8007d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	2b08      	cmp	r3, #8
 8007da0:	d104      	bne.n	8007dac <create_name+0x2f0>
 8007da2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007dac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007db0:	f003 030c 	and.w	r3, r3, #12
 8007db4:	2b0c      	cmp	r3, #12
 8007db6:	d005      	beq.n	8007dc4 <create_name+0x308>
 8007db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007dbc:	f003 0303 	and.w	r3, r3, #3
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d105      	bne.n	8007dd0 <create_name+0x314>
 8007dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dc8:	f043 0302 	orr.w	r3, r3, #2
 8007dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d117      	bne.n	8007e0c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007ddc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007de0:	f003 0303 	and.w	r3, r3, #3
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d105      	bne.n	8007df4 <create_name+0x338>
 8007de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dec:	f043 0310 	orr.w	r3, r3, #16
 8007df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007df4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007df8:	f003 030c 	and.w	r3, r3, #12
 8007dfc:	2b04      	cmp	r3, #4
 8007dfe:	d105      	bne.n	8007e0c <create_name+0x350>
 8007e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e04:	f043 0308 	orr.w	r3, r3, #8
 8007e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007e16:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3728      	adds	r7, #40	; 0x28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	0800a600 	.word	0x0800a600
 8007e24:	0800a690 	.word	0x0800a690
 8007e28:	0800a60c 	.word	0x0800a60c

08007e2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007e40:	e002      	b.n	8007e48 <follow_path+0x1c>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	3301      	adds	r3, #1
 8007e46:	603b      	str	r3, [r7, #0]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b2f      	cmp	r3, #47	; 0x2f
 8007e4e:	d0f8      	beq.n	8007e42 <follow_path+0x16>
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b5c      	cmp	r3, #92	; 0x5c
 8007e56:	d0f4      	beq.n	8007e42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2b1f      	cmp	r3, #31
 8007e64:	d80a      	bhi.n	8007e7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2280      	movs	r2, #128	; 0x80
 8007e6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007e6e:	2100      	movs	r1, #0
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff f8fb 	bl	800706c <dir_sdi>
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]
 8007e7a:	e048      	b.n	8007f0e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff fe1b 	bl	8007abc <create_name>
 8007e86:	4603      	mov	r3, r0
 8007e88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d139      	bne.n	8007f04 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff fc5a 	bl	800774a <dir_find>
 8007e96:	4603      	mov	r3, r0
 8007e98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ea0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00a      	beq.n	8007ebe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d12c      	bne.n	8007f08 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d127      	bne.n	8007f08 <follow_path+0xdc>
 8007eb8:	2305      	movs	r3, #5
 8007eba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007ebc:	e024      	b.n	8007f08 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ebe:	7afb      	ldrb	r3, [r7, #11]
 8007ec0:	f003 0304 	and.w	r3, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d121      	bne.n	8007f0c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	799b      	ldrb	r3, [r3, #6]
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d102      	bne.n	8007eda <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007ed4:	2305      	movs	r3, #5
 8007ed6:	75fb      	strb	r3, [r7, #23]
 8007ed8:	e019      	b.n	8007f0e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	8992      	ldrh	r2, [r2, #12]
 8007ee8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007eec:	fb02 f200 	mul.w	r2, r2, r0
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	440b      	add	r3, r1
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7ff fa5e 	bl	80073b8 <ld_clust>
 8007efc:	4602      	mov	r2, r0
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f02:	e7bb      	b.n	8007e7c <follow_path+0x50>
			if (res != FR_OK) break;
 8007f04:	bf00      	nop
 8007f06:	e002      	b.n	8007f0e <follow_path+0xe2>
				break;
 8007f08:	bf00      	nop
 8007f0a:	e000      	b.n	8007f0e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f0c:	bf00      	nop
			}
		}
	}

	return res;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f24:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d031      	beq.n	8007f92 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	e002      	b.n	8007f3c <get_ldnumber+0x24>
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b1f      	cmp	r3, #31
 8007f42:	d903      	bls.n	8007f4c <get_ldnumber+0x34>
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b3a      	cmp	r3, #58	; 0x3a
 8007f4a:	d1f4      	bne.n	8007f36 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b3a      	cmp	r3, #58	; 0x3a
 8007f52:	d11c      	bne.n	8007f8e <get_ldnumber+0x76>
			tp = *path;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	60fa      	str	r2, [r7, #12]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	3b30      	subs	r3, #48	; 0x30
 8007f64:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b09      	cmp	r3, #9
 8007f6a:	d80e      	bhi.n	8007f8a <get_ldnumber+0x72>
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d10a      	bne.n	8007f8a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d107      	bne.n	8007f8a <get_ldnumber+0x72>
					vol = (int)i;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	3301      	adds	r3, #1
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	e002      	b.n	8007f94 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007f8e:	2300      	movs	r3, #0
 8007f90:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007f92:	693b      	ldr	r3, [r7, #16]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	70da      	strb	r2, [r3, #3]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fb6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7fe fc74 	bl	80068a8 <move_window>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <check_fs+0x2a>
 8007fc6:	2304      	movs	r3, #4
 8007fc8:	e038      	b.n	800803c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3338      	adds	r3, #56	; 0x38
 8007fce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe f9b8 	bl	8006348 <ld_word>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d001      	beq.n	8007fe8 <check_fs+0x48>
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e029      	b.n	800803c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007fee:	2be9      	cmp	r3, #233	; 0xe9
 8007ff0:	d009      	beq.n	8008006 <check_fs+0x66>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ff8:	2beb      	cmp	r3, #235	; 0xeb
 8007ffa:	d11e      	bne.n	800803a <check_fs+0x9a>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008002:	2b90      	cmp	r3, #144	; 0x90
 8008004:	d119      	bne.n	800803a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3338      	adds	r3, #56	; 0x38
 800800a:	3336      	adds	r3, #54	; 0x36
 800800c:	4618      	mov	r0, r3
 800800e:	f7fe f9b3 	bl	8006378 <ld_dword>
 8008012:	4603      	mov	r3, r0
 8008014:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008018:	4a0a      	ldr	r2, [pc, #40]	; (8008044 <check_fs+0xa4>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d101      	bne.n	8008022 <check_fs+0x82>
 800801e:	2300      	movs	r3, #0
 8008020:	e00c      	b.n	800803c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3338      	adds	r3, #56	; 0x38
 8008026:	3352      	adds	r3, #82	; 0x52
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe f9a5 	bl	8006378 <ld_dword>
 800802e:	4603      	mov	r3, r0
 8008030:	4a05      	ldr	r2, [pc, #20]	; (8008048 <check_fs+0xa8>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d101      	bne.n	800803a <check_fs+0x9a>
 8008036:	2300      	movs	r3, #0
 8008038:	e000      	b.n	800803c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800803a:	2302      	movs	r3, #2
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	00544146 	.word	0x00544146
 8008048:	33544146 	.word	0x33544146

0800804c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b096      	sub	sp, #88	; 0x58
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	4613      	mov	r3, r2
 8008058:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f7ff ff59 	bl	8007f18 <get_ldnumber>
 8008066:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800806a:	2b00      	cmp	r3, #0
 800806c:	da01      	bge.n	8008072 <find_volume+0x26>
 800806e:	230b      	movs	r3, #11
 8008070:	e268      	b.n	8008544 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008072:	4ab0      	ldr	r2, [pc, #704]	; (8008334 <find_volume+0x2e8>)
 8008074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800807a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <find_volume+0x3a>
 8008082:	230c      	movs	r3, #12
 8008084:	e25e      	b.n	8008544 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800808a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	f023 0301 	bic.w	r3, r3, #1
 8008092:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01a      	beq.n	80080d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fe f8b3 	bl	800620c <disk_status>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80080ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10c      	bne.n	80080d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80080b8:	79fb      	ldrb	r3, [r7, #7]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d007      	beq.n	80080ce <find_volume+0x82>
 80080be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80080ca:	230a      	movs	r3, #10
 80080cc:	e23a      	b.n	8008544 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80080ce:	2300      	movs	r3, #0
 80080d0:	e238      	b.n	8008544 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	2200      	movs	r2, #0
 80080d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80080d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	785b      	ldrb	r3, [r3, #1]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe f8ab 	bl	8006240 <disk_initialize>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80080f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80080fc:	2303      	movs	r3, #3
 80080fe:	e221      	b.n	8008544 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d007      	beq.n	8008116 <find_volume+0xca>
 8008106:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800810a:	f003 0304 	and.w	r3, r3, #4
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008112:	230a      	movs	r3, #10
 8008114:	e216      	b.n	8008544 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008118:	7858      	ldrb	r0, [r3, #1]
 800811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811c:	330c      	adds	r3, #12
 800811e:	461a      	mov	r2, r3
 8008120:	2102      	movs	r1, #2
 8008122:	f7fe f8f3 	bl	800630c <disk_ioctl>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <find_volume+0xe4>
 800812c:	2301      	movs	r3, #1
 800812e:	e209      	b.n	8008544 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	899b      	ldrh	r3, [r3, #12]
 8008134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008138:	d80d      	bhi.n	8008156 <find_volume+0x10a>
 800813a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813c:	899b      	ldrh	r3, [r3, #12]
 800813e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008142:	d308      	bcc.n	8008156 <find_volume+0x10a>
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	899b      	ldrh	r3, [r3, #12]
 8008148:	461a      	mov	r2, r3
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	899b      	ldrh	r3, [r3, #12]
 800814e:	3b01      	subs	r3, #1
 8008150:	4013      	ands	r3, r2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <find_volume+0x10e>
 8008156:	2301      	movs	r3, #1
 8008158:	e1f4      	b.n	8008544 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800815e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008160:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008162:	f7ff ff1d 	bl	8007fa0 <check_fs>
 8008166:	4603      	mov	r3, r0
 8008168:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800816c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008170:	2b02      	cmp	r3, #2
 8008172:	d14b      	bne.n	800820c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008174:	2300      	movs	r3, #0
 8008176:	643b      	str	r3, [r7, #64]	; 0x40
 8008178:	e01f      	b.n	80081ba <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800817a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008188:	4413      	add	r3, r2
 800818a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	3304      	adds	r3, #4
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d006      	beq.n	80081a4 <find_volume+0x158>
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	3308      	adds	r3, #8
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe f8ec 	bl	8006378 <ld_dword>
 80081a0:	4602      	mov	r2, r0
 80081a2:	e000      	b.n	80081a6 <find_volume+0x15a>
 80081a4:	2200      	movs	r2, #0
 80081a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80081ae:	440b      	add	r3, r1
 80081b0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081b6:	3301      	adds	r3, #1
 80081b8:	643b      	str	r3, [r7, #64]	; 0x40
 80081ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d9dc      	bls.n	800817a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80081c0:	2300      	movs	r3, #0
 80081c2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80081c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <find_volume+0x184>
 80081ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081cc:	3b01      	subs	r3, #1
 80081ce:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80081d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80081d8:	4413      	add	r3, r2
 80081da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80081de:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80081e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d005      	beq.n	80081f2 <find_volume+0x1a6>
 80081e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081ea:	f7ff fed9 	bl	8007fa0 <check_fs>
 80081ee:	4603      	mov	r3, r0
 80081f0:	e000      	b.n	80081f4 <find_volume+0x1a8>
 80081f2:	2303      	movs	r3, #3
 80081f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80081f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d905      	bls.n	800820c <find_volume+0x1c0>
 8008200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008202:	3301      	adds	r3, #1
 8008204:	643b      	str	r3, [r7, #64]	; 0x40
 8008206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008208:	2b03      	cmp	r3, #3
 800820a:	d9e1      	bls.n	80081d0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800820c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008210:	2b04      	cmp	r3, #4
 8008212:	d101      	bne.n	8008218 <find_volume+0x1cc>
 8008214:	2301      	movs	r3, #1
 8008216:	e195      	b.n	8008544 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800821c:	2b01      	cmp	r3, #1
 800821e:	d901      	bls.n	8008224 <find_volume+0x1d8>
 8008220:	230d      	movs	r3, #13
 8008222:	e18f      	b.n	8008544 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	3338      	adds	r3, #56	; 0x38
 8008228:	330b      	adds	r3, #11
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe f88c 	bl	8006348 <ld_word>
 8008230:	4603      	mov	r3, r0
 8008232:	461a      	mov	r2, r3
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	899b      	ldrh	r3, [r3, #12]
 8008238:	429a      	cmp	r2, r3
 800823a:	d001      	beq.n	8008240 <find_volume+0x1f4>
 800823c:	230d      	movs	r3, #13
 800823e:	e181      	b.n	8008544 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	3338      	adds	r3, #56	; 0x38
 8008244:	3316      	adds	r3, #22
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe f87e 	bl	8006348 <ld_word>
 800824c:	4603      	mov	r3, r0
 800824e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008252:	2b00      	cmp	r3, #0
 8008254:	d106      	bne.n	8008264 <find_volume+0x218>
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	3338      	adds	r3, #56	; 0x38
 800825a:	3324      	adds	r3, #36	; 0x24
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe f88b 	bl	8006378 <ld_dword>
 8008262:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008268:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008276:	789b      	ldrb	r3, [r3, #2]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d005      	beq.n	8008288 <find_volume+0x23c>
 800827c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827e:	789b      	ldrb	r3, [r3, #2]
 8008280:	2b02      	cmp	r3, #2
 8008282:	d001      	beq.n	8008288 <find_volume+0x23c>
 8008284:	230d      	movs	r3, #13
 8008286:	e15d      	b.n	8008544 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	789b      	ldrb	r3, [r3, #2]
 800828c:	461a      	mov	r2, r3
 800828e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008290:	fb02 f303 	mul.w	r3, r2, r3
 8008294:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800829c:	b29a      	uxth	r2, r3
 800829e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	895b      	ldrh	r3, [r3, #10]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d008      	beq.n	80082bc <find_volume+0x270>
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	895b      	ldrh	r3, [r3, #10]
 80082ae:	461a      	mov	r2, r3
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	895b      	ldrh	r3, [r3, #10]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	4013      	ands	r3, r2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <find_volume+0x274>
 80082bc:	230d      	movs	r3, #13
 80082be:	e141      	b.n	8008544 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	3338      	adds	r3, #56	; 0x38
 80082c4:	3311      	adds	r3, #17
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe f83e 	bl	8006348 <ld_word>
 80082cc:	4603      	mov	r3, r0
 80082ce:	461a      	mov	r2, r3
 80082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	891b      	ldrh	r3, [r3, #8]
 80082d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082da:	8992      	ldrh	r2, [r2, #12]
 80082dc:	0952      	lsrs	r2, r2, #5
 80082de:	b292      	uxth	r2, r2
 80082e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80082e4:	fb02 f201 	mul.w	r2, r2, r1
 80082e8:	1a9b      	subs	r3, r3, r2
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <find_volume+0x2a8>
 80082f0:	230d      	movs	r3, #13
 80082f2:	e127      	b.n	8008544 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	3338      	adds	r3, #56	; 0x38
 80082f8:	3313      	adds	r3, #19
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fe f824 	bl	8006348 <ld_word>
 8008300:	4603      	mov	r3, r0
 8008302:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <find_volume+0x2cc>
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	3338      	adds	r3, #56	; 0x38
 800830e:	3320      	adds	r3, #32
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe f831 	bl	8006378 <ld_dword>
 8008316:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	3338      	adds	r3, #56	; 0x38
 800831c:	330e      	adds	r3, #14
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe f812 	bl	8006348 <ld_word>
 8008324:	4603      	mov	r3, r0
 8008326:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008328:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800832a:	2b00      	cmp	r3, #0
 800832c:	d104      	bne.n	8008338 <find_volume+0x2ec>
 800832e:	230d      	movs	r3, #13
 8008330:	e108      	b.n	8008544 <find_volume+0x4f8>
 8008332:	bf00      	nop
 8008334:	20002210 	.word	0x20002210

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008338:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800833a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800833c:	4413      	add	r3, r2
 800833e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008340:	8911      	ldrh	r1, [r2, #8]
 8008342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008344:	8992      	ldrh	r2, [r2, #12]
 8008346:	0952      	lsrs	r2, r2, #5
 8008348:	b292      	uxth	r2, r2
 800834a:	fbb1 f2f2 	udiv	r2, r1, r2
 800834e:	b292      	uxth	r2, r2
 8008350:	4413      	add	r3, r2
 8008352:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008358:	429a      	cmp	r2, r3
 800835a:	d201      	bcs.n	8008360 <find_volume+0x314>
 800835c:	230d      	movs	r3, #13
 800835e:	e0f1      	b.n	8008544 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008368:	8952      	ldrh	r2, [r2, #10]
 800836a:	fbb3 f3f2 	udiv	r3, r3, r2
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <find_volume+0x32e>
 8008376:	230d      	movs	r3, #13
 8008378:	e0e4      	b.n	8008544 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800837a:	2303      	movs	r3, #3
 800837c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008386:	4293      	cmp	r3, r2
 8008388:	d802      	bhi.n	8008390 <find_volume+0x344>
 800838a:	2302      	movs	r3, #2
 800838c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008396:	4293      	cmp	r3, r2
 8008398:	d802      	bhi.n	80083a0 <find_volume+0x354>
 800839a:	2301      	movs	r3, #1
 800839c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	1c9a      	adds	r2, r3, #2
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083ac:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80083ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b2:	441a      	add	r2, r3
 80083b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80083b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	441a      	add	r2, r3
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80083c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d11e      	bne.n	8008408 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	3338      	adds	r3, #56	; 0x38
 80083ce:	332a      	adds	r3, #42	; 0x2a
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fd ffb9 	bl	8006348 <ld_word>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <find_volume+0x394>
 80083dc:	230d      	movs	r3, #13
 80083de:	e0b1      	b.n	8008544 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	891b      	ldrh	r3, [r3, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <find_volume+0x3a0>
 80083e8:	230d      	movs	r3, #13
 80083ea:	e0ab      	b.n	8008544 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	3338      	adds	r3, #56	; 0x38
 80083f0:	332c      	adds	r3, #44	; 0x2c
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fd ffc0 	bl	8006378 <ld_dword>
 80083f8:	4602      	mov	r2, r0
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80083fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	647b      	str	r3, [r7, #68]	; 0x44
 8008406:	e01f      	b.n	8008448 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	891b      	ldrh	r3, [r3, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <find_volume+0x3c8>
 8008410:	230d      	movs	r3, #13
 8008412:	e097      	b.n	8008544 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841a:	441a      	add	r2, r3
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008424:	2b02      	cmp	r3, #2
 8008426:	d103      	bne.n	8008430 <find_volume+0x3e4>
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	e00a      	b.n	8008446 <find_volume+0x3fa>
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	4613      	mov	r3, r2
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	4413      	add	r3, r2
 800843a:	085a      	lsrs	r2, r3, #1
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008446:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	6a1a      	ldr	r2, [r3, #32]
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	899b      	ldrh	r3, [r3, #12]
 8008450:	4619      	mov	r1, r3
 8008452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008454:	440b      	add	r3, r1
 8008456:	3b01      	subs	r3, #1
 8008458:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800845a:	8989      	ldrh	r1, [r1, #12]
 800845c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008460:	429a      	cmp	r2, r3
 8008462:	d201      	bcs.n	8008468 <find_volume+0x41c>
 8008464:	230d      	movs	r3, #13
 8008466:	e06d      	b.n	8008544 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800846e:	619a      	str	r2, [r3, #24]
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	699a      	ldr	r2, [r3, #24]
 8008474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008476:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	2280      	movs	r2, #128	; 0x80
 800847c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800847e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008482:	2b03      	cmp	r3, #3
 8008484:	d149      	bne.n	800851a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	3338      	adds	r3, #56	; 0x38
 800848a:	3330      	adds	r3, #48	; 0x30
 800848c:	4618      	mov	r0, r3
 800848e:	f7fd ff5b 	bl	8006348 <ld_word>
 8008492:	4603      	mov	r3, r0
 8008494:	2b01      	cmp	r3, #1
 8008496:	d140      	bne.n	800851a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800849a:	3301      	adds	r3, #1
 800849c:	4619      	mov	r1, r3
 800849e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084a0:	f7fe fa02 	bl	80068a8 <move_window>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d137      	bne.n	800851a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	2200      	movs	r2, #0
 80084ae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	3338      	adds	r3, #56	; 0x38
 80084b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fd ff45 	bl	8006348 <ld_word>
 80084be:	4603      	mov	r3, r0
 80084c0:	461a      	mov	r2, r3
 80084c2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d127      	bne.n	800851a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	3338      	adds	r3, #56	; 0x38
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fd ff52 	bl	8006378 <ld_dword>
 80084d4:	4603      	mov	r3, r0
 80084d6:	4a1d      	ldr	r2, [pc, #116]	; (800854c <find_volume+0x500>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d11e      	bne.n	800851a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	3338      	adds	r3, #56	; 0x38
 80084e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fd ff47 	bl	8006378 <ld_dword>
 80084ea:	4603      	mov	r3, r0
 80084ec:	4a18      	ldr	r2, [pc, #96]	; (8008550 <find_volume+0x504>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d113      	bne.n	800851a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80084f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f4:	3338      	adds	r3, #56	; 0x38
 80084f6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fd ff3c 	bl	8006378 <ld_dword>
 8008500:	4602      	mov	r2, r0
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008508:	3338      	adds	r3, #56	; 0x38
 800850a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800850e:	4618      	mov	r0, r3
 8008510:	f7fd ff32 	bl	8006378 <ld_dword>
 8008514:	4602      	mov	r2, r0
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008520:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008522:	4b0c      	ldr	r3, [pc, #48]	; (8008554 <find_volume+0x508>)
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	3301      	adds	r3, #1
 8008528:	b29a      	uxth	r2, r3
 800852a:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <find_volume+0x508>)
 800852c:	801a      	strh	r2, [r3, #0]
 800852e:	4b09      	ldr	r3, [pc, #36]	; (8008554 <find_volume+0x508>)
 8008530:	881a      	ldrh	r2, [r3, #0]
 8008532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008534:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	4a07      	ldr	r2, [pc, #28]	; (8008558 <find_volume+0x50c>)
 800853a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800853c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800853e:	f7fe f94b 	bl	80067d8 <clear_lock>
#endif
	return FR_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3758      	adds	r7, #88	; 0x58
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	41615252 	.word	0x41615252
 8008550:	61417272 	.word	0x61417272
 8008554:	20002214 	.word	0x20002214
 8008558:	20002238 	.word	0x20002238

0800855c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008566:	2309      	movs	r3, #9
 8008568:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d01c      	beq.n	80085aa <validate+0x4e>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d018      	beq.n	80085aa <validate+0x4e>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d013      	beq.n	80085aa <validate+0x4e>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	889a      	ldrh	r2, [r3, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	88db      	ldrh	r3, [r3, #6]
 800858c:	429a      	cmp	r2, r3
 800858e:	d10c      	bne.n	80085aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	4618      	mov	r0, r3
 8008598:	f7fd fe38 	bl	800620c <disk_status>
 800859c:	4603      	mov	r3, r0
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <validate+0x4e>
			res = FR_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d102      	bne.n	80085b6 <validate+0x5a>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	e000      	b.n	80085b8 <validate+0x5c>
 80085b6:	2300      	movs	r3, #0
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	6013      	str	r3, [r2, #0]
	return res;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b088      	sub	sp, #32
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80085da:	f107 0310 	add.w	r3, r7, #16
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff fc9a 	bl	8007f18 <get_ldnumber>
 80085e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	da01      	bge.n	80085f0 <f_mount+0x28>
 80085ec:	230b      	movs	r3, #11
 80085ee:	e02b      	b.n	8008648 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80085f0:	4a17      	ldr	r2, [pc, #92]	; (8008650 <f_mount+0x88>)
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d005      	beq.n	800860c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008600:	69b8      	ldr	r0, [r7, #24]
 8008602:	f7fe f8e9 	bl	80067d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	2200      	movs	r2, #0
 800860a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	490d      	ldr	r1, [pc, #52]	; (8008650 <f_mount+0x88>)
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <f_mount+0x66>
 8008628:	79fb      	ldrb	r3, [r7, #7]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d001      	beq.n	8008632 <f_mount+0x6a>
 800862e:	2300      	movs	r3, #0
 8008630:	e00a      	b.n	8008648 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008632:	f107 010c 	add.w	r1, r7, #12
 8008636:	f107 0308 	add.w	r3, r7, #8
 800863a:	2200      	movs	r2, #0
 800863c:	4618      	mov	r0, r3
 800863e:	f7ff fd05 	bl	800804c <find_volume>
 8008642:	4603      	mov	r3, r0
 8008644:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008646:	7dfb      	ldrb	r3, [r7, #23]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3720      	adds	r7, #32
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20002210 	.word	0x20002210

08008654 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b09a      	sub	sp, #104	; 0x68
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	4613      	mov	r3, r2
 8008660:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <f_open+0x18>
 8008668:	2309      	movs	r3, #9
 800866a:	e1bb      	b.n	80089e4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008672:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008674:	79fa      	ldrb	r2, [r7, #7]
 8008676:	f107 0114 	add.w	r1, r7, #20
 800867a:	f107 0308 	add.w	r3, r7, #8
 800867e:	4618      	mov	r0, r3
 8008680:	f7ff fce4 	bl	800804c <find_volume>
 8008684:	4603      	mov	r3, r0
 8008686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800868a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800868e:	2b00      	cmp	r3, #0
 8008690:	f040 819f 	bne.w	80089d2 <f_open+0x37e>
		dj.obj.fs = fs;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	f107 0318 	add.w	r3, r7, #24
 800869e:	4611      	mov	r1, r2
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff fbc3 	bl	8007e2c <follow_path>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80086ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d11a      	bne.n	80086ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80086b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80086b8:	b25b      	sxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	da03      	bge.n	80086c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80086be:	2306      	movs	r3, #6
 80086c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80086c4:	e011      	b.n	80086ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086c6:	79fb      	ldrb	r3, [r7, #7]
 80086c8:	f023 0301 	bic.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bf14      	ite	ne
 80086d0:	2301      	movne	r3, #1
 80086d2:	2300      	moveq	r3, #0
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	461a      	mov	r2, r3
 80086d8:	f107 0318 	add.w	r3, r7, #24
 80086dc:	4611      	mov	r1, r2
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fd ff32 	bl	8006548 <chk_lock>
 80086e4:	4603      	mov	r3, r0
 80086e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80086ea:	79fb      	ldrb	r3, [r7, #7]
 80086ec:	f003 031c 	and.w	r3, r3, #28
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d07f      	beq.n	80087f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80086f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d017      	beq.n	800872c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80086fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008700:	2b04      	cmp	r3, #4
 8008702:	d10e      	bne.n	8008722 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008704:	f7fd ff7c 	bl	8006600 <enq_lock>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d006      	beq.n	800871c <f_open+0xc8>
 800870e:	f107 0318 	add.w	r3, r7, #24
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff f8da 	bl	80078cc <dir_register>
 8008718:	4603      	mov	r3, r0
 800871a:	e000      	b.n	800871e <f_open+0xca>
 800871c:	2312      	movs	r3, #18
 800871e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008722:	79fb      	ldrb	r3, [r7, #7]
 8008724:	f043 0308 	orr.w	r3, r3, #8
 8008728:	71fb      	strb	r3, [r7, #7]
 800872a:	e010      	b.n	800874e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800872c:	7fbb      	ldrb	r3, [r7, #30]
 800872e:	f003 0311 	and.w	r3, r3, #17
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <f_open+0xea>
					res = FR_DENIED;
 8008736:	2307      	movs	r3, #7
 8008738:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800873c:	e007      	b.n	800874e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <f_open+0xfa>
 8008748:	2308      	movs	r3, #8
 800874a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800874e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008752:	2b00      	cmp	r3, #0
 8008754:	d168      	bne.n	8008828 <f_open+0x1d4>
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	f003 0308 	and.w	r3, r3, #8
 800875c:	2b00      	cmp	r3, #0
 800875e:	d063      	beq.n	8008828 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008760:	f7fd f822 	bl	80057a8 <get_fattime>
 8008764:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008768:	330e      	adds	r3, #14
 800876a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800876c:	4618      	mov	r0, r3
 800876e:	f7fd fe41 	bl	80063f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	3316      	adds	r3, #22
 8008776:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008778:	4618      	mov	r0, r3
 800877a:	f7fd fe3b 	bl	80063f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	330b      	adds	r3, #11
 8008782:	2220      	movs	r2, #32
 8008784:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800878a:	4611      	mov	r1, r2
 800878c:	4618      	mov	r0, r3
 800878e:	f7fe fe13 	bl	80073b8 <ld_clust>
 8008792:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008798:	2200      	movs	r2, #0
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe fe2b 	bl	80073f6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80087a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a2:	331c      	adds	r3, #28
 80087a4:	2100      	movs	r1, #0
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fd fe24 	bl	80063f4 <st_dword>
					fs->wflag = 1;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2201      	movs	r2, #1
 80087b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80087b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d037      	beq.n	8008828 <f_open+0x1d4>
						dw = fs->winsect;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087bc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80087be:	f107 0318 	add.w	r3, r7, #24
 80087c2:	2200      	movs	r2, #0
 80087c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe fb1b 	bl	8006e02 <remove_chain>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80087d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d126      	bne.n	8008828 <f_open+0x1d4>
							res = move_window(fs, dw);
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe f862 	bl	80068a8 <move_window>
 80087e4:	4603      	mov	r3, r0
 80087e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087ee:	3a01      	subs	r2, #1
 80087f0:	615a      	str	r2, [r3, #20]
 80087f2:	e019      	b.n	8008828 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80087f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d115      	bne.n	8008828 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80087fc:	7fbb      	ldrb	r3, [r7, #30]
 80087fe:	f003 0310 	and.w	r3, r3, #16
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008806:	2304      	movs	r3, #4
 8008808:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800880c:	e00c      	b.n	8008828 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d007      	beq.n	8008828 <f_open+0x1d4>
 8008818:	7fbb      	ldrb	r3, [r7, #30]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <f_open+0x1d4>
						res = FR_DENIED;
 8008822:	2307      	movs	r3, #7
 8008824:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008828:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800882c:	2b00      	cmp	r3, #0
 800882e:	d128      	bne.n	8008882 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008830:	79fb      	ldrb	r3, [r7, #7]
 8008832:	f003 0308 	and.w	r3, r3, #8
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008840:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800884a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008850:	79fb      	ldrb	r3, [r7, #7]
 8008852:	f023 0301 	bic.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	bf14      	ite	ne
 800885a:	2301      	movne	r3, #1
 800885c:	2300      	moveq	r3, #0
 800885e:	b2db      	uxtb	r3, r3
 8008860:	461a      	mov	r2, r3
 8008862:	f107 0318 	add.w	r3, r7, #24
 8008866:	4611      	mov	r1, r2
 8008868:	4618      	mov	r0, r3
 800886a:	f7fd feeb 	bl	8006644 <inc_lock>
 800886e:	4602      	mov	r2, r0
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d102      	bne.n	8008882 <f_open+0x22e>
 800887c:	2302      	movs	r3, #2
 800887e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008882:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008886:	2b00      	cmp	r3, #0
 8008888:	f040 80a3 	bne.w	80089d2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008890:	4611      	mov	r1, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe fd90 	bl	80073b8 <ld_clust>
 8008898:	4602      	mov	r2, r0
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800889e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a0:	331c      	adds	r3, #28
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fd fd68 	bl	8006378 <ld_dword>
 80088a8:	4602      	mov	r2, r0
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	88da      	ldrh	r2, [r3, #6]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	79fa      	ldrb	r2, [r7, #7]
 80088c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3330      	adds	r3, #48	; 0x30
 80088de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80088e2:	2100      	movs	r1, #0
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fd fdd2 	bl	800648e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	f003 0320 	and.w	r3, r3, #32
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d06e      	beq.n	80089d2 <f_open+0x37e>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d06a      	beq.n	80089d2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	895b      	ldrh	r3, [r3, #10]
 8008908:	461a      	mov	r2, r3
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	899b      	ldrh	r3, [r3, #12]
 800890e:	fb03 f302 	mul.w	r3, r3, r2
 8008912:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008920:	e016      	b.n	8008950 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe f87b 	bl	8006a22 <get_fat>
 800892c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800892e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008930:	2b01      	cmp	r3, #1
 8008932:	d802      	bhi.n	800893a <f_open+0x2e6>
 8008934:	2302      	movs	r3, #2
 8008936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800893a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008940:	d102      	bne.n	8008948 <f_open+0x2f4>
 8008942:	2301      	movs	r3, #1
 8008944:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800894a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008950:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008954:	2b00      	cmp	r3, #0
 8008956:	d103      	bne.n	8008960 <f_open+0x30c>
 8008958:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800895a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800895c:	429a      	cmp	r2, r3
 800895e:	d8e0      	bhi.n	8008922 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008964:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008966:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800896a:	2b00      	cmp	r3, #0
 800896c:	d131      	bne.n	80089d2 <f_open+0x37e>
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	899b      	ldrh	r3, [r3, #12]
 8008972:	461a      	mov	r2, r3
 8008974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008976:	fbb3 f1f2 	udiv	r1, r3, r2
 800897a:	fb02 f201 	mul.w	r2, r2, r1
 800897e:	1a9b      	subs	r3, r3, r2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d026      	beq.n	80089d2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008988:	4618      	mov	r0, r3
 800898a:	f7fe f82b 	bl	80069e4 <clust2sect>
 800898e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d103      	bne.n	800899e <f_open+0x34a>
						res = FR_INT_ERR;
 8008996:	2302      	movs	r3, #2
 8008998:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800899c:	e019      	b.n	80089d2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	899b      	ldrh	r3, [r3, #12]
 80089a2:	461a      	mov	r2, r3
 80089a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80089aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ac:	441a      	add	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	7858      	ldrb	r0, [r3, #1]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6a1a      	ldr	r2, [r3, #32]
 80089c0:	2301      	movs	r3, #1
 80089c2:	f7fd fc63 	bl	800628c <disk_read>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <f_open+0x37e>
 80089cc:	2301      	movs	r3, #1
 80089ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80089d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <f_open+0x38c>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80089e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3768      	adds	r7, #104	; 0x68
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08e      	sub	sp, #56	; 0x38
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f107 0214 	add.w	r2, r7, #20
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7ff fda5 	bl	800855c <validate>
 8008a12:	4603      	mov	r3, r0
 8008a14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d107      	bne.n	8008a30 <f_read+0x44>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	7d5b      	ldrb	r3, [r3, #21]
 8008a24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <f_read+0x4a>
 8008a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a34:	e135      	b.n	8008ca2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	7d1b      	ldrb	r3, [r3, #20]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <f_read+0x5a>
 8008a42:	2307      	movs	r3, #7
 8008a44:	e12d      	b.n	8008ca2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	f240 811e 	bls.w	8008c98 <f_read+0x2ac>
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008a60:	e11a      	b.n	8008c98 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	8992      	ldrh	r2, [r2, #12]
 8008a6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a6e:	fb02 f201 	mul.w	r2, r2, r1
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f040 80d5 	bne.w	8008c24 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	8992      	ldrh	r2, [r2, #12]
 8008a82:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	8952      	ldrh	r2, [r2, #10]
 8008a8a:	3a01      	subs	r2, #1
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d12f      	bne.n	8008af6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d103      	bne.n	8008aa6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8008aa4:	e013      	b.n	8008ace <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d007      	beq.n	8008abe <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f7fe faa1 	bl	8006ffc <clmt_clust>
 8008aba:	6338      	str	r0, [r7, #48]	; 0x30
 8008abc:	e007      	b.n	8008ace <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f7fd ffab 	bl	8006a22 <get_fat>
 8008acc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d804      	bhi.n	8008ade <f_read+0xf2>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	755a      	strb	r2, [r3, #21]
 8008ada:	2302      	movs	r3, #2
 8008adc:	e0e1      	b.n	8008ca2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ae4:	d104      	bne.n	8008af0 <f_read+0x104>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	755a      	strb	r2, [r3, #21]
 8008aec:	2301      	movs	r3, #1
 8008aee:	e0d8      	b.n	8008ca2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008af4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	69db      	ldr	r3, [r3, #28]
 8008afc:	4619      	mov	r1, r3
 8008afe:	4610      	mov	r0, r2
 8008b00:	f7fd ff70 	bl	80069e4 <clust2sect>
 8008b04:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d104      	bne.n	8008b16 <f_read+0x12a>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	755a      	strb	r2, [r3, #21]
 8008b12:	2302      	movs	r3, #2
 8008b14:	e0c5      	b.n	8008ca2 <f_read+0x2b6>
			sect += csect;
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	899b      	ldrh	r3, [r3, #12]
 8008b22:	461a      	mov	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b2a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d041      	beq.n	8008bb6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b32:	69fa      	ldr	r2, [r7, #28]
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	4413      	add	r3, r2
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	8952      	ldrh	r2, [r2, #10]
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d905      	bls.n	8008b4c <f_read+0x160>
					cc = fs->csize - csect;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	895b      	ldrh	r3, [r3, #10]
 8008b44:	461a      	mov	r2, r3
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	7858      	ldrb	r0, [r3, #1]
 8008b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b56:	f7fd fb99 	bl	800628c <disk_read>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d004      	beq.n	8008b6a <f_read+0x17e>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2201      	movs	r2, #1
 8008b64:	755a      	strb	r2, [r3, #21]
 8008b66:	2301      	movs	r3, #1
 8008b68:	e09b      	b.n	8008ca2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	7d1b      	ldrb	r3, [r3, #20]
 8008b6e:	b25b      	sxtb	r3, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	da18      	bge.n	8008ba6 <f_read+0x1ba>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6a1a      	ldr	r2, [r3, #32]
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d911      	bls.n	8008ba6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6a1a      	ldr	r2, [r3, #32]
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	8992      	ldrh	r2, [r2, #12]
 8008b8e:	fb02 f303 	mul.w	r3, r2, r3
 8008b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b94:	18d0      	adds	r0, r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	899b      	ldrh	r3, [r3, #12]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	f7fd fc53 	bl	800644c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	899b      	ldrh	r3, [r3, #12]
 8008baa:	461a      	mov	r2, r3
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	fb02 f303 	mul.w	r3, r2, r3
 8008bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008bb4:	e05c      	b.n	8008c70 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d02e      	beq.n	8008c1e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	7d1b      	ldrb	r3, [r3, #20]
 8008bc4:	b25b      	sxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	da18      	bge.n	8008bfc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	7858      	ldrb	r0, [r3, #1]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a1a      	ldr	r2, [r3, #32]
 8008bd8:	2301      	movs	r3, #1
 8008bda:	f7fd fb77 	bl	80062cc <disk_write>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d004      	beq.n	8008bee <f_read+0x202>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2201      	movs	r2, #1
 8008be8:	755a      	strb	r2, [r3, #21]
 8008bea:	2301      	movs	r3, #1
 8008bec:	e059      	b.n	8008ca2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	7d1b      	ldrb	r3, [r3, #20]
 8008bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	7858      	ldrb	r0, [r3, #1]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c06:	2301      	movs	r3, #1
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	f7fd fb3f 	bl	800628c <disk_read>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d004      	beq.n	8008c1e <f_read+0x232>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	755a      	strb	r2, [r3, #21]
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e041      	b.n	8008ca2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	899b      	ldrh	r3, [r3, #12]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	8992      	ldrh	r2, [r2, #12]
 8008c32:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c36:	fb02 f201 	mul.w	r2, r2, r1
 8008c3a:	1a9b      	subs	r3, r3, r2
 8008c3c:	1ac3      	subs	r3, r0, r3
 8008c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d901      	bls.n	8008c4c <f_read+0x260>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	8992      	ldrh	r2, [r2, #12]
 8008c5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c5e:	fb02 f200 	mul.w	r2, r2, r0
 8008c62:	1a9b      	subs	r3, r3, r2
 8008c64:	440b      	add	r3, r1
 8008c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c6c:	f7fd fbee 	bl	800644c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	4413      	add	r3, r2
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	699a      	ldr	r2, [r3, #24]
 8008c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7e:	441a      	add	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	619a      	str	r2, [r3, #24]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8a:	441a      	add	r2, r3
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f47f aee1 	bne.w	8008a62 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3738      	adds	r7, #56	; 0x38
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b08c      	sub	sp, #48	; 0x30
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
 8008cb6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f107 0210 	add.w	r2, r7, #16
 8008cc8:	4611      	mov	r1, r2
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7ff fc46 	bl	800855c <validate>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d107      	bne.n	8008cee <f_write+0x44>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	7d5b      	ldrb	r3, [r3, #21]
 8008ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d002      	beq.n	8008cf4 <f_write+0x4a>
 8008cee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cf2:	e16a      	b.n	8008fca <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	7d1b      	ldrb	r3, [r3, #20]
 8008cf8:	f003 0302 	and.w	r3, r3, #2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <f_write+0x5a>
 8008d00:	2307      	movs	r3, #7
 8008d02:	e162      	b.n	8008fca <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	699a      	ldr	r2, [r3, #24]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	441a      	add	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	f080 814c 	bcs.w	8008fae <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	43db      	mvns	r3, r3
 8008d1c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008d1e:	e146      	b.n	8008fae <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	8992      	ldrh	r2, [r2, #12]
 8008d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d2c:	fb02 f201 	mul.w	r2, r2, r1
 8008d30:	1a9b      	subs	r3, r3, r2
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f040 80f1 	bne.w	8008f1a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	8992      	ldrh	r2, [r2, #12]
 8008d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	8952      	ldrh	r2, [r2, #10]
 8008d48:	3a01      	subs	r2, #1
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d143      	bne.n	8008ddc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10c      	bne.n	8008d76 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d11a      	bne.n	8008d9e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe f8ad 	bl	8006ecc <create_chain>
 8008d72:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d74:	e013      	b.n	8008d9e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d007      	beq.n	8008d8e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	4619      	mov	r1, r3
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f7fe f939 	bl	8006ffc <clmt_clust>
 8008d8a:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d8c:	e007      	b.n	8008d9e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	4619      	mov	r1, r3
 8008d96:	4610      	mov	r0, r2
 8008d98:	f7fe f898 	bl	8006ecc <create_chain>
 8008d9c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 8109 	beq.w	8008fb8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d104      	bne.n	8008db6 <f_write+0x10c>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2202      	movs	r2, #2
 8008db0:	755a      	strb	r2, [r3, #21]
 8008db2:	2302      	movs	r3, #2
 8008db4:	e109      	b.n	8008fca <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dbc:	d104      	bne.n	8008dc8 <f_write+0x11e>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	755a      	strb	r2, [r3, #21]
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e100      	b.n	8008fca <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dcc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d102      	bne.n	8008ddc <f_write+0x132>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dda:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	7d1b      	ldrb	r3, [r3, #20]
 8008de0:	b25b      	sxtb	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	da18      	bge.n	8008e18 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	7858      	ldrb	r0, [r3, #1]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6a1a      	ldr	r2, [r3, #32]
 8008df4:	2301      	movs	r3, #1
 8008df6:	f7fd fa69 	bl	80062cc <disk_write>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d004      	beq.n	8008e0a <f_write+0x160>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	755a      	strb	r2, [r3, #21]
 8008e06:	2301      	movs	r3, #1
 8008e08:	e0df      	b.n	8008fca <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	7d1b      	ldrb	r3, [r3, #20]
 8008e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	4610      	mov	r0, r2
 8008e22:	f7fd fddf 	bl	80069e4 <clust2sect>
 8008e26:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d104      	bne.n	8008e38 <f_write+0x18e>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2202      	movs	r2, #2
 8008e32:	755a      	strb	r2, [r3, #21]
 8008e34:	2302      	movs	r3, #2
 8008e36:	e0c8      	b.n	8008fca <f_write+0x320>
			sect += csect;
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	899b      	ldrh	r3, [r3, #12]
 8008e44:	461a      	mov	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e4c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d043      	beq.n	8008edc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	4413      	add	r3, r2
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	8952      	ldrh	r2, [r2, #10]
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d905      	bls.n	8008e6e <f_write+0x1c4>
					cc = fs->csize - csect;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	895b      	ldrh	r3, [r3, #10]
 8008e66:	461a      	mov	r2, r3
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	7858      	ldrb	r0, [r3, #1]
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	69f9      	ldr	r1, [r7, #28]
 8008e78:	f7fd fa28 	bl	80062cc <disk_write>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d004      	beq.n	8008e8c <f_write+0x1e2>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2201      	movs	r2, #1
 8008e86:	755a      	strb	r2, [r3, #21]
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e09e      	b.n	8008fca <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6a1a      	ldr	r2, [r3, #32]
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	6a3a      	ldr	r2, [r7, #32]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d918      	bls.n	8008ecc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a1a      	ldr	r2, [r3, #32]
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	8992      	ldrh	r2, [r2, #12]
 8008eac:	fb02 f303 	mul.w	r3, r2, r3
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	18d1      	adds	r1, r2, r3
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	899b      	ldrh	r3, [r3, #12]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f7fd fac7 	bl	800644c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	7d1b      	ldrb	r3, [r3, #20]
 8008ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	899b      	ldrh	r3, [r3, #12]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	fb02 f303 	mul.w	r3, r2, r3
 8008ed8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008eda:	e04b      	b.n	8008f74 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d016      	beq.n	8008f14 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	699a      	ldr	r2, [r3, #24]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d210      	bcs.n	8008f14 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	7858      	ldrb	r0, [r3, #1]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008efc:	2301      	movs	r3, #1
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	f7fd f9c4 	bl	800628c <disk_read>
 8008f04:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d004      	beq.n	8008f14 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	755a      	strb	r2, [r3, #21]
 8008f10:	2301      	movs	r3, #1
 8008f12:	e05a      	b.n	8008fca <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	899b      	ldrh	r3, [r3, #12]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	8992      	ldrh	r2, [r2, #12]
 8008f28:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f2c:	fb02 f201 	mul.w	r2, r2, r1
 8008f30:	1a9b      	subs	r3, r3, r2
 8008f32:	1ac3      	subs	r3, r0, r3
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d901      	bls.n	8008f42 <f_write+0x298>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	8992      	ldrh	r2, [r2, #12]
 8008f50:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f54:	fb02 f200 	mul.w	r2, r2, r0
 8008f58:	1a9b      	subs	r3, r3, r2
 8008f5a:	440b      	add	r3, r1
 8008f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f5e:	69f9      	ldr	r1, [r7, #28]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fd fa73 	bl	800644c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	7d1b      	ldrb	r3, [r3, #20]
 8008f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008f74:	69fa      	ldr	r2, [r7, #28]
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	4413      	add	r3, r2
 8008f7a:	61fb      	str	r3, [r7, #28]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	699a      	ldr	r2, [r3, #24]
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	441a      	add	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	619a      	str	r2, [r3, #24]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	bf38      	it	cc
 8008f94:	461a      	movcc	r2, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	60da      	str	r2, [r3, #12]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	441a      	add	r2, r3
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f47f aeb5 	bne.w	8008d20 <f_write+0x76>
 8008fb6:	e000      	b.n	8008fba <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008fb8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	7d1b      	ldrb	r3, [r3, #20]
 8008fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3730      	adds	r7, #48	; 0x30
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b086      	sub	sp, #24
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f107 0208 	add.w	r2, r7, #8
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7ff faba 	bl	800855c <validate>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d168      	bne.n	80090c4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	7d1b      	ldrb	r3, [r3, #20]
 8008ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d062      	beq.n	80090c4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	7d1b      	ldrb	r3, [r3, #20]
 8009002:	b25b      	sxtb	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	da15      	bge.n	8009034 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	7858      	ldrb	r0, [r3, #1]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1a      	ldr	r2, [r3, #32]
 8009016:	2301      	movs	r3, #1
 8009018:	f7fd f958 	bl	80062cc <disk_write>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <f_sync+0x54>
 8009022:	2301      	movs	r3, #1
 8009024:	e04f      	b.n	80090c6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	7d1b      	ldrb	r3, [r3, #20]
 800902a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902e:	b2da      	uxtb	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009034:	f7fc fbb8 	bl	80057a8 <get_fattime>
 8009038:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	4619      	mov	r1, r3
 8009042:	4610      	mov	r0, r2
 8009044:	f7fd fc30 	bl	80068a8 <move_window>
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d138      	bne.n	80090c4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009056:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	330b      	adds	r3, #11
 800905c:	781a      	ldrb	r2, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	330b      	adds	r3, #11
 8009062:	f042 0220 	orr.w	r2, r2, #32
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6818      	ldr	r0, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	461a      	mov	r2, r3
 8009074:	68f9      	ldr	r1, [r7, #12]
 8009076:	f7fe f9be 	bl	80073f6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f103 021c 	add.w	r2, r3, #28
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7fd f9b4 	bl	80063f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3316      	adds	r3, #22
 8009090:	6939      	ldr	r1, [r7, #16]
 8009092:	4618      	mov	r0, r3
 8009094:	f7fd f9ae 	bl	80063f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3312      	adds	r3, #18
 800909c:	2100      	movs	r1, #0
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fd f98d 	bl	80063be <st_word>
					fs->wflag = 1;
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2201      	movs	r2, #1
 80090a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fd fc29 	bl	8006904 <sync_fs>
 80090b2:	4603      	mov	r3, r0
 80090b4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	7d1b      	ldrb	r3, [r3, #20]
 80090ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7ff ff7b 	bl	8008fd2 <f_sync>
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d118      	bne.n	8009118 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f107 0208 	add.w	r2, r7, #8
 80090ec:	4611      	mov	r1, r2
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7ff fa34 	bl	800855c <validate>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10c      	bne.n	8009118 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	4618      	mov	r0, r3
 8009104:	f7fd fb2c 	bl	8006760 <dec_lock>
 8009108:	4603      	mov	r3, r0
 800910a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d102      	bne.n	8009118 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b092      	sub	sp, #72	; 0x48
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800912e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009132:	f107 030c 	add.w	r3, r7, #12
 8009136:	2200      	movs	r2, #0
 8009138:	4618      	mov	r0, r3
 800913a:	f7fe ff87 	bl	800804c <find_volume>
 800913e:	4603      	mov	r3, r0
 8009140:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009144:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009148:	2b00      	cmp	r3, #0
 800914a:	f040 8099 	bne.w	8009280 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800914e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	699a      	ldr	r2, [r3, #24]
 8009158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915a:	69db      	ldr	r3, [r3, #28]
 800915c:	3b02      	subs	r3, #2
 800915e:	429a      	cmp	r2, r3
 8009160:	d804      	bhi.n	800916c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	699a      	ldr	r2, [r3, #24]
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	e089      	b.n	8009280 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d128      	bne.n	80091ca <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009178:	2302      	movs	r3, #2
 800917a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009180:	f107 0314 	add.w	r3, r7, #20
 8009184:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009186:	4618      	mov	r0, r3
 8009188:	f7fd fc4b 	bl	8006a22 <get_fat>
 800918c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009194:	d103      	bne.n	800919e <f_getfree+0x7c>
 8009196:	2301      	movs	r3, #1
 8009198:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800919c:	e063      	b.n	8009266 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d103      	bne.n	80091ac <f_getfree+0x8a>
 80091a4:	2302      	movs	r3, #2
 80091a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80091aa:	e05c      	b.n	8009266 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80091ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d102      	bne.n	80091b8 <f_getfree+0x96>
 80091b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b4:	3301      	adds	r3, #1
 80091b6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80091b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ba:	3301      	adds	r3, #1
 80091bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d3db      	bcc.n	8009180 <f_getfree+0x5e>
 80091c8:	e04d      	b.n	8009266 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	637b      	str	r3, [r7, #52]	; 0x34
 80091da:	2300      	movs	r3, #0
 80091dc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80091de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d113      	bne.n	800920c <f_getfree+0xea>
							res = move_window(fs, sect++);
 80091e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80091ec:	4619      	mov	r1, r3
 80091ee:	f7fd fb5b 	bl	80068a8 <move_window>
 80091f2:	4603      	mov	r3, r0
 80091f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80091f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d131      	bne.n	8009264 <f_getfree+0x142>
							p = fs->win;
 8009200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009202:	3338      	adds	r3, #56	; 0x38
 8009204:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009208:	899b      	ldrh	r3, [r3, #12]
 800920a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b02      	cmp	r3, #2
 8009212:	d10f      	bne.n	8009234 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009216:	f7fd f897 	bl	8006348 <ld_word>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d102      	bne.n	8009226 <f_getfree+0x104>
 8009220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009222:	3301      	adds	r3, #1
 8009224:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	3302      	adds	r3, #2
 800922a:	633b      	str	r3, [r7, #48]	; 0x30
 800922c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922e:	3b02      	subs	r3, #2
 8009230:	637b      	str	r3, [r7, #52]	; 0x34
 8009232:	e010      	b.n	8009256 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009236:	f7fd f89f 	bl	8006378 <ld_dword>
 800923a:	4603      	mov	r3, r0
 800923c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d102      	bne.n	800924a <f_getfree+0x128>
 8009244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009246:	3301      	adds	r3, #1
 8009248:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800924a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924c:	3304      	adds	r3, #4
 800924e:	633b      	str	r3, [r7, #48]	; 0x30
 8009250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009252:	3b04      	subs	r3, #4
 8009254:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009258:	3b01      	subs	r3, #1
 800925a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800925c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1bd      	bne.n	80091de <f_getfree+0xbc>
 8009262:	e000      	b.n	8009266 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009264:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800926a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009270:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	791a      	ldrb	r2, [r3, #4]
 8009276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009278:	f042 0201 	orr.w	r2, r2, #1
 800927c:	b2d2      	uxtb	r2, r2
 800927e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009280:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009284:	4618      	mov	r0, r3
 8009286:	3748      	adds	r7, #72	; 0x48
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b088      	sub	sp, #32
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80092a0:	e01b      	b.n	80092da <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80092a2:	f107 0310 	add.w	r3, r7, #16
 80092a6:	f107 0114 	add.w	r1, r7, #20
 80092aa:	2201      	movs	r2, #1
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f7ff fb9d 	bl	80089ec <f_read>
		if (rc != 1) break;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d116      	bne.n	80092e6 <f_gets+0x5a>
		c = s[0];
 80092b8:	7d3b      	ldrb	r3, [r7, #20]
 80092ba:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	2b0d      	cmp	r3, #13
 80092c0:	d100      	bne.n	80092c4 <f_gets+0x38>
 80092c2:	e00a      	b.n	80092da <f_gets+0x4e>
		*p++ = c;
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	61ba      	str	r2, [r7, #24]
 80092ca:	7dfa      	ldrb	r2, [r7, #23]
 80092cc:	701a      	strb	r2, [r3, #0]
		n++;
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	3301      	adds	r3, #1
 80092d2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	2b0a      	cmp	r3, #10
 80092d8:	d007      	beq.n	80092ea <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	3b01      	subs	r3, #1
 80092de:	69fa      	ldr	r2, [r7, #28]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	dbde      	blt.n	80092a2 <f_gets+0x16>
 80092e4:	e002      	b.n	80092ec <f_gets+0x60>
		if (rc != 1) break;
 80092e6:	bf00      	nop
 80092e8:	e000      	b.n	80092ec <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80092ea:	bf00      	nop
	}
	*p = 0;
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <f_gets+0x70>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	e000      	b.n	80092fe <f_gets+0x72>
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3720      	adds	r7, #32
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009312:	78fb      	ldrb	r3, [r7, #3]
 8009314:	2b0a      	cmp	r3, #10
 8009316:	d103      	bne.n	8009320 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009318:	210d      	movs	r1, #13
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff fff3 	bl	8009306 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	db25      	blt.n	8009378 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	1c5a      	adds	r2, r3, #1
 8009330:	60fa      	str	r2, [r7, #12]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	4413      	add	r3, r2
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2b3c      	cmp	r3, #60	; 0x3c
 800933e:	dd12      	ble.n	8009366 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6818      	ldr	r0, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f103 010c 	add.w	r1, r3, #12
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	f107 0308 	add.w	r3, r7, #8
 8009350:	f7ff fcab 	bl	8008caa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	429a      	cmp	r2, r3
 800935a:	d101      	bne.n	8009360 <putc_bfd+0x5a>
 800935c:	2300      	movs	r3, #0
 800935e:	e001      	b.n	8009364 <putc_bfd+0x5e>
 8009360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009364:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	609a      	str	r2, [r3, #8]
 8009376:	e000      	b.n	800937a <putc_bfd+0x74>
	if (i < 0) return;
 8009378:	bf00      	nop
}
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	db16      	blt.n	80093be <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6818      	ldr	r0, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f103 010c 	add.w	r1, r3, #12
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	461a      	mov	r2, r3
 80093a0:	f107 030c 	add.w	r3, r7, #12
 80093a4:	f7ff fc81 	bl	8008caa <f_write>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d107      	bne.n	80093be <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d102      	bne.n	80093be <putc_flush+0x3e>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	e001      	b.n	80093c2 <putc_flush+0x42>
	return EOF;
 80093be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	605a      	str	r2, [r3, #4]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	609a      	str	r2, [r3, #8]
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b096      	sub	sp, #88	; 0x58
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80093fe:	f107 030c 	add.w	r3, r7, #12
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	4618      	mov	r0, r3
 8009406:	f7ff ffe0 	bl	80093ca <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800940a:	e009      	b.n	8009420 <f_puts+0x2c>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	1c5a      	adds	r2, r3, #1
 8009410:	607a      	str	r2, [r7, #4]
 8009412:	781a      	ldrb	r2, [r3, #0]
 8009414:	f107 030c 	add.w	r3, r7, #12
 8009418:	4611      	mov	r1, r2
 800941a:	4618      	mov	r0, r3
 800941c:	f7ff ff73 	bl	8009306 <putc_bfd>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1f1      	bne.n	800940c <f_puts+0x18>
	return putc_flush(&pb);
 8009428:	f107 030c 	add.w	r3, r7, #12
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff ffa7 	bl	8009380 <putc_flush>
 8009432:	4603      	mov	r3, r0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3758      	adds	r7, #88	; 0x58
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	4613      	mov	r3, r2
 8009448:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800944a:	2301      	movs	r3, #1
 800944c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009452:	4b1f      	ldr	r3, [pc, #124]	; (80094d0 <FATFS_LinkDriverEx+0x94>)
 8009454:	7a5b      	ldrb	r3, [r3, #9]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	d131      	bne.n	80094c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800945c:	4b1c      	ldr	r3, [pc, #112]	; (80094d0 <FATFS_LinkDriverEx+0x94>)
 800945e:	7a5b      	ldrb	r3, [r3, #9]
 8009460:	b2db      	uxtb	r3, r3
 8009462:	461a      	mov	r2, r3
 8009464:	4b1a      	ldr	r3, [pc, #104]	; (80094d0 <FATFS_LinkDriverEx+0x94>)
 8009466:	2100      	movs	r1, #0
 8009468:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800946a:	4b19      	ldr	r3, [pc, #100]	; (80094d0 <FATFS_LinkDriverEx+0x94>)
 800946c:	7a5b      	ldrb	r3, [r3, #9]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	4a17      	ldr	r2, [pc, #92]	; (80094d0 <FATFS_LinkDriverEx+0x94>)
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800947a:	4b15      	ldr	r3, [pc, #84]	; (80094d0 <FATFS_LinkDriverEx+0x94>)
 800947c:	7a5b      	ldrb	r3, [r3, #9]
 800947e:	b2db      	uxtb	r3, r3
 8009480:	461a      	mov	r2, r3
 8009482:	4b13      	ldr	r3, [pc, #76]	; (80094d0 <FATFS_LinkDriverEx+0x94>)
 8009484:	4413      	add	r3, r2
 8009486:	79fa      	ldrb	r2, [r7, #7]
 8009488:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800948a:	4b11      	ldr	r3, [pc, #68]	; (80094d0 <FATFS_LinkDriverEx+0x94>)
 800948c:	7a5b      	ldrb	r3, [r3, #9]
 800948e:	b2db      	uxtb	r3, r3
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	b2d1      	uxtb	r1, r2
 8009494:	4a0e      	ldr	r2, [pc, #56]	; (80094d0 <FATFS_LinkDriverEx+0x94>)
 8009496:	7251      	strb	r1, [r2, #9]
 8009498:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800949a:	7dbb      	ldrb	r3, [r7, #22]
 800949c:	3330      	adds	r3, #48	; 0x30
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	3301      	adds	r3, #1
 80094a8:	223a      	movs	r2, #58	; 0x3a
 80094aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	3302      	adds	r3, #2
 80094b0:	222f      	movs	r2, #47	; 0x2f
 80094b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	3303      	adds	r3, #3
 80094b8:	2200      	movs	r2, #0
 80094ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80094bc:	2300      	movs	r3, #0
 80094be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	20002438 	.word	0x20002438

080094d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80094de:	2200      	movs	r2, #0
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7ff ffaa 	bl	800943c <FATFS_LinkDriverEx>
 80094e8:	4603      	mov	r3, r0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	4603      	mov	r3, r0
 80094fc:	6039      	str	r1, [r7, #0]
 80094fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009500:	88fb      	ldrh	r3, [r7, #6]
 8009502:	2b7f      	cmp	r3, #127	; 0x7f
 8009504:	d802      	bhi.n	800950c <ff_convert+0x18>
		c = chr;
 8009506:	88fb      	ldrh	r3, [r7, #6]
 8009508:	81fb      	strh	r3, [r7, #14]
 800950a:	e025      	b.n	8009558 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00b      	beq.n	800952a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009512:	88fb      	ldrh	r3, [r7, #6]
 8009514:	2bff      	cmp	r3, #255	; 0xff
 8009516:	d805      	bhi.n	8009524 <ff_convert+0x30>
 8009518:	88fb      	ldrh	r3, [r7, #6]
 800951a:	3b80      	subs	r3, #128	; 0x80
 800951c:	4a12      	ldr	r2, [pc, #72]	; (8009568 <ff_convert+0x74>)
 800951e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009522:	e000      	b.n	8009526 <ff_convert+0x32>
 8009524:	2300      	movs	r3, #0
 8009526:	81fb      	strh	r3, [r7, #14]
 8009528:	e016      	b.n	8009558 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800952a:	2300      	movs	r3, #0
 800952c:	81fb      	strh	r3, [r7, #14]
 800952e:	e009      	b.n	8009544 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009530:	89fb      	ldrh	r3, [r7, #14]
 8009532:	4a0d      	ldr	r2, [pc, #52]	; (8009568 <ff_convert+0x74>)
 8009534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009538:	88fa      	ldrh	r2, [r7, #6]
 800953a:	429a      	cmp	r2, r3
 800953c:	d006      	beq.n	800954c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800953e:	89fb      	ldrh	r3, [r7, #14]
 8009540:	3301      	adds	r3, #1
 8009542:	81fb      	strh	r3, [r7, #14]
 8009544:	89fb      	ldrh	r3, [r7, #14]
 8009546:	2b7f      	cmp	r3, #127	; 0x7f
 8009548:	d9f2      	bls.n	8009530 <ff_convert+0x3c>
 800954a:	e000      	b.n	800954e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800954c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800954e:	89fb      	ldrh	r3, [r7, #14]
 8009550:	3380      	adds	r3, #128	; 0x80
 8009552:	b29b      	uxth	r3, r3
 8009554:	b2db      	uxtb	r3, r3
 8009556:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009558:	89fb      	ldrh	r3, [r7, #14]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	0800a720 	.word	0x0800a720

0800956c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009576:	88fb      	ldrh	r3, [r7, #6]
 8009578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800957c:	d201      	bcs.n	8009582 <ff_wtoupper+0x16>
 800957e:	4b3e      	ldr	r3, [pc, #248]	; (8009678 <ff_wtoupper+0x10c>)
 8009580:	e000      	b.n	8009584 <ff_wtoupper+0x18>
 8009582:	4b3e      	ldr	r3, [pc, #248]	; (800967c <ff_wtoupper+0x110>)
 8009584:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	1c9a      	adds	r2, r3, #2
 800958a:	617a      	str	r2, [r7, #20]
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009590:	8a7b      	ldrh	r3, [r7, #18]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d068      	beq.n	8009668 <ff_wtoupper+0xfc>
 8009596:	88fa      	ldrh	r2, [r7, #6]
 8009598:	8a7b      	ldrh	r3, [r7, #18]
 800959a:	429a      	cmp	r2, r3
 800959c:	d364      	bcc.n	8009668 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	1c9a      	adds	r2, r3, #2
 80095a2:	617a      	str	r2, [r7, #20]
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	823b      	strh	r3, [r7, #16]
 80095a8:	8a3b      	ldrh	r3, [r7, #16]
 80095aa:	0a1b      	lsrs	r3, r3, #8
 80095ac:	81fb      	strh	r3, [r7, #14]
 80095ae:	8a3b      	ldrh	r3, [r7, #16]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80095b4:	88fa      	ldrh	r2, [r7, #6]
 80095b6:	8a79      	ldrh	r1, [r7, #18]
 80095b8:	8a3b      	ldrh	r3, [r7, #16]
 80095ba:	440b      	add	r3, r1
 80095bc:	429a      	cmp	r2, r3
 80095be:	da49      	bge.n	8009654 <ff_wtoupper+0xe8>
			switch (cmd) {
 80095c0:	89fb      	ldrh	r3, [r7, #14]
 80095c2:	2b08      	cmp	r3, #8
 80095c4:	d84f      	bhi.n	8009666 <ff_wtoupper+0xfa>
 80095c6:	a201      	add	r2, pc, #4	; (adr r2, 80095cc <ff_wtoupper+0x60>)
 80095c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095cc:	080095f1 	.word	0x080095f1
 80095d0:	08009603 	.word	0x08009603
 80095d4:	08009619 	.word	0x08009619
 80095d8:	08009621 	.word	0x08009621
 80095dc:	08009629 	.word	0x08009629
 80095e0:	08009631 	.word	0x08009631
 80095e4:	08009639 	.word	0x08009639
 80095e8:	08009641 	.word	0x08009641
 80095ec:	08009649 	.word	0x08009649
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80095f0:	88fa      	ldrh	r2, [r7, #6]
 80095f2:	8a7b      	ldrh	r3, [r7, #18]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	005b      	lsls	r3, r3, #1
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	4413      	add	r3, r2
 80095fc:	881b      	ldrh	r3, [r3, #0]
 80095fe:	80fb      	strh	r3, [r7, #6]
 8009600:	e027      	b.n	8009652 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009602:	88fa      	ldrh	r2, [r7, #6]
 8009604:	8a7b      	ldrh	r3, [r7, #18]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	b29b      	uxth	r3, r3
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	b29b      	uxth	r3, r3
 8009610:	88fa      	ldrh	r2, [r7, #6]
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	80fb      	strh	r3, [r7, #6]
 8009616:	e01c      	b.n	8009652 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009618:	88fb      	ldrh	r3, [r7, #6]
 800961a:	3b10      	subs	r3, #16
 800961c:	80fb      	strh	r3, [r7, #6]
 800961e:	e018      	b.n	8009652 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009620:	88fb      	ldrh	r3, [r7, #6]
 8009622:	3b20      	subs	r3, #32
 8009624:	80fb      	strh	r3, [r7, #6]
 8009626:	e014      	b.n	8009652 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009628:	88fb      	ldrh	r3, [r7, #6]
 800962a:	3b30      	subs	r3, #48	; 0x30
 800962c:	80fb      	strh	r3, [r7, #6]
 800962e:	e010      	b.n	8009652 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009630:	88fb      	ldrh	r3, [r7, #6]
 8009632:	3b1a      	subs	r3, #26
 8009634:	80fb      	strh	r3, [r7, #6]
 8009636:	e00c      	b.n	8009652 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009638:	88fb      	ldrh	r3, [r7, #6]
 800963a:	3308      	adds	r3, #8
 800963c:	80fb      	strh	r3, [r7, #6]
 800963e:	e008      	b.n	8009652 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009640:	88fb      	ldrh	r3, [r7, #6]
 8009642:	3b50      	subs	r3, #80	; 0x50
 8009644:	80fb      	strh	r3, [r7, #6]
 8009646:	e004      	b.n	8009652 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009648:	88fb      	ldrh	r3, [r7, #6]
 800964a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800964e:	80fb      	strh	r3, [r7, #6]
 8009650:	bf00      	nop
			}
			break;
 8009652:	e008      	b.n	8009666 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009654:	89fb      	ldrh	r3, [r7, #14]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d195      	bne.n	8009586 <ff_wtoupper+0x1a>
 800965a:	8a3b      	ldrh	r3, [r7, #16]
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	4413      	add	r3, r2
 8009662:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009664:	e78f      	b.n	8009586 <ff_wtoupper+0x1a>
			break;
 8009666:	bf00      	nop
	}

	return chr;
 8009668:	88fb      	ldrh	r3, [r7, #6]
}
 800966a:	4618      	mov	r0, r3
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	0800a820 	.word	0x0800a820
 800967c:	0800aa14 	.word	0x0800aa14

08009680 <__errno>:
 8009680:	4b01      	ldr	r3, [pc, #4]	; (8009688 <__errno+0x8>)
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	20000020 	.word	0x20000020

0800968c <__sflush_r>:
 800968c:	898a      	ldrh	r2, [r1, #12]
 800968e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009692:	4605      	mov	r5, r0
 8009694:	0710      	lsls	r0, r2, #28
 8009696:	460c      	mov	r4, r1
 8009698:	d458      	bmi.n	800974c <__sflush_r+0xc0>
 800969a:	684b      	ldr	r3, [r1, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	dc05      	bgt.n	80096ac <__sflush_r+0x20>
 80096a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	dc02      	bgt.n	80096ac <__sflush_r+0x20>
 80096a6:	2000      	movs	r0, #0
 80096a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096ae:	2e00      	cmp	r6, #0
 80096b0:	d0f9      	beq.n	80096a6 <__sflush_r+0x1a>
 80096b2:	2300      	movs	r3, #0
 80096b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096b8:	682f      	ldr	r7, [r5, #0]
 80096ba:	602b      	str	r3, [r5, #0]
 80096bc:	d032      	beq.n	8009724 <__sflush_r+0x98>
 80096be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	075a      	lsls	r2, r3, #29
 80096c4:	d505      	bpl.n	80096d2 <__sflush_r+0x46>
 80096c6:	6863      	ldr	r3, [r4, #4]
 80096c8:	1ac0      	subs	r0, r0, r3
 80096ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096cc:	b10b      	cbz	r3, 80096d2 <__sflush_r+0x46>
 80096ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096d0:	1ac0      	subs	r0, r0, r3
 80096d2:	2300      	movs	r3, #0
 80096d4:	4602      	mov	r2, r0
 80096d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096d8:	6a21      	ldr	r1, [r4, #32]
 80096da:	4628      	mov	r0, r5
 80096dc:	47b0      	blx	r6
 80096de:	1c43      	adds	r3, r0, #1
 80096e0:	89a3      	ldrh	r3, [r4, #12]
 80096e2:	d106      	bne.n	80096f2 <__sflush_r+0x66>
 80096e4:	6829      	ldr	r1, [r5, #0]
 80096e6:	291d      	cmp	r1, #29
 80096e8:	d82c      	bhi.n	8009744 <__sflush_r+0xb8>
 80096ea:	4a2a      	ldr	r2, [pc, #168]	; (8009794 <__sflush_r+0x108>)
 80096ec:	40ca      	lsrs	r2, r1
 80096ee:	07d6      	lsls	r6, r2, #31
 80096f0:	d528      	bpl.n	8009744 <__sflush_r+0xb8>
 80096f2:	2200      	movs	r2, #0
 80096f4:	6062      	str	r2, [r4, #4]
 80096f6:	04d9      	lsls	r1, r3, #19
 80096f8:	6922      	ldr	r2, [r4, #16]
 80096fa:	6022      	str	r2, [r4, #0]
 80096fc:	d504      	bpl.n	8009708 <__sflush_r+0x7c>
 80096fe:	1c42      	adds	r2, r0, #1
 8009700:	d101      	bne.n	8009706 <__sflush_r+0x7a>
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	b903      	cbnz	r3, 8009708 <__sflush_r+0x7c>
 8009706:	6560      	str	r0, [r4, #84]	; 0x54
 8009708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800970a:	602f      	str	r7, [r5, #0]
 800970c:	2900      	cmp	r1, #0
 800970e:	d0ca      	beq.n	80096a6 <__sflush_r+0x1a>
 8009710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009714:	4299      	cmp	r1, r3
 8009716:	d002      	beq.n	800971e <__sflush_r+0x92>
 8009718:	4628      	mov	r0, r5
 800971a:	f000 f9b1 	bl	8009a80 <_free_r>
 800971e:	2000      	movs	r0, #0
 8009720:	6360      	str	r0, [r4, #52]	; 0x34
 8009722:	e7c1      	b.n	80096a8 <__sflush_r+0x1c>
 8009724:	6a21      	ldr	r1, [r4, #32]
 8009726:	2301      	movs	r3, #1
 8009728:	4628      	mov	r0, r5
 800972a:	47b0      	blx	r6
 800972c:	1c41      	adds	r1, r0, #1
 800972e:	d1c7      	bne.n	80096c0 <__sflush_r+0x34>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d0c4      	beq.n	80096c0 <__sflush_r+0x34>
 8009736:	2b1d      	cmp	r3, #29
 8009738:	d001      	beq.n	800973e <__sflush_r+0xb2>
 800973a:	2b16      	cmp	r3, #22
 800973c:	d101      	bne.n	8009742 <__sflush_r+0xb6>
 800973e:	602f      	str	r7, [r5, #0]
 8009740:	e7b1      	b.n	80096a6 <__sflush_r+0x1a>
 8009742:	89a3      	ldrh	r3, [r4, #12]
 8009744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009748:	81a3      	strh	r3, [r4, #12]
 800974a:	e7ad      	b.n	80096a8 <__sflush_r+0x1c>
 800974c:	690f      	ldr	r7, [r1, #16]
 800974e:	2f00      	cmp	r7, #0
 8009750:	d0a9      	beq.n	80096a6 <__sflush_r+0x1a>
 8009752:	0793      	lsls	r3, r2, #30
 8009754:	680e      	ldr	r6, [r1, #0]
 8009756:	bf08      	it	eq
 8009758:	694b      	ldreq	r3, [r1, #20]
 800975a:	600f      	str	r7, [r1, #0]
 800975c:	bf18      	it	ne
 800975e:	2300      	movne	r3, #0
 8009760:	eba6 0807 	sub.w	r8, r6, r7
 8009764:	608b      	str	r3, [r1, #8]
 8009766:	f1b8 0f00 	cmp.w	r8, #0
 800976a:	dd9c      	ble.n	80096a6 <__sflush_r+0x1a>
 800976c:	6a21      	ldr	r1, [r4, #32]
 800976e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009770:	4643      	mov	r3, r8
 8009772:	463a      	mov	r2, r7
 8009774:	4628      	mov	r0, r5
 8009776:	47b0      	blx	r6
 8009778:	2800      	cmp	r0, #0
 800977a:	dc06      	bgt.n	800978a <__sflush_r+0xfe>
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009782:	81a3      	strh	r3, [r4, #12]
 8009784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009788:	e78e      	b.n	80096a8 <__sflush_r+0x1c>
 800978a:	4407      	add	r7, r0
 800978c:	eba8 0800 	sub.w	r8, r8, r0
 8009790:	e7e9      	b.n	8009766 <__sflush_r+0xda>
 8009792:	bf00      	nop
 8009794:	20400001 	.word	0x20400001

08009798 <_fflush_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	690b      	ldr	r3, [r1, #16]
 800979c:	4605      	mov	r5, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	b913      	cbnz	r3, 80097a8 <_fflush_r+0x10>
 80097a2:	2500      	movs	r5, #0
 80097a4:	4628      	mov	r0, r5
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	b118      	cbz	r0, 80097b2 <_fflush_r+0x1a>
 80097aa:	6983      	ldr	r3, [r0, #24]
 80097ac:	b90b      	cbnz	r3, 80097b2 <_fflush_r+0x1a>
 80097ae:	f000 f899 	bl	80098e4 <__sinit>
 80097b2:	4b14      	ldr	r3, [pc, #80]	; (8009804 <_fflush_r+0x6c>)
 80097b4:	429c      	cmp	r4, r3
 80097b6:	d11b      	bne.n	80097f0 <_fflush_r+0x58>
 80097b8:	686c      	ldr	r4, [r5, #4]
 80097ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d0ef      	beq.n	80097a2 <_fflush_r+0xa>
 80097c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097c4:	07d0      	lsls	r0, r2, #31
 80097c6:	d404      	bmi.n	80097d2 <_fflush_r+0x3a>
 80097c8:	0599      	lsls	r1, r3, #22
 80097ca:	d402      	bmi.n	80097d2 <_fflush_r+0x3a>
 80097cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ce:	f000 f94c 	bl	8009a6a <__retarget_lock_acquire_recursive>
 80097d2:	4628      	mov	r0, r5
 80097d4:	4621      	mov	r1, r4
 80097d6:	f7ff ff59 	bl	800968c <__sflush_r>
 80097da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097dc:	07da      	lsls	r2, r3, #31
 80097de:	4605      	mov	r5, r0
 80097e0:	d4e0      	bmi.n	80097a4 <_fflush_r+0xc>
 80097e2:	89a3      	ldrh	r3, [r4, #12]
 80097e4:	059b      	lsls	r3, r3, #22
 80097e6:	d4dd      	bmi.n	80097a4 <_fflush_r+0xc>
 80097e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ea:	f000 f93f 	bl	8009a6c <__retarget_lock_release_recursive>
 80097ee:	e7d9      	b.n	80097a4 <_fflush_r+0xc>
 80097f0:	4b05      	ldr	r3, [pc, #20]	; (8009808 <_fflush_r+0x70>)
 80097f2:	429c      	cmp	r4, r3
 80097f4:	d101      	bne.n	80097fa <_fflush_r+0x62>
 80097f6:	68ac      	ldr	r4, [r5, #8]
 80097f8:	e7df      	b.n	80097ba <_fflush_r+0x22>
 80097fa:	4b04      	ldr	r3, [pc, #16]	; (800980c <_fflush_r+0x74>)
 80097fc:	429c      	cmp	r4, r3
 80097fe:	bf08      	it	eq
 8009800:	68ec      	ldreq	r4, [r5, #12]
 8009802:	e7da      	b.n	80097ba <_fflush_r+0x22>
 8009804:	0800aaf0 	.word	0x0800aaf0
 8009808:	0800ab10 	.word	0x0800ab10
 800980c:	0800aad0 	.word	0x0800aad0

08009810 <fflush>:
 8009810:	4601      	mov	r1, r0
 8009812:	b920      	cbnz	r0, 800981e <fflush+0xe>
 8009814:	4b04      	ldr	r3, [pc, #16]	; (8009828 <fflush+0x18>)
 8009816:	4905      	ldr	r1, [pc, #20]	; (800982c <fflush+0x1c>)
 8009818:	6818      	ldr	r0, [r3, #0]
 800981a:	f000 b8e1 	b.w	80099e0 <_fwalk_reent>
 800981e:	4b04      	ldr	r3, [pc, #16]	; (8009830 <fflush+0x20>)
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	f7ff bfb9 	b.w	8009798 <_fflush_r>
 8009826:	bf00      	nop
 8009828:	0800ab30 	.word	0x0800ab30
 800982c:	08009799 	.word	0x08009799
 8009830:	20000020 	.word	0x20000020

08009834 <std>:
 8009834:	2300      	movs	r3, #0
 8009836:	b510      	push	{r4, lr}
 8009838:	4604      	mov	r4, r0
 800983a:	e9c0 3300 	strd	r3, r3, [r0]
 800983e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009842:	6083      	str	r3, [r0, #8]
 8009844:	8181      	strh	r1, [r0, #12]
 8009846:	6643      	str	r3, [r0, #100]	; 0x64
 8009848:	81c2      	strh	r2, [r0, #14]
 800984a:	6183      	str	r3, [r0, #24]
 800984c:	4619      	mov	r1, r3
 800984e:	2208      	movs	r2, #8
 8009850:	305c      	adds	r0, #92	; 0x5c
 8009852:	f000 f90c 	bl	8009a6e <memset>
 8009856:	4b05      	ldr	r3, [pc, #20]	; (800986c <std+0x38>)
 8009858:	6263      	str	r3, [r4, #36]	; 0x24
 800985a:	4b05      	ldr	r3, [pc, #20]	; (8009870 <std+0x3c>)
 800985c:	62a3      	str	r3, [r4, #40]	; 0x28
 800985e:	4b05      	ldr	r3, [pc, #20]	; (8009874 <std+0x40>)
 8009860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009862:	4b05      	ldr	r3, [pc, #20]	; (8009878 <std+0x44>)
 8009864:	6224      	str	r4, [r4, #32]
 8009866:	6323      	str	r3, [r4, #48]	; 0x30
 8009868:	bd10      	pop	{r4, pc}
 800986a:	bf00      	nop
 800986c:	08009bf5 	.word	0x08009bf5
 8009870:	08009c17 	.word	0x08009c17
 8009874:	08009c4f 	.word	0x08009c4f
 8009878:	08009c73 	.word	0x08009c73

0800987c <_cleanup_r>:
 800987c:	4901      	ldr	r1, [pc, #4]	; (8009884 <_cleanup_r+0x8>)
 800987e:	f000 b8af 	b.w	80099e0 <_fwalk_reent>
 8009882:	bf00      	nop
 8009884:	08009799 	.word	0x08009799

08009888 <__sfmoreglue>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	1e4a      	subs	r2, r1, #1
 800988c:	2568      	movs	r5, #104	; 0x68
 800988e:	4355      	muls	r5, r2
 8009890:	460e      	mov	r6, r1
 8009892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009896:	f000 f943 	bl	8009b20 <_malloc_r>
 800989a:	4604      	mov	r4, r0
 800989c:	b140      	cbz	r0, 80098b0 <__sfmoreglue+0x28>
 800989e:	2100      	movs	r1, #0
 80098a0:	e9c0 1600 	strd	r1, r6, [r0]
 80098a4:	300c      	adds	r0, #12
 80098a6:	60a0      	str	r0, [r4, #8]
 80098a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098ac:	f000 f8df 	bl	8009a6e <memset>
 80098b0:	4620      	mov	r0, r4
 80098b2:	bd70      	pop	{r4, r5, r6, pc}

080098b4 <__sfp_lock_acquire>:
 80098b4:	4801      	ldr	r0, [pc, #4]	; (80098bc <__sfp_lock_acquire+0x8>)
 80098b6:	f000 b8d8 	b.w	8009a6a <__retarget_lock_acquire_recursive>
 80098ba:	bf00      	nop
 80098bc:	200046a8 	.word	0x200046a8

080098c0 <__sfp_lock_release>:
 80098c0:	4801      	ldr	r0, [pc, #4]	; (80098c8 <__sfp_lock_release+0x8>)
 80098c2:	f000 b8d3 	b.w	8009a6c <__retarget_lock_release_recursive>
 80098c6:	bf00      	nop
 80098c8:	200046a8 	.word	0x200046a8

080098cc <__sinit_lock_acquire>:
 80098cc:	4801      	ldr	r0, [pc, #4]	; (80098d4 <__sinit_lock_acquire+0x8>)
 80098ce:	f000 b8cc 	b.w	8009a6a <__retarget_lock_acquire_recursive>
 80098d2:	bf00      	nop
 80098d4:	200046a3 	.word	0x200046a3

080098d8 <__sinit_lock_release>:
 80098d8:	4801      	ldr	r0, [pc, #4]	; (80098e0 <__sinit_lock_release+0x8>)
 80098da:	f000 b8c7 	b.w	8009a6c <__retarget_lock_release_recursive>
 80098de:	bf00      	nop
 80098e0:	200046a3 	.word	0x200046a3

080098e4 <__sinit>:
 80098e4:	b510      	push	{r4, lr}
 80098e6:	4604      	mov	r4, r0
 80098e8:	f7ff fff0 	bl	80098cc <__sinit_lock_acquire>
 80098ec:	69a3      	ldr	r3, [r4, #24]
 80098ee:	b11b      	cbz	r3, 80098f8 <__sinit+0x14>
 80098f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f4:	f7ff bff0 	b.w	80098d8 <__sinit_lock_release>
 80098f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098fc:	6523      	str	r3, [r4, #80]	; 0x50
 80098fe:	4b13      	ldr	r3, [pc, #76]	; (800994c <__sinit+0x68>)
 8009900:	4a13      	ldr	r2, [pc, #76]	; (8009950 <__sinit+0x6c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	62a2      	str	r2, [r4, #40]	; 0x28
 8009906:	42a3      	cmp	r3, r4
 8009908:	bf04      	itt	eq
 800990a:	2301      	moveq	r3, #1
 800990c:	61a3      	streq	r3, [r4, #24]
 800990e:	4620      	mov	r0, r4
 8009910:	f000 f820 	bl	8009954 <__sfp>
 8009914:	6060      	str	r0, [r4, #4]
 8009916:	4620      	mov	r0, r4
 8009918:	f000 f81c 	bl	8009954 <__sfp>
 800991c:	60a0      	str	r0, [r4, #8]
 800991e:	4620      	mov	r0, r4
 8009920:	f000 f818 	bl	8009954 <__sfp>
 8009924:	2200      	movs	r2, #0
 8009926:	60e0      	str	r0, [r4, #12]
 8009928:	2104      	movs	r1, #4
 800992a:	6860      	ldr	r0, [r4, #4]
 800992c:	f7ff ff82 	bl	8009834 <std>
 8009930:	68a0      	ldr	r0, [r4, #8]
 8009932:	2201      	movs	r2, #1
 8009934:	2109      	movs	r1, #9
 8009936:	f7ff ff7d 	bl	8009834 <std>
 800993a:	68e0      	ldr	r0, [r4, #12]
 800993c:	2202      	movs	r2, #2
 800993e:	2112      	movs	r1, #18
 8009940:	f7ff ff78 	bl	8009834 <std>
 8009944:	2301      	movs	r3, #1
 8009946:	61a3      	str	r3, [r4, #24]
 8009948:	e7d2      	b.n	80098f0 <__sinit+0xc>
 800994a:	bf00      	nop
 800994c:	0800ab30 	.word	0x0800ab30
 8009950:	0800987d 	.word	0x0800987d

08009954 <__sfp>:
 8009954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009956:	4607      	mov	r7, r0
 8009958:	f7ff ffac 	bl	80098b4 <__sfp_lock_acquire>
 800995c:	4b1e      	ldr	r3, [pc, #120]	; (80099d8 <__sfp+0x84>)
 800995e:	681e      	ldr	r6, [r3, #0]
 8009960:	69b3      	ldr	r3, [r6, #24]
 8009962:	b913      	cbnz	r3, 800996a <__sfp+0x16>
 8009964:	4630      	mov	r0, r6
 8009966:	f7ff ffbd 	bl	80098e4 <__sinit>
 800996a:	3648      	adds	r6, #72	; 0x48
 800996c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009970:	3b01      	subs	r3, #1
 8009972:	d503      	bpl.n	800997c <__sfp+0x28>
 8009974:	6833      	ldr	r3, [r6, #0]
 8009976:	b30b      	cbz	r3, 80099bc <__sfp+0x68>
 8009978:	6836      	ldr	r6, [r6, #0]
 800997a:	e7f7      	b.n	800996c <__sfp+0x18>
 800997c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009980:	b9d5      	cbnz	r5, 80099b8 <__sfp+0x64>
 8009982:	4b16      	ldr	r3, [pc, #88]	; (80099dc <__sfp+0x88>)
 8009984:	60e3      	str	r3, [r4, #12]
 8009986:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800998a:	6665      	str	r5, [r4, #100]	; 0x64
 800998c:	f000 f86c 	bl	8009a68 <__retarget_lock_init_recursive>
 8009990:	f7ff ff96 	bl	80098c0 <__sfp_lock_release>
 8009994:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009998:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800999c:	6025      	str	r5, [r4, #0]
 800999e:	61a5      	str	r5, [r4, #24]
 80099a0:	2208      	movs	r2, #8
 80099a2:	4629      	mov	r1, r5
 80099a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099a8:	f000 f861 	bl	8009a6e <memset>
 80099ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099b4:	4620      	mov	r0, r4
 80099b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b8:	3468      	adds	r4, #104	; 0x68
 80099ba:	e7d9      	b.n	8009970 <__sfp+0x1c>
 80099bc:	2104      	movs	r1, #4
 80099be:	4638      	mov	r0, r7
 80099c0:	f7ff ff62 	bl	8009888 <__sfmoreglue>
 80099c4:	4604      	mov	r4, r0
 80099c6:	6030      	str	r0, [r6, #0]
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d1d5      	bne.n	8009978 <__sfp+0x24>
 80099cc:	f7ff ff78 	bl	80098c0 <__sfp_lock_release>
 80099d0:	230c      	movs	r3, #12
 80099d2:	603b      	str	r3, [r7, #0]
 80099d4:	e7ee      	b.n	80099b4 <__sfp+0x60>
 80099d6:	bf00      	nop
 80099d8:	0800ab30 	.word	0x0800ab30
 80099dc:	ffff0001 	.word	0xffff0001

080099e0 <_fwalk_reent>:
 80099e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e4:	4606      	mov	r6, r0
 80099e6:	4688      	mov	r8, r1
 80099e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099ec:	2700      	movs	r7, #0
 80099ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099f2:	f1b9 0901 	subs.w	r9, r9, #1
 80099f6:	d505      	bpl.n	8009a04 <_fwalk_reent+0x24>
 80099f8:	6824      	ldr	r4, [r4, #0]
 80099fa:	2c00      	cmp	r4, #0
 80099fc:	d1f7      	bne.n	80099ee <_fwalk_reent+0xe>
 80099fe:	4638      	mov	r0, r7
 8009a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a04:	89ab      	ldrh	r3, [r5, #12]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d907      	bls.n	8009a1a <_fwalk_reent+0x3a>
 8009a0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	d003      	beq.n	8009a1a <_fwalk_reent+0x3a>
 8009a12:	4629      	mov	r1, r5
 8009a14:	4630      	mov	r0, r6
 8009a16:	47c0      	blx	r8
 8009a18:	4307      	orrs	r7, r0
 8009a1a:	3568      	adds	r5, #104	; 0x68
 8009a1c:	e7e9      	b.n	80099f2 <_fwalk_reent+0x12>
	...

08009a20 <__libc_init_array>:
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	4d0d      	ldr	r5, [pc, #52]	; (8009a58 <__libc_init_array+0x38>)
 8009a24:	4c0d      	ldr	r4, [pc, #52]	; (8009a5c <__libc_init_array+0x3c>)
 8009a26:	1b64      	subs	r4, r4, r5
 8009a28:	10a4      	asrs	r4, r4, #2
 8009a2a:	2600      	movs	r6, #0
 8009a2c:	42a6      	cmp	r6, r4
 8009a2e:	d109      	bne.n	8009a44 <__libc_init_array+0x24>
 8009a30:	4d0b      	ldr	r5, [pc, #44]	; (8009a60 <__libc_init_array+0x40>)
 8009a32:	4c0c      	ldr	r4, [pc, #48]	; (8009a64 <__libc_init_array+0x44>)
 8009a34:	f000 fcf4 	bl	800a420 <_init>
 8009a38:	1b64      	subs	r4, r4, r5
 8009a3a:	10a4      	asrs	r4, r4, #2
 8009a3c:	2600      	movs	r6, #0
 8009a3e:	42a6      	cmp	r6, r4
 8009a40:	d105      	bne.n	8009a4e <__libc_init_array+0x2e>
 8009a42:	bd70      	pop	{r4, r5, r6, pc}
 8009a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a48:	4798      	blx	r3
 8009a4a:	3601      	adds	r6, #1
 8009a4c:	e7ee      	b.n	8009a2c <__libc_init_array+0xc>
 8009a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a52:	4798      	blx	r3
 8009a54:	3601      	adds	r6, #1
 8009a56:	e7f2      	b.n	8009a3e <__libc_init_array+0x1e>
 8009a58:	0800ab70 	.word	0x0800ab70
 8009a5c:	0800ab70 	.word	0x0800ab70
 8009a60:	0800ab70 	.word	0x0800ab70
 8009a64:	0800ab74 	.word	0x0800ab74

08009a68 <__retarget_lock_init_recursive>:
 8009a68:	4770      	bx	lr

08009a6a <__retarget_lock_acquire_recursive>:
 8009a6a:	4770      	bx	lr

08009a6c <__retarget_lock_release_recursive>:
 8009a6c:	4770      	bx	lr

08009a6e <memset>:
 8009a6e:	4402      	add	r2, r0
 8009a70:	4603      	mov	r3, r0
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d100      	bne.n	8009a78 <memset+0xa>
 8009a76:	4770      	bx	lr
 8009a78:	f803 1b01 	strb.w	r1, [r3], #1
 8009a7c:	e7f9      	b.n	8009a72 <memset+0x4>
	...

08009a80 <_free_r>:
 8009a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a82:	2900      	cmp	r1, #0
 8009a84:	d048      	beq.n	8009b18 <_free_r+0x98>
 8009a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a8a:	9001      	str	r0, [sp, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8009a92:	bfb8      	it	lt
 8009a94:	18e4      	addlt	r4, r4, r3
 8009a96:	f000 f95f 	bl	8009d58 <__malloc_lock>
 8009a9a:	4a20      	ldr	r2, [pc, #128]	; (8009b1c <_free_r+0x9c>)
 8009a9c:	9801      	ldr	r0, [sp, #4]
 8009a9e:	6813      	ldr	r3, [r2, #0]
 8009aa0:	4615      	mov	r5, r2
 8009aa2:	b933      	cbnz	r3, 8009ab2 <_free_r+0x32>
 8009aa4:	6063      	str	r3, [r4, #4]
 8009aa6:	6014      	str	r4, [r2, #0]
 8009aa8:	b003      	add	sp, #12
 8009aaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009aae:	f000 b959 	b.w	8009d64 <__malloc_unlock>
 8009ab2:	42a3      	cmp	r3, r4
 8009ab4:	d90b      	bls.n	8009ace <_free_r+0x4e>
 8009ab6:	6821      	ldr	r1, [r4, #0]
 8009ab8:	1862      	adds	r2, r4, r1
 8009aba:	4293      	cmp	r3, r2
 8009abc:	bf04      	itt	eq
 8009abe:	681a      	ldreq	r2, [r3, #0]
 8009ac0:	685b      	ldreq	r3, [r3, #4]
 8009ac2:	6063      	str	r3, [r4, #4]
 8009ac4:	bf04      	itt	eq
 8009ac6:	1852      	addeq	r2, r2, r1
 8009ac8:	6022      	streq	r2, [r4, #0]
 8009aca:	602c      	str	r4, [r5, #0]
 8009acc:	e7ec      	b.n	8009aa8 <_free_r+0x28>
 8009ace:	461a      	mov	r2, r3
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	b10b      	cbz	r3, 8009ad8 <_free_r+0x58>
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	d9fa      	bls.n	8009ace <_free_r+0x4e>
 8009ad8:	6811      	ldr	r1, [r2, #0]
 8009ada:	1855      	adds	r5, r2, r1
 8009adc:	42a5      	cmp	r5, r4
 8009ade:	d10b      	bne.n	8009af8 <_free_r+0x78>
 8009ae0:	6824      	ldr	r4, [r4, #0]
 8009ae2:	4421      	add	r1, r4
 8009ae4:	1854      	adds	r4, r2, r1
 8009ae6:	42a3      	cmp	r3, r4
 8009ae8:	6011      	str	r1, [r2, #0]
 8009aea:	d1dd      	bne.n	8009aa8 <_free_r+0x28>
 8009aec:	681c      	ldr	r4, [r3, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	6053      	str	r3, [r2, #4]
 8009af2:	4421      	add	r1, r4
 8009af4:	6011      	str	r1, [r2, #0]
 8009af6:	e7d7      	b.n	8009aa8 <_free_r+0x28>
 8009af8:	d902      	bls.n	8009b00 <_free_r+0x80>
 8009afa:	230c      	movs	r3, #12
 8009afc:	6003      	str	r3, [r0, #0]
 8009afe:	e7d3      	b.n	8009aa8 <_free_r+0x28>
 8009b00:	6825      	ldr	r5, [r4, #0]
 8009b02:	1961      	adds	r1, r4, r5
 8009b04:	428b      	cmp	r3, r1
 8009b06:	bf04      	itt	eq
 8009b08:	6819      	ldreq	r1, [r3, #0]
 8009b0a:	685b      	ldreq	r3, [r3, #4]
 8009b0c:	6063      	str	r3, [r4, #4]
 8009b0e:	bf04      	itt	eq
 8009b10:	1949      	addeq	r1, r1, r5
 8009b12:	6021      	streq	r1, [r4, #0]
 8009b14:	6054      	str	r4, [r2, #4]
 8009b16:	e7c7      	b.n	8009aa8 <_free_r+0x28>
 8009b18:	b003      	add	sp, #12
 8009b1a:	bd30      	pop	{r4, r5, pc}
 8009b1c:	20002444 	.word	0x20002444

08009b20 <_malloc_r>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	1ccd      	adds	r5, r1, #3
 8009b24:	f025 0503 	bic.w	r5, r5, #3
 8009b28:	3508      	adds	r5, #8
 8009b2a:	2d0c      	cmp	r5, #12
 8009b2c:	bf38      	it	cc
 8009b2e:	250c      	movcc	r5, #12
 8009b30:	2d00      	cmp	r5, #0
 8009b32:	4606      	mov	r6, r0
 8009b34:	db01      	blt.n	8009b3a <_malloc_r+0x1a>
 8009b36:	42a9      	cmp	r1, r5
 8009b38:	d903      	bls.n	8009b42 <_malloc_r+0x22>
 8009b3a:	230c      	movs	r3, #12
 8009b3c:	6033      	str	r3, [r6, #0]
 8009b3e:	2000      	movs	r0, #0
 8009b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b42:	f000 f909 	bl	8009d58 <__malloc_lock>
 8009b46:	4921      	ldr	r1, [pc, #132]	; (8009bcc <_malloc_r+0xac>)
 8009b48:	680a      	ldr	r2, [r1, #0]
 8009b4a:	4614      	mov	r4, r2
 8009b4c:	b99c      	cbnz	r4, 8009b76 <_malloc_r+0x56>
 8009b4e:	4f20      	ldr	r7, [pc, #128]	; (8009bd0 <_malloc_r+0xb0>)
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	b923      	cbnz	r3, 8009b5e <_malloc_r+0x3e>
 8009b54:	4621      	mov	r1, r4
 8009b56:	4630      	mov	r0, r6
 8009b58:	f000 f83c 	bl	8009bd4 <_sbrk_r>
 8009b5c:	6038      	str	r0, [r7, #0]
 8009b5e:	4629      	mov	r1, r5
 8009b60:	4630      	mov	r0, r6
 8009b62:	f000 f837 	bl	8009bd4 <_sbrk_r>
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	d123      	bne.n	8009bb2 <_malloc_r+0x92>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	6033      	str	r3, [r6, #0]
 8009b6e:	4630      	mov	r0, r6
 8009b70:	f000 f8f8 	bl	8009d64 <__malloc_unlock>
 8009b74:	e7e3      	b.n	8009b3e <_malloc_r+0x1e>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	1b5b      	subs	r3, r3, r5
 8009b7a:	d417      	bmi.n	8009bac <_malloc_r+0x8c>
 8009b7c:	2b0b      	cmp	r3, #11
 8009b7e:	d903      	bls.n	8009b88 <_malloc_r+0x68>
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	441c      	add	r4, r3
 8009b84:	6025      	str	r5, [r4, #0]
 8009b86:	e004      	b.n	8009b92 <_malloc_r+0x72>
 8009b88:	6863      	ldr	r3, [r4, #4]
 8009b8a:	42a2      	cmp	r2, r4
 8009b8c:	bf0c      	ite	eq
 8009b8e:	600b      	streq	r3, [r1, #0]
 8009b90:	6053      	strne	r3, [r2, #4]
 8009b92:	4630      	mov	r0, r6
 8009b94:	f000 f8e6 	bl	8009d64 <__malloc_unlock>
 8009b98:	f104 000b 	add.w	r0, r4, #11
 8009b9c:	1d23      	adds	r3, r4, #4
 8009b9e:	f020 0007 	bic.w	r0, r0, #7
 8009ba2:	1ac2      	subs	r2, r0, r3
 8009ba4:	d0cc      	beq.n	8009b40 <_malloc_r+0x20>
 8009ba6:	1a1b      	subs	r3, r3, r0
 8009ba8:	50a3      	str	r3, [r4, r2]
 8009baa:	e7c9      	b.n	8009b40 <_malloc_r+0x20>
 8009bac:	4622      	mov	r2, r4
 8009bae:	6864      	ldr	r4, [r4, #4]
 8009bb0:	e7cc      	b.n	8009b4c <_malloc_r+0x2c>
 8009bb2:	1cc4      	adds	r4, r0, #3
 8009bb4:	f024 0403 	bic.w	r4, r4, #3
 8009bb8:	42a0      	cmp	r0, r4
 8009bba:	d0e3      	beq.n	8009b84 <_malloc_r+0x64>
 8009bbc:	1a21      	subs	r1, r4, r0
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f000 f808 	bl	8009bd4 <_sbrk_r>
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	d1dd      	bne.n	8009b84 <_malloc_r+0x64>
 8009bc8:	e7cf      	b.n	8009b6a <_malloc_r+0x4a>
 8009bca:	bf00      	nop
 8009bcc:	20002444 	.word	0x20002444
 8009bd0:	20002448 	.word	0x20002448

08009bd4 <_sbrk_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4d06      	ldr	r5, [pc, #24]	; (8009bf0 <_sbrk_r+0x1c>)
 8009bd8:	2300      	movs	r3, #0
 8009bda:	4604      	mov	r4, r0
 8009bdc:	4608      	mov	r0, r1
 8009bde:	602b      	str	r3, [r5, #0]
 8009be0:	f7f7 fc8a 	bl	80014f8 <_sbrk>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	d102      	bne.n	8009bee <_sbrk_r+0x1a>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	b103      	cbz	r3, 8009bee <_sbrk_r+0x1a>
 8009bec:	6023      	str	r3, [r4, #0]
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	200046ac 	.word	0x200046ac

08009bf4 <__sread>:
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfc:	f000 fba8 	bl	800a350 <_read_r>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	bfab      	itete	ge
 8009c04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c06:	89a3      	ldrhlt	r3, [r4, #12]
 8009c08:	181b      	addge	r3, r3, r0
 8009c0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c0e:	bfac      	ite	ge
 8009c10:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c12:	81a3      	strhlt	r3, [r4, #12]
 8009c14:	bd10      	pop	{r4, pc}

08009c16 <__swrite>:
 8009c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1a:	461f      	mov	r7, r3
 8009c1c:	898b      	ldrh	r3, [r1, #12]
 8009c1e:	05db      	lsls	r3, r3, #23
 8009c20:	4605      	mov	r5, r0
 8009c22:	460c      	mov	r4, r1
 8009c24:	4616      	mov	r6, r2
 8009c26:	d505      	bpl.n	8009c34 <__swrite+0x1e>
 8009c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f000 f880 	bl	8009d34 <_lseek_r>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c3e:	81a3      	strh	r3, [r4, #12]
 8009c40:	4632      	mov	r2, r6
 8009c42:	463b      	mov	r3, r7
 8009c44:	4628      	mov	r0, r5
 8009c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c4a:	f000 b851 	b.w	8009cf0 <_write_r>

08009c4e <__sseek>:
 8009c4e:	b510      	push	{r4, lr}
 8009c50:	460c      	mov	r4, r1
 8009c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c56:	f000 f86d 	bl	8009d34 <_lseek_r>
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	bf15      	itete	ne
 8009c60:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c6a:	81a3      	strheq	r3, [r4, #12]
 8009c6c:	bf18      	it	ne
 8009c6e:	81a3      	strhne	r3, [r4, #12]
 8009c70:	bd10      	pop	{r4, pc}

08009c72 <__sclose>:
 8009c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c76:	f000 b84d 	b.w	8009d14 <_close_r>

08009c7a <_vsniprintf_r>:
 8009c7a:	b530      	push	{r4, r5, lr}
 8009c7c:	1e14      	subs	r4, r2, #0
 8009c7e:	4605      	mov	r5, r0
 8009c80:	b09b      	sub	sp, #108	; 0x6c
 8009c82:	4618      	mov	r0, r3
 8009c84:	da05      	bge.n	8009c92 <_vsniprintf_r+0x18>
 8009c86:	238b      	movs	r3, #139	; 0x8b
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c8e:	b01b      	add	sp, #108	; 0x6c
 8009c90:	bd30      	pop	{r4, r5, pc}
 8009c92:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c96:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009c9a:	bf14      	ite	ne
 8009c9c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009ca0:	4623      	moveq	r3, r4
 8009ca2:	9302      	str	r3, [sp, #8]
 8009ca4:	9305      	str	r3, [sp, #20]
 8009ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009caa:	9100      	str	r1, [sp, #0]
 8009cac:	9104      	str	r1, [sp, #16]
 8009cae:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009cb6:	4669      	mov	r1, sp
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f000 f8b5 	bl	8009e28 <_svfiprintf_r>
 8009cbe:	1c43      	adds	r3, r0, #1
 8009cc0:	bfbc      	itt	lt
 8009cc2:	238b      	movlt	r3, #139	; 0x8b
 8009cc4:	602b      	strlt	r3, [r5, #0]
 8009cc6:	2c00      	cmp	r4, #0
 8009cc8:	d0e1      	beq.n	8009c8e <_vsniprintf_r+0x14>
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	701a      	strb	r2, [r3, #0]
 8009cd0:	e7dd      	b.n	8009c8e <_vsniprintf_r+0x14>
	...

08009cd4 <vsniprintf>:
 8009cd4:	b507      	push	{r0, r1, r2, lr}
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	460a      	mov	r2, r1
 8009cdc:	4601      	mov	r1, r0
 8009cde:	4803      	ldr	r0, [pc, #12]	; (8009cec <vsniprintf+0x18>)
 8009ce0:	6800      	ldr	r0, [r0, #0]
 8009ce2:	f7ff ffca 	bl	8009c7a <_vsniprintf_r>
 8009ce6:	b003      	add	sp, #12
 8009ce8:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cec:	20000020 	.word	0x20000020

08009cf0 <_write_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d07      	ldr	r5, [pc, #28]	; (8009d10 <_write_r+0x20>)
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	4608      	mov	r0, r1
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	602a      	str	r2, [r5, #0]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f7f7 fbc5 	bl	800148e <_write>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	d102      	bne.n	8009d0e <_write_r+0x1e>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	b103      	cbz	r3, 8009d0e <_write_r+0x1e>
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	200046ac 	.word	0x200046ac

08009d14 <_close_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4d06      	ldr	r5, [pc, #24]	; (8009d30 <_close_r+0x1c>)
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	602b      	str	r3, [r5, #0]
 8009d20:	f7f7 fbd1 	bl	80014c6 <_close>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_close_r+0x1a>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_close_r+0x1a>
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	200046ac 	.word	0x200046ac

08009d34 <_lseek_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d07      	ldr	r5, [pc, #28]	; (8009d54 <_lseek_r+0x20>)
 8009d38:	4604      	mov	r4, r0
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	2200      	movs	r2, #0
 8009d40:	602a      	str	r2, [r5, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	f7f7 fbcb 	bl	80014de <_lseek>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_lseek_r+0x1e>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_lseek_r+0x1e>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	200046ac 	.word	0x200046ac

08009d58 <__malloc_lock>:
 8009d58:	4801      	ldr	r0, [pc, #4]	; (8009d60 <__malloc_lock+0x8>)
 8009d5a:	f7ff be86 	b.w	8009a6a <__retarget_lock_acquire_recursive>
 8009d5e:	bf00      	nop
 8009d60:	200046a4 	.word	0x200046a4

08009d64 <__malloc_unlock>:
 8009d64:	4801      	ldr	r0, [pc, #4]	; (8009d6c <__malloc_unlock+0x8>)
 8009d66:	f7ff be81 	b.w	8009a6c <__retarget_lock_release_recursive>
 8009d6a:	bf00      	nop
 8009d6c:	200046a4 	.word	0x200046a4

08009d70 <__ssputs_r>:
 8009d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d74:	688e      	ldr	r6, [r1, #8]
 8009d76:	429e      	cmp	r6, r3
 8009d78:	4682      	mov	sl, r0
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	4690      	mov	r8, r2
 8009d7e:	461f      	mov	r7, r3
 8009d80:	d838      	bhi.n	8009df4 <__ssputs_r+0x84>
 8009d82:	898a      	ldrh	r2, [r1, #12]
 8009d84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d88:	d032      	beq.n	8009df0 <__ssputs_r+0x80>
 8009d8a:	6825      	ldr	r5, [r4, #0]
 8009d8c:	6909      	ldr	r1, [r1, #16]
 8009d8e:	eba5 0901 	sub.w	r9, r5, r1
 8009d92:	6965      	ldr	r5, [r4, #20]
 8009d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	444b      	add	r3, r9
 8009da0:	106d      	asrs	r5, r5, #1
 8009da2:	429d      	cmp	r5, r3
 8009da4:	bf38      	it	cc
 8009da6:	461d      	movcc	r5, r3
 8009da8:	0553      	lsls	r3, r2, #21
 8009daa:	d531      	bpl.n	8009e10 <__ssputs_r+0xa0>
 8009dac:	4629      	mov	r1, r5
 8009dae:	f7ff feb7 	bl	8009b20 <_malloc_r>
 8009db2:	4606      	mov	r6, r0
 8009db4:	b950      	cbnz	r0, 8009dcc <__ssputs_r+0x5c>
 8009db6:	230c      	movs	r3, #12
 8009db8:	f8ca 3000 	str.w	r3, [sl]
 8009dbc:	89a3      	ldrh	r3, [r4, #12]
 8009dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dc2:	81a3      	strh	r3, [r4, #12]
 8009dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dcc:	6921      	ldr	r1, [r4, #16]
 8009dce:	464a      	mov	r2, r9
 8009dd0:	f000 fad0 	bl	800a374 <memcpy>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dde:	81a3      	strh	r3, [r4, #12]
 8009de0:	6126      	str	r6, [r4, #16]
 8009de2:	6165      	str	r5, [r4, #20]
 8009de4:	444e      	add	r6, r9
 8009de6:	eba5 0509 	sub.w	r5, r5, r9
 8009dea:	6026      	str	r6, [r4, #0]
 8009dec:	60a5      	str	r5, [r4, #8]
 8009dee:	463e      	mov	r6, r7
 8009df0:	42be      	cmp	r6, r7
 8009df2:	d900      	bls.n	8009df6 <__ssputs_r+0x86>
 8009df4:	463e      	mov	r6, r7
 8009df6:	4632      	mov	r2, r6
 8009df8:	6820      	ldr	r0, [r4, #0]
 8009dfa:	4641      	mov	r1, r8
 8009dfc:	f000 fac8 	bl	800a390 <memmove>
 8009e00:	68a3      	ldr	r3, [r4, #8]
 8009e02:	6822      	ldr	r2, [r4, #0]
 8009e04:	1b9b      	subs	r3, r3, r6
 8009e06:	4432      	add	r2, r6
 8009e08:	60a3      	str	r3, [r4, #8]
 8009e0a:	6022      	str	r2, [r4, #0]
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	e7db      	b.n	8009dc8 <__ssputs_r+0x58>
 8009e10:	462a      	mov	r2, r5
 8009e12:	f000 fad7 	bl	800a3c4 <_realloc_r>
 8009e16:	4606      	mov	r6, r0
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d1e1      	bne.n	8009de0 <__ssputs_r+0x70>
 8009e1c:	6921      	ldr	r1, [r4, #16]
 8009e1e:	4650      	mov	r0, sl
 8009e20:	f7ff fe2e 	bl	8009a80 <_free_r>
 8009e24:	e7c7      	b.n	8009db6 <__ssputs_r+0x46>
	...

08009e28 <_svfiprintf_r>:
 8009e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	4698      	mov	r8, r3
 8009e2e:	898b      	ldrh	r3, [r1, #12]
 8009e30:	061b      	lsls	r3, r3, #24
 8009e32:	b09d      	sub	sp, #116	; 0x74
 8009e34:	4607      	mov	r7, r0
 8009e36:	460d      	mov	r5, r1
 8009e38:	4614      	mov	r4, r2
 8009e3a:	d50e      	bpl.n	8009e5a <_svfiprintf_r+0x32>
 8009e3c:	690b      	ldr	r3, [r1, #16]
 8009e3e:	b963      	cbnz	r3, 8009e5a <_svfiprintf_r+0x32>
 8009e40:	2140      	movs	r1, #64	; 0x40
 8009e42:	f7ff fe6d 	bl	8009b20 <_malloc_r>
 8009e46:	6028      	str	r0, [r5, #0]
 8009e48:	6128      	str	r0, [r5, #16]
 8009e4a:	b920      	cbnz	r0, 8009e56 <_svfiprintf_r+0x2e>
 8009e4c:	230c      	movs	r3, #12
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e54:	e0d1      	b.n	8009ffa <_svfiprintf_r+0x1d2>
 8009e56:	2340      	movs	r3, #64	; 0x40
 8009e58:	616b      	str	r3, [r5, #20]
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e5e:	2320      	movs	r3, #32
 8009e60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e64:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e68:	2330      	movs	r3, #48	; 0x30
 8009e6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a014 <_svfiprintf_r+0x1ec>
 8009e6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e72:	f04f 0901 	mov.w	r9, #1
 8009e76:	4623      	mov	r3, r4
 8009e78:	469a      	mov	sl, r3
 8009e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e7e:	b10a      	cbz	r2, 8009e84 <_svfiprintf_r+0x5c>
 8009e80:	2a25      	cmp	r2, #37	; 0x25
 8009e82:	d1f9      	bne.n	8009e78 <_svfiprintf_r+0x50>
 8009e84:	ebba 0b04 	subs.w	fp, sl, r4
 8009e88:	d00b      	beq.n	8009ea2 <_svfiprintf_r+0x7a>
 8009e8a:	465b      	mov	r3, fp
 8009e8c:	4622      	mov	r2, r4
 8009e8e:	4629      	mov	r1, r5
 8009e90:	4638      	mov	r0, r7
 8009e92:	f7ff ff6d 	bl	8009d70 <__ssputs_r>
 8009e96:	3001      	adds	r0, #1
 8009e98:	f000 80aa 	beq.w	8009ff0 <_svfiprintf_r+0x1c8>
 8009e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e9e:	445a      	add	r2, fp
 8009ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 80a2 	beq.w	8009ff0 <_svfiprintf_r+0x1c8>
 8009eac:	2300      	movs	r3, #0
 8009eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eb6:	f10a 0a01 	add.w	sl, sl, #1
 8009eba:	9304      	str	r3, [sp, #16]
 8009ebc:	9307      	str	r3, [sp, #28]
 8009ebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ec2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ec4:	4654      	mov	r4, sl
 8009ec6:	2205      	movs	r2, #5
 8009ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ecc:	4851      	ldr	r0, [pc, #324]	; (800a014 <_svfiprintf_r+0x1ec>)
 8009ece:	f7f6 f987 	bl	80001e0 <memchr>
 8009ed2:	9a04      	ldr	r2, [sp, #16]
 8009ed4:	b9d8      	cbnz	r0, 8009f0e <_svfiprintf_r+0xe6>
 8009ed6:	06d0      	lsls	r0, r2, #27
 8009ed8:	bf44      	itt	mi
 8009eda:	2320      	movmi	r3, #32
 8009edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ee0:	0711      	lsls	r1, r2, #28
 8009ee2:	bf44      	itt	mi
 8009ee4:	232b      	movmi	r3, #43	; 0x2b
 8009ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eea:	f89a 3000 	ldrb.w	r3, [sl]
 8009eee:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef0:	d015      	beq.n	8009f1e <_svfiprintf_r+0xf6>
 8009ef2:	9a07      	ldr	r2, [sp, #28]
 8009ef4:	4654      	mov	r4, sl
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	f04f 0c0a 	mov.w	ip, #10
 8009efc:	4621      	mov	r1, r4
 8009efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f02:	3b30      	subs	r3, #48	; 0x30
 8009f04:	2b09      	cmp	r3, #9
 8009f06:	d94e      	bls.n	8009fa6 <_svfiprintf_r+0x17e>
 8009f08:	b1b0      	cbz	r0, 8009f38 <_svfiprintf_r+0x110>
 8009f0a:	9207      	str	r2, [sp, #28]
 8009f0c:	e014      	b.n	8009f38 <_svfiprintf_r+0x110>
 8009f0e:	eba0 0308 	sub.w	r3, r0, r8
 8009f12:	fa09 f303 	lsl.w	r3, r9, r3
 8009f16:	4313      	orrs	r3, r2
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	46a2      	mov	sl, r4
 8009f1c:	e7d2      	b.n	8009ec4 <_svfiprintf_r+0x9c>
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	1d19      	adds	r1, r3, #4
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	9103      	str	r1, [sp, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	bfbb      	ittet	lt
 8009f2a:	425b      	neglt	r3, r3
 8009f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f30:	9307      	strge	r3, [sp, #28]
 8009f32:	9307      	strlt	r3, [sp, #28]
 8009f34:	bfb8      	it	lt
 8009f36:	9204      	strlt	r2, [sp, #16]
 8009f38:	7823      	ldrb	r3, [r4, #0]
 8009f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f3c:	d10c      	bne.n	8009f58 <_svfiprintf_r+0x130>
 8009f3e:	7863      	ldrb	r3, [r4, #1]
 8009f40:	2b2a      	cmp	r3, #42	; 0x2a
 8009f42:	d135      	bne.n	8009fb0 <_svfiprintf_r+0x188>
 8009f44:	9b03      	ldr	r3, [sp, #12]
 8009f46:	1d1a      	adds	r2, r3, #4
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	9203      	str	r2, [sp, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	bfb8      	it	lt
 8009f50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f54:	3402      	adds	r4, #2
 8009f56:	9305      	str	r3, [sp, #20]
 8009f58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a024 <_svfiprintf_r+0x1fc>
 8009f5c:	7821      	ldrb	r1, [r4, #0]
 8009f5e:	2203      	movs	r2, #3
 8009f60:	4650      	mov	r0, sl
 8009f62:	f7f6 f93d 	bl	80001e0 <memchr>
 8009f66:	b140      	cbz	r0, 8009f7a <_svfiprintf_r+0x152>
 8009f68:	2340      	movs	r3, #64	; 0x40
 8009f6a:	eba0 000a 	sub.w	r0, r0, sl
 8009f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f72:	9b04      	ldr	r3, [sp, #16]
 8009f74:	4303      	orrs	r3, r0
 8009f76:	3401      	adds	r4, #1
 8009f78:	9304      	str	r3, [sp, #16]
 8009f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f7e:	4826      	ldr	r0, [pc, #152]	; (800a018 <_svfiprintf_r+0x1f0>)
 8009f80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f84:	2206      	movs	r2, #6
 8009f86:	f7f6 f92b 	bl	80001e0 <memchr>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d038      	beq.n	800a000 <_svfiprintf_r+0x1d8>
 8009f8e:	4b23      	ldr	r3, [pc, #140]	; (800a01c <_svfiprintf_r+0x1f4>)
 8009f90:	bb1b      	cbnz	r3, 8009fda <_svfiprintf_r+0x1b2>
 8009f92:	9b03      	ldr	r3, [sp, #12]
 8009f94:	3307      	adds	r3, #7
 8009f96:	f023 0307 	bic.w	r3, r3, #7
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	9303      	str	r3, [sp, #12]
 8009f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa0:	4433      	add	r3, r6
 8009fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa4:	e767      	b.n	8009e76 <_svfiprintf_r+0x4e>
 8009fa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009faa:	460c      	mov	r4, r1
 8009fac:	2001      	movs	r0, #1
 8009fae:	e7a5      	b.n	8009efc <_svfiprintf_r+0xd4>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	3401      	adds	r4, #1
 8009fb4:	9305      	str	r3, [sp, #20]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	f04f 0c0a 	mov.w	ip, #10
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fc2:	3a30      	subs	r2, #48	; 0x30
 8009fc4:	2a09      	cmp	r2, #9
 8009fc6:	d903      	bls.n	8009fd0 <_svfiprintf_r+0x1a8>
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d0c5      	beq.n	8009f58 <_svfiprintf_r+0x130>
 8009fcc:	9105      	str	r1, [sp, #20]
 8009fce:	e7c3      	b.n	8009f58 <_svfiprintf_r+0x130>
 8009fd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e7f0      	b.n	8009fbc <_svfiprintf_r+0x194>
 8009fda:	ab03      	add	r3, sp, #12
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	462a      	mov	r2, r5
 8009fe0:	4b0f      	ldr	r3, [pc, #60]	; (800a020 <_svfiprintf_r+0x1f8>)
 8009fe2:	a904      	add	r1, sp, #16
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f3af 8000 	nop.w
 8009fea:	1c42      	adds	r2, r0, #1
 8009fec:	4606      	mov	r6, r0
 8009fee:	d1d6      	bne.n	8009f9e <_svfiprintf_r+0x176>
 8009ff0:	89ab      	ldrh	r3, [r5, #12]
 8009ff2:	065b      	lsls	r3, r3, #25
 8009ff4:	f53f af2c 	bmi.w	8009e50 <_svfiprintf_r+0x28>
 8009ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ffa:	b01d      	add	sp, #116	; 0x74
 8009ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a000:	ab03      	add	r3, sp, #12
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	462a      	mov	r2, r5
 800a006:	4b06      	ldr	r3, [pc, #24]	; (800a020 <_svfiprintf_r+0x1f8>)
 800a008:	a904      	add	r1, sp, #16
 800a00a:	4638      	mov	r0, r7
 800a00c:	f000 f87a 	bl	800a104 <_printf_i>
 800a010:	e7eb      	b.n	8009fea <_svfiprintf_r+0x1c2>
 800a012:	bf00      	nop
 800a014:	0800ab34 	.word	0x0800ab34
 800a018:	0800ab3e 	.word	0x0800ab3e
 800a01c:	00000000 	.word	0x00000000
 800a020:	08009d71 	.word	0x08009d71
 800a024:	0800ab3a 	.word	0x0800ab3a

0800a028 <_printf_common>:
 800a028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a02c:	4616      	mov	r6, r2
 800a02e:	4699      	mov	r9, r3
 800a030:	688a      	ldr	r2, [r1, #8]
 800a032:	690b      	ldr	r3, [r1, #16]
 800a034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a038:	4293      	cmp	r3, r2
 800a03a:	bfb8      	it	lt
 800a03c:	4613      	movlt	r3, r2
 800a03e:	6033      	str	r3, [r6, #0]
 800a040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a044:	4607      	mov	r7, r0
 800a046:	460c      	mov	r4, r1
 800a048:	b10a      	cbz	r2, 800a04e <_printf_common+0x26>
 800a04a:	3301      	adds	r3, #1
 800a04c:	6033      	str	r3, [r6, #0]
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	0699      	lsls	r1, r3, #26
 800a052:	bf42      	ittt	mi
 800a054:	6833      	ldrmi	r3, [r6, #0]
 800a056:	3302      	addmi	r3, #2
 800a058:	6033      	strmi	r3, [r6, #0]
 800a05a:	6825      	ldr	r5, [r4, #0]
 800a05c:	f015 0506 	ands.w	r5, r5, #6
 800a060:	d106      	bne.n	800a070 <_printf_common+0x48>
 800a062:	f104 0a19 	add.w	sl, r4, #25
 800a066:	68e3      	ldr	r3, [r4, #12]
 800a068:	6832      	ldr	r2, [r6, #0]
 800a06a:	1a9b      	subs	r3, r3, r2
 800a06c:	42ab      	cmp	r3, r5
 800a06e:	dc26      	bgt.n	800a0be <_printf_common+0x96>
 800a070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a074:	1e13      	subs	r3, r2, #0
 800a076:	6822      	ldr	r2, [r4, #0]
 800a078:	bf18      	it	ne
 800a07a:	2301      	movne	r3, #1
 800a07c:	0692      	lsls	r2, r2, #26
 800a07e:	d42b      	bmi.n	800a0d8 <_printf_common+0xb0>
 800a080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a084:	4649      	mov	r1, r9
 800a086:	4638      	mov	r0, r7
 800a088:	47c0      	blx	r8
 800a08a:	3001      	adds	r0, #1
 800a08c:	d01e      	beq.n	800a0cc <_printf_common+0xa4>
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	68e5      	ldr	r5, [r4, #12]
 800a092:	6832      	ldr	r2, [r6, #0]
 800a094:	f003 0306 	and.w	r3, r3, #6
 800a098:	2b04      	cmp	r3, #4
 800a09a:	bf08      	it	eq
 800a09c:	1aad      	subeq	r5, r5, r2
 800a09e:	68a3      	ldr	r3, [r4, #8]
 800a0a0:	6922      	ldr	r2, [r4, #16]
 800a0a2:	bf0c      	ite	eq
 800a0a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0a8:	2500      	movne	r5, #0
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	bfc4      	itt	gt
 800a0ae:	1a9b      	subgt	r3, r3, r2
 800a0b0:	18ed      	addgt	r5, r5, r3
 800a0b2:	2600      	movs	r6, #0
 800a0b4:	341a      	adds	r4, #26
 800a0b6:	42b5      	cmp	r5, r6
 800a0b8:	d11a      	bne.n	800a0f0 <_printf_common+0xc8>
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	e008      	b.n	800a0d0 <_printf_common+0xa8>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	4652      	mov	r2, sl
 800a0c2:	4649      	mov	r1, r9
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	47c0      	blx	r8
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	d103      	bne.n	800a0d4 <_printf_common+0xac>
 800a0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d4:	3501      	adds	r5, #1
 800a0d6:	e7c6      	b.n	800a066 <_printf_common+0x3e>
 800a0d8:	18e1      	adds	r1, r4, r3
 800a0da:	1c5a      	adds	r2, r3, #1
 800a0dc:	2030      	movs	r0, #48	; 0x30
 800a0de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0e2:	4422      	add	r2, r4
 800a0e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0ec:	3302      	adds	r3, #2
 800a0ee:	e7c7      	b.n	800a080 <_printf_common+0x58>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	4622      	mov	r2, r4
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	47c0      	blx	r8
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	d0e6      	beq.n	800a0cc <_printf_common+0xa4>
 800a0fe:	3601      	adds	r6, #1
 800a100:	e7d9      	b.n	800a0b6 <_printf_common+0x8e>
	...

0800a104 <_printf_i>:
 800a104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a108:	460c      	mov	r4, r1
 800a10a:	4691      	mov	r9, r2
 800a10c:	7e27      	ldrb	r7, [r4, #24]
 800a10e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a110:	2f78      	cmp	r7, #120	; 0x78
 800a112:	4680      	mov	r8, r0
 800a114:	469a      	mov	sl, r3
 800a116:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a11a:	d807      	bhi.n	800a12c <_printf_i+0x28>
 800a11c:	2f62      	cmp	r7, #98	; 0x62
 800a11e:	d80a      	bhi.n	800a136 <_printf_i+0x32>
 800a120:	2f00      	cmp	r7, #0
 800a122:	f000 80d8 	beq.w	800a2d6 <_printf_i+0x1d2>
 800a126:	2f58      	cmp	r7, #88	; 0x58
 800a128:	f000 80a3 	beq.w	800a272 <_printf_i+0x16e>
 800a12c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a134:	e03a      	b.n	800a1ac <_printf_i+0xa8>
 800a136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a13a:	2b15      	cmp	r3, #21
 800a13c:	d8f6      	bhi.n	800a12c <_printf_i+0x28>
 800a13e:	a001      	add	r0, pc, #4	; (adr r0, 800a144 <_printf_i+0x40>)
 800a140:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a144:	0800a19d 	.word	0x0800a19d
 800a148:	0800a1b1 	.word	0x0800a1b1
 800a14c:	0800a12d 	.word	0x0800a12d
 800a150:	0800a12d 	.word	0x0800a12d
 800a154:	0800a12d 	.word	0x0800a12d
 800a158:	0800a12d 	.word	0x0800a12d
 800a15c:	0800a1b1 	.word	0x0800a1b1
 800a160:	0800a12d 	.word	0x0800a12d
 800a164:	0800a12d 	.word	0x0800a12d
 800a168:	0800a12d 	.word	0x0800a12d
 800a16c:	0800a12d 	.word	0x0800a12d
 800a170:	0800a2bd 	.word	0x0800a2bd
 800a174:	0800a1e1 	.word	0x0800a1e1
 800a178:	0800a29f 	.word	0x0800a29f
 800a17c:	0800a12d 	.word	0x0800a12d
 800a180:	0800a12d 	.word	0x0800a12d
 800a184:	0800a2df 	.word	0x0800a2df
 800a188:	0800a12d 	.word	0x0800a12d
 800a18c:	0800a1e1 	.word	0x0800a1e1
 800a190:	0800a12d 	.word	0x0800a12d
 800a194:	0800a12d 	.word	0x0800a12d
 800a198:	0800a2a7 	.word	0x0800a2a7
 800a19c:	680b      	ldr	r3, [r1, #0]
 800a19e:	1d1a      	adds	r2, r3, #4
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	600a      	str	r2, [r1, #0]
 800a1a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a1a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e0a3      	b.n	800a2f8 <_printf_i+0x1f4>
 800a1b0:	6825      	ldr	r5, [r4, #0]
 800a1b2:	6808      	ldr	r0, [r1, #0]
 800a1b4:	062e      	lsls	r6, r5, #24
 800a1b6:	f100 0304 	add.w	r3, r0, #4
 800a1ba:	d50a      	bpl.n	800a1d2 <_printf_i+0xce>
 800a1bc:	6805      	ldr	r5, [r0, #0]
 800a1be:	600b      	str	r3, [r1, #0]
 800a1c0:	2d00      	cmp	r5, #0
 800a1c2:	da03      	bge.n	800a1cc <_printf_i+0xc8>
 800a1c4:	232d      	movs	r3, #45	; 0x2d
 800a1c6:	426d      	negs	r5, r5
 800a1c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1cc:	485e      	ldr	r0, [pc, #376]	; (800a348 <_printf_i+0x244>)
 800a1ce:	230a      	movs	r3, #10
 800a1d0:	e019      	b.n	800a206 <_printf_i+0x102>
 800a1d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a1d6:	6805      	ldr	r5, [r0, #0]
 800a1d8:	600b      	str	r3, [r1, #0]
 800a1da:	bf18      	it	ne
 800a1dc:	b22d      	sxthne	r5, r5
 800a1de:	e7ef      	b.n	800a1c0 <_printf_i+0xbc>
 800a1e0:	680b      	ldr	r3, [r1, #0]
 800a1e2:	6825      	ldr	r5, [r4, #0]
 800a1e4:	1d18      	adds	r0, r3, #4
 800a1e6:	6008      	str	r0, [r1, #0]
 800a1e8:	0628      	lsls	r0, r5, #24
 800a1ea:	d501      	bpl.n	800a1f0 <_printf_i+0xec>
 800a1ec:	681d      	ldr	r5, [r3, #0]
 800a1ee:	e002      	b.n	800a1f6 <_printf_i+0xf2>
 800a1f0:	0669      	lsls	r1, r5, #25
 800a1f2:	d5fb      	bpl.n	800a1ec <_printf_i+0xe8>
 800a1f4:	881d      	ldrh	r5, [r3, #0]
 800a1f6:	4854      	ldr	r0, [pc, #336]	; (800a348 <_printf_i+0x244>)
 800a1f8:	2f6f      	cmp	r7, #111	; 0x6f
 800a1fa:	bf0c      	ite	eq
 800a1fc:	2308      	moveq	r3, #8
 800a1fe:	230a      	movne	r3, #10
 800a200:	2100      	movs	r1, #0
 800a202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a206:	6866      	ldr	r6, [r4, #4]
 800a208:	60a6      	str	r6, [r4, #8]
 800a20a:	2e00      	cmp	r6, #0
 800a20c:	bfa2      	ittt	ge
 800a20e:	6821      	ldrge	r1, [r4, #0]
 800a210:	f021 0104 	bicge.w	r1, r1, #4
 800a214:	6021      	strge	r1, [r4, #0]
 800a216:	b90d      	cbnz	r5, 800a21c <_printf_i+0x118>
 800a218:	2e00      	cmp	r6, #0
 800a21a:	d04d      	beq.n	800a2b8 <_printf_i+0x1b4>
 800a21c:	4616      	mov	r6, r2
 800a21e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a222:	fb03 5711 	mls	r7, r3, r1, r5
 800a226:	5dc7      	ldrb	r7, [r0, r7]
 800a228:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a22c:	462f      	mov	r7, r5
 800a22e:	42bb      	cmp	r3, r7
 800a230:	460d      	mov	r5, r1
 800a232:	d9f4      	bls.n	800a21e <_printf_i+0x11a>
 800a234:	2b08      	cmp	r3, #8
 800a236:	d10b      	bne.n	800a250 <_printf_i+0x14c>
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	07df      	lsls	r7, r3, #31
 800a23c:	d508      	bpl.n	800a250 <_printf_i+0x14c>
 800a23e:	6923      	ldr	r3, [r4, #16]
 800a240:	6861      	ldr	r1, [r4, #4]
 800a242:	4299      	cmp	r1, r3
 800a244:	bfde      	ittt	le
 800a246:	2330      	movle	r3, #48	; 0x30
 800a248:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a24c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a250:	1b92      	subs	r2, r2, r6
 800a252:	6122      	str	r2, [r4, #16]
 800a254:	f8cd a000 	str.w	sl, [sp]
 800a258:	464b      	mov	r3, r9
 800a25a:	aa03      	add	r2, sp, #12
 800a25c:	4621      	mov	r1, r4
 800a25e:	4640      	mov	r0, r8
 800a260:	f7ff fee2 	bl	800a028 <_printf_common>
 800a264:	3001      	adds	r0, #1
 800a266:	d14c      	bne.n	800a302 <_printf_i+0x1fe>
 800a268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a26c:	b004      	add	sp, #16
 800a26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a272:	4835      	ldr	r0, [pc, #212]	; (800a348 <_printf_i+0x244>)
 800a274:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	680e      	ldr	r6, [r1, #0]
 800a27c:	061f      	lsls	r7, r3, #24
 800a27e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a282:	600e      	str	r6, [r1, #0]
 800a284:	d514      	bpl.n	800a2b0 <_printf_i+0x1ac>
 800a286:	07d9      	lsls	r1, r3, #31
 800a288:	bf44      	itt	mi
 800a28a:	f043 0320 	orrmi.w	r3, r3, #32
 800a28e:	6023      	strmi	r3, [r4, #0]
 800a290:	b91d      	cbnz	r5, 800a29a <_printf_i+0x196>
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	f023 0320 	bic.w	r3, r3, #32
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	2310      	movs	r3, #16
 800a29c:	e7b0      	b.n	800a200 <_printf_i+0xfc>
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	f043 0320 	orr.w	r3, r3, #32
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	2378      	movs	r3, #120	; 0x78
 800a2a8:	4828      	ldr	r0, [pc, #160]	; (800a34c <_printf_i+0x248>)
 800a2aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2ae:	e7e3      	b.n	800a278 <_printf_i+0x174>
 800a2b0:	065e      	lsls	r6, r3, #25
 800a2b2:	bf48      	it	mi
 800a2b4:	b2ad      	uxthmi	r5, r5
 800a2b6:	e7e6      	b.n	800a286 <_printf_i+0x182>
 800a2b8:	4616      	mov	r6, r2
 800a2ba:	e7bb      	b.n	800a234 <_printf_i+0x130>
 800a2bc:	680b      	ldr	r3, [r1, #0]
 800a2be:	6826      	ldr	r6, [r4, #0]
 800a2c0:	6960      	ldr	r0, [r4, #20]
 800a2c2:	1d1d      	adds	r5, r3, #4
 800a2c4:	600d      	str	r5, [r1, #0]
 800a2c6:	0635      	lsls	r5, r6, #24
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	d501      	bpl.n	800a2d0 <_printf_i+0x1cc>
 800a2cc:	6018      	str	r0, [r3, #0]
 800a2ce:	e002      	b.n	800a2d6 <_printf_i+0x1d2>
 800a2d0:	0671      	lsls	r1, r6, #25
 800a2d2:	d5fb      	bpl.n	800a2cc <_printf_i+0x1c8>
 800a2d4:	8018      	strh	r0, [r3, #0]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	6123      	str	r3, [r4, #16]
 800a2da:	4616      	mov	r6, r2
 800a2dc:	e7ba      	b.n	800a254 <_printf_i+0x150>
 800a2de:	680b      	ldr	r3, [r1, #0]
 800a2e0:	1d1a      	adds	r2, r3, #4
 800a2e2:	600a      	str	r2, [r1, #0]
 800a2e4:	681e      	ldr	r6, [r3, #0]
 800a2e6:	6862      	ldr	r2, [r4, #4]
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f7f5 ff78 	bl	80001e0 <memchr>
 800a2f0:	b108      	cbz	r0, 800a2f6 <_printf_i+0x1f2>
 800a2f2:	1b80      	subs	r0, r0, r6
 800a2f4:	6060      	str	r0, [r4, #4]
 800a2f6:	6863      	ldr	r3, [r4, #4]
 800a2f8:	6123      	str	r3, [r4, #16]
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a300:	e7a8      	b.n	800a254 <_printf_i+0x150>
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	4632      	mov	r2, r6
 800a306:	4649      	mov	r1, r9
 800a308:	4640      	mov	r0, r8
 800a30a:	47d0      	blx	sl
 800a30c:	3001      	adds	r0, #1
 800a30e:	d0ab      	beq.n	800a268 <_printf_i+0x164>
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	079b      	lsls	r3, r3, #30
 800a314:	d413      	bmi.n	800a33e <_printf_i+0x23a>
 800a316:	68e0      	ldr	r0, [r4, #12]
 800a318:	9b03      	ldr	r3, [sp, #12]
 800a31a:	4298      	cmp	r0, r3
 800a31c:	bfb8      	it	lt
 800a31e:	4618      	movlt	r0, r3
 800a320:	e7a4      	b.n	800a26c <_printf_i+0x168>
 800a322:	2301      	movs	r3, #1
 800a324:	4632      	mov	r2, r6
 800a326:	4649      	mov	r1, r9
 800a328:	4640      	mov	r0, r8
 800a32a:	47d0      	blx	sl
 800a32c:	3001      	adds	r0, #1
 800a32e:	d09b      	beq.n	800a268 <_printf_i+0x164>
 800a330:	3501      	adds	r5, #1
 800a332:	68e3      	ldr	r3, [r4, #12]
 800a334:	9903      	ldr	r1, [sp, #12]
 800a336:	1a5b      	subs	r3, r3, r1
 800a338:	42ab      	cmp	r3, r5
 800a33a:	dcf2      	bgt.n	800a322 <_printf_i+0x21e>
 800a33c:	e7eb      	b.n	800a316 <_printf_i+0x212>
 800a33e:	2500      	movs	r5, #0
 800a340:	f104 0619 	add.w	r6, r4, #25
 800a344:	e7f5      	b.n	800a332 <_printf_i+0x22e>
 800a346:	bf00      	nop
 800a348:	0800ab45 	.word	0x0800ab45
 800a34c:	0800ab56 	.word	0x0800ab56

0800a350 <_read_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4d07      	ldr	r5, [pc, #28]	; (800a370 <_read_r+0x20>)
 800a354:	4604      	mov	r4, r0
 800a356:	4608      	mov	r0, r1
 800a358:	4611      	mov	r1, r2
 800a35a:	2200      	movs	r2, #0
 800a35c:	602a      	str	r2, [r5, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	f7f7 f878 	bl	8001454 <_read>
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d102      	bne.n	800a36e <_read_r+0x1e>
 800a368:	682b      	ldr	r3, [r5, #0]
 800a36a:	b103      	cbz	r3, 800a36e <_read_r+0x1e>
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	bd38      	pop	{r3, r4, r5, pc}
 800a370:	200046ac 	.word	0x200046ac

0800a374 <memcpy>:
 800a374:	440a      	add	r2, r1
 800a376:	4291      	cmp	r1, r2
 800a378:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a37c:	d100      	bne.n	800a380 <memcpy+0xc>
 800a37e:	4770      	bx	lr
 800a380:	b510      	push	{r4, lr}
 800a382:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a38a:	4291      	cmp	r1, r2
 800a38c:	d1f9      	bne.n	800a382 <memcpy+0xe>
 800a38e:	bd10      	pop	{r4, pc}

0800a390 <memmove>:
 800a390:	4288      	cmp	r0, r1
 800a392:	b510      	push	{r4, lr}
 800a394:	eb01 0402 	add.w	r4, r1, r2
 800a398:	d902      	bls.n	800a3a0 <memmove+0x10>
 800a39a:	4284      	cmp	r4, r0
 800a39c:	4623      	mov	r3, r4
 800a39e:	d807      	bhi.n	800a3b0 <memmove+0x20>
 800a3a0:	1e43      	subs	r3, r0, #1
 800a3a2:	42a1      	cmp	r1, r4
 800a3a4:	d008      	beq.n	800a3b8 <memmove+0x28>
 800a3a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3ae:	e7f8      	b.n	800a3a2 <memmove+0x12>
 800a3b0:	4402      	add	r2, r0
 800a3b2:	4601      	mov	r1, r0
 800a3b4:	428a      	cmp	r2, r1
 800a3b6:	d100      	bne.n	800a3ba <memmove+0x2a>
 800a3b8:	bd10      	pop	{r4, pc}
 800a3ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3c2:	e7f7      	b.n	800a3b4 <memmove+0x24>

0800a3c4 <_realloc_r>:
 800a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c6:	4607      	mov	r7, r0
 800a3c8:	4614      	mov	r4, r2
 800a3ca:	460e      	mov	r6, r1
 800a3cc:	b921      	cbnz	r1, 800a3d8 <_realloc_r+0x14>
 800a3ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	f7ff bba4 	b.w	8009b20 <_malloc_r>
 800a3d8:	b922      	cbnz	r2, 800a3e4 <_realloc_r+0x20>
 800a3da:	f7ff fb51 	bl	8009a80 <_free_r>
 800a3de:	4625      	mov	r5, r4
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3e4:	f000 f814 	bl	800a410 <_malloc_usable_size_r>
 800a3e8:	42a0      	cmp	r0, r4
 800a3ea:	d20f      	bcs.n	800a40c <_realloc_r+0x48>
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	f7ff fb96 	bl	8009b20 <_malloc_r>
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d0f2      	beq.n	800a3e0 <_realloc_r+0x1c>
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	f7ff ffb9 	bl	800a374 <memcpy>
 800a402:	4631      	mov	r1, r6
 800a404:	4638      	mov	r0, r7
 800a406:	f7ff fb3b 	bl	8009a80 <_free_r>
 800a40a:	e7e9      	b.n	800a3e0 <_realloc_r+0x1c>
 800a40c:	4635      	mov	r5, r6
 800a40e:	e7e7      	b.n	800a3e0 <_realloc_r+0x1c>

0800a410 <_malloc_usable_size_r>:
 800a410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a414:	1f18      	subs	r0, r3, #4
 800a416:	2b00      	cmp	r3, #0
 800a418:	bfbc      	itt	lt
 800a41a:	580b      	ldrlt	r3, [r1, r0]
 800a41c:	18c0      	addlt	r0, r0, r3
 800a41e:	4770      	bx	lr

0800a420 <_init>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	bf00      	nop
 800a424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a426:	bc08      	pop	{r3}
 800a428:	469e      	mov	lr, r3
 800a42a:	4770      	bx	lr

0800a42c <_fini>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	bf00      	nop
 800a430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a432:	bc08      	pop	{r3}
 800a434:	469e      	mov	lr, r3
 800a436:	4770      	bx	lr
